   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../lcd.c"
 2392              		.align	2
 2393              		.global	Zdma0Done
 2395              	Zdma0Done:
 2396              	.LFB13:
   1:../lcd.c      **** /*********************************************************************************************
   2:../lcd.c      **** * Fichero:	lcd.c
   3:../lcd.c      **** * Autor:	
   4:../lcd.c      **** * Descrip:	funciones de visualizacion y control LCD
   5:../lcd.c      **** * Version:	<P6-ARM>
   6:../lcd.c      **** *********************************************************************************************/
   7:../lcd.c      **** 
   8:../lcd.c      **** /*--- ficheros de cabecera ---*/
   9:../lcd.c      **** #include "def.h"
  10:../lcd.c      **** #include "44b.h"
  11:../lcd.c      **** #include "44blib.h"
  12:../lcd.c      **** #include "lcd.h"
  13:../lcd.c      **** #include "Bmp.h"
  14:../lcd.c      **** #include "itoa.h"
  15:../lcd.c      **** #include "cola_depuracion.h"
  16:../lcd.c      **** 
  17:../lcd.c      **** 
  18:../lcd.c      **** /*--- definicion de macros ---*/
  19:../lcd.c      **** #define DMA_Byte  (0)
  20:../lcd.c      **** #define DMA_HW    (1)
  21:../lcd.c      **** #define DMA_Word  (2)
  22:../lcd.c      **** #define DW 		  DMA_Byte		//configura  ZDMA0 como media palabras
  23:../lcd.c      **** 	
  24:../lcd.c      **** /*--- variables externas ---*/
  25:../lcd.c      **** extern INT8U g_auc_Ascii8x16[];
  26:../lcd.c      **** extern INT8U g_auc_Ascii6x8[];
  27:../lcd.c      **** 
  28:../lcd.c      **** /*--- codigo de la funcion ---*/
  29:../lcd.c      **** void Lcd_Init(void)
  30:../lcd.c      **** {       
  31:../lcd.c      **** 	rDITHMODE=0x1223a;
  32:../lcd.c      **** 	rDP1_2 =0x5a5a;      
  33:../lcd.c      **** 	rDP4_7 =0x366cd9b;
  34:../lcd.c      **** 	rDP3_5 =0xda5a7;
  35:../lcd.c      **** 	rDP2_3 =0xad7;
  36:../lcd.c      **** 	rDP5_7 =0xfeda5b7;
  37:../lcd.c      **** 	rDP3_4 =0xebd7;
  38:../lcd.c      **** 	rDP4_5 =0xebfd7;
  39:../lcd.c      **** 	rDP6_7 =0x7efdfbf;
  40:../lcd.c      **** 
  41:../lcd.c      **** 	rLCDCON1=(0)|(1<<5)|(MVAL_USED<<7)|(0x0<<8)|(0x0<<10)|(CLKVAL_GREY16<<12);
  42:../lcd.c      **** 	rLCDCON2=(LINEVAL)|(HOZVAL<<10)|(10<<21); 
  43:../lcd.c      **** 	rLCDSADDR1= (0x2<<27) | ( ((LCD_ACTIVE_BUFFER>>22)<<21 ) | M5D(LCD_ACTIVE_BUFFER>>1));
  44:../lcd.c      ****  	rLCDSADDR2= M5D(((LCD_ACTIVE_BUFFER+(SCR_XSIZE*LCD_YSIZE/2))>>1)) | (MVAL<<21);
  45:../lcd.c      **** 	rLCDSADDR3= (LCD_XSIZE/4) | ( ((SCR_XSIZE-LCD_XSIZE)/4)<<9 );
  46:../lcd.c      **** 	// enable,4B_SNGL_SCAN,WDLY=8clk,WLH=8clk,
  47:../lcd.c      **** 	rLCDCON1=(1)|(1<<5)|(MVAL_USED<<7)|(0x3<<8)|(0x3<<10)|(CLKVAL_GREY16<<12);
  48:../lcd.c      **** 	rBLUELUT=0xfa40;
  49:../lcd.c      **** 	//Enable LCD Logic and EL back-light.
  50:../lcd.c      **** 	rPDATE=rPDATE&0x0e;
  51:../lcd.c      **** 	
  52:../lcd.c      **** 	//DMA ISR
  53:../lcd.c      **** 	rINTMSK &= ~(BIT_ZDMA0);
  54:../lcd.c      ****     pISR_ZDMA0=(int)Zdma0Done;
  55:../lcd.c      **** }
  56:../lcd.c      **** 
  57:../lcd.c      **** /*********************************************************************************************
  58:../lcd.c      **** * name:		Lcd_Active_Clr()
  59:../lcd.c      **** * func:		clear LCD screen
  60:../lcd.c      **** * para:		none 
  61:../lcd.c      **** * ret:		none
  62:../lcd.c      **** * modify:
  63:../lcd.c      **** * comment:		
  64:../lcd.c      **** *********************************************************************************************/
  65:../lcd.c      **** void Lcd_Active_Clr(void)
  66:../lcd.c      **** {
  67:../lcd.c      **** 	INT32U i;
  68:../lcd.c      **** 	INT32U *pDisp = (INT32U *)LCD_ACTIVE_BUFFER;
  69:../lcd.c      **** 	
  70:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
  71:../lcd.c      **** 	{
  72:../lcd.c      **** 		*pDisp++ = WHITE;
  73:../lcd.c      **** 	}
  74:../lcd.c      **** }
  75:../lcd.c      **** 
  76:../lcd.c      **** /*********************************************************************************************
  77:../lcd.c      **** * name:		Lcd_GetPixel()
  78:../lcd.c      **** * func:		Get appointed point's color value
  79:../lcd.c      **** * para:		usX,usY -- pot's X-Y coordinate 
  80:../lcd.c      **** * ret:		pot's color value
  81:../lcd.c      **** * modify:
  82:../lcd.c      **** * comment:		
  83:../lcd.c      **** *********************************************************************************************/
  84:../lcd.c      **** INT8U LCD_GetPixel(INT16U usX, INT16U usY)
  85:../lcd.c      **** {
  86:../lcd.c      **** 	INT8U ucColor;
  87:../lcd.c      **** 
  88:../lcd.c      **** 	ucColor = *((INT8U*)(LCD_VIRTUAL_BUFFER + usY*SCR_XSIZE/2 + usX/8*4 + 3 - (usX%8)/2));
  89:../lcd.c      **** 	ucColor = (ucColor >> ((1-(usX%2))*4)) & 0x0f;
  90:../lcd.c      **** 	return ucColor;
  91:../lcd.c      **** }
  92:../lcd.c      **** 
  93:../lcd.c      **** /*********************************************************************************************
  94:../lcd.c      **** * name:		Lcd_Active_Clr()
  95:../lcd.c      **** * func:		clear virtual screen
  96:../lcd.c      **** * para:		none 
  97:../lcd.c      **** * ret:		none
  98:../lcd.c      **** * modify:
  99:../lcd.c      **** * comment:		
 100:../lcd.c      **** *********************************************************************************************/
 101:../lcd.c      **** void Lcd_Clr(void)
 102:../lcd.c      **** {
 103:../lcd.c      **** 	INT32U i;
 104:../lcd.c      **** 	INT32U *pDisp = (INT32U *)LCD_VIRTUAL_BUFFER;
 105:../lcd.c      **** 	
 106:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
 107:../lcd.c      **** 	{
 108:../lcd.c      **** 		*pDisp++ = WHITE;
 109:../lcd.c      **** 	}
 110:../lcd.c      **** }
 111:../lcd.c      **** 
 112:../lcd.c      **** /*********************************************************************************************
 113:../lcd.c      **** * name:		LcdClrRect()
 114:../lcd.c      **** * func:		fill appointed area with appointed color
 115:../lcd.c      **** * para:		usLeft,usTop,usRight,usBottom -- area's rectangle acme coordinate
 116:../lcd.c      **** *			ucColor -- appointed color value
 117:../lcd.c      **** * ret:		none
 118:../lcd.c      **** * modify:
 119:../lcd.c      **** * comment:	also as clear screen function 
 120:../lcd.c      **** *********************************************************************************************/
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 122:../lcd.c      **** {
 123:../lcd.c      **** 	INT16 i,k,l,m;
 124:../lcd.c      **** 	
 125:../lcd.c      **** 	INT32U ulColor = (ucColor << 28) | (ucColor << 24) | (ucColor << 20) | (ucColor << 16) | 
 126:../lcd.c      **** 				     (ucColor << 12) | (ucColor << 8) | (ucColor << 4) | ucColor;
 127:../lcd.c      **** 
 128:../lcd.c      **** 	i = k = l = m = 0;	
 129:../lcd.c      **** 	if( (usRight-usLeft) <= 8 )
 130:../lcd.c      **** 	{
 131:../lcd.c      **** 		for( i=usTop; i<=usBottom; i++)
 132:../lcd.c      **** 		{
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 134:../lcd.c      **** 			{
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 136:../lcd.c      **** 			}
 137:../lcd.c      **** 		}	
 138:../lcd.c      **** 		return;
 139:../lcd.c      **** 	}
 140:../lcd.c      **** 
 141:../lcd.c      **** 	/* check borderline */
 142:../lcd.c      **** 	if( 0 == (usLeft%8) )
 143:../lcd.c      **** 		k=usLeft;
 144:../lcd.c      **** 	else
 145:../lcd.c      **** 	{
 146:../lcd.c      **** 		k=(usLeft/8)*8+8;
 147:../lcd.c      **** 	}
 148:../lcd.c      **** 	if( 0 == (usRight%8) )
 149:../lcd.c      **** 		l= usRight;
 150:../lcd.c      **** 	else
 151:../lcd.c      **** 	{
 152:../lcd.c      **** 		l=(usRight/8)*8;
 153:../lcd.c      **** 	}
 154:../lcd.c      **** 
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 156:../lcd.c      **** 	{
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 158:../lcd.c      **** 		{
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 160:../lcd.c      **** 		}
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 162:../lcd.c      **** 		{
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 164:../lcd.c      **** 		}
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 166:../lcd.c      **** 		{
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 168:../lcd.c      **** 		}
 169:../lcd.c      **** 	}
 170:../lcd.c      **** }
 171:../lcd.c      **** 
 172:../lcd.c      **** /*********************************************************************************************
 173:../lcd.c      **** * name:		Lcd_Draw_Box()
 174:../lcd.c      **** * func:		Draw rectangle with appointed color
 175:../lcd.c      **** * para:		usLeft,usTop,usRight,usBottom -- rectangle's acme coordinate
 176:../lcd.c      **** *			ucColor -- appointed color value
 177:../lcd.c      **** * ret:		none
 178:../lcd.c      **** * modify:
 179:../lcd.c      **** * comment:		
 180:../lcd.c      **** *********************************************************************************************/
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 182:../lcd.c      **** {
 183:../lcd.c      **** 	Lcd_Draw_HLine(usLeft, usRight,  usTop,    ucColor, 1);
 184:../lcd.c      **** 	Lcd_Draw_HLine(usLeft, usRight,  usBottom, ucColor, 1);
 185:../lcd.c      **** 	Lcd_Draw_VLine(usTop,  usBottom, usLeft,   ucColor, 1);
 186:../lcd.c      **** 	Lcd_Draw_VLine(usTop,  usBottom, usRight,  ucColor, 1);
 187:../lcd.c      **** }
 188:../lcd.c      **** 
 189:../lcd.c      **** /*********************************************************************************************
 190:../lcd.c      **** * name:		Lcd_Draw_Line()
 191:../lcd.c      **** * func:		Draw line with appointed color
 192:../lcd.c      **** * para:		usX0,usY0 -- line's start point coordinate
 193:../lcd.c      **** *			usX1,usY1 -- line's end point coordinate
 194:../lcd.c      **** *			ucColor -- appointed color value
 195:../lcd.c      **** *			usWidth -- line's width
 196:../lcd.c      **** * ret:		none
 197:../lcd.c      **** * modify:
 198:../lcd.c      **** * comment:		
 199:../lcd.c      **** *********************************************************************************************/
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 201:../lcd.c      **** {
 202:../lcd.c      **** 	INT16 usDx;
 203:../lcd.c      **** 	INT16 usDy;
 204:../lcd.c      **** 	INT16 y_sign;
 205:../lcd.c      **** 	INT16 x_sign;
 206:../lcd.c      **** 	INT16 decision;
 207:../lcd.c      **** 	INT16 wCurx, wCury, wNextx, wNexty, wpy, wpx;
 208:../lcd.c      **** 
 209:../lcd.c      **** 	if( usY0 == usY1 )
 210:../lcd.c      **** 	{
 211:../lcd.c      **** 		Lcd_Draw_HLine (usX0, usX1, usY0, ucColor, usWidth);
 212:../lcd.c      **** 		return;
 213:../lcd.c      **** 	}
 214:../lcd.c      **** 	if( usX0 == usX1 )
 215:../lcd.c      **** 	{
 216:../lcd.c      **** 		Lcd_Draw_VLine (usY0, usY1, usX0, ucColor, usWidth);
 217:../lcd.c      **** 		return;
 218:../lcd.c      **** 	}
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 221:../lcd.c      **** 	if( ((usDx >= usDy && (usX0 > usX1)) ||
 222:../lcd.c      ****         ((usDy > usDx) && (usY0 > usY1))) )
 223:../lcd.c      ****     {
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 226:../lcd.c      ****     }
 227:../lcd.c      ****     y_sign = (usY1 - usY0) / usDy;
 228:../lcd.c      ****     x_sign = (usX1 - usX0) / usDx;
 229:../lcd.c      **** 
 230:../lcd.c      ****     if( usDx >= usDy )
 231:../lcd.c      ****     {
 232:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 233:../lcd.c      ****              wNexty = usY1, decision = (usDx >> 1);
 234:../lcd.c      ****              wCurx <= wNextx; wCurx++, wNextx--, decision += usDy )
 235:../lcd.c      ****         {
 236:../lcd.c      ****             if( decision >= usDx )
 237:../lcd.c      ****             {
 238:../lcd.c      ****                 decision -= usDx;
 239:../lcd.c      ****                 wCury += y_sign;
 240:../lcd.c      ****                 wNexty -= y_sign;
 241:../lcd.c      ****             }
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 243:../lcd.c      ****                  wpy <= wCury + usWidth / 2; wpy++ )
 244:../lcd.c      ****             {
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 246:../lcd.c      ****             }
 247:../lcd.c      **** 
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 249:../lcd.c      ****                  wpy <= wNexty + usWidth / 2; wpy++ )
 250:../lcd.c      ****             {
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 252:../lcd.c      ****             }
 253:../lcd.c      ****         }
 254:../lcd.c      ****     }
 255:../lcd.c      ****     else
 256:../lcd.c      ****     {
 257:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 259:../lcd.c      ****              wCury <= wNexty; wCury++, wNexty--, decision += usDx )
 260:../lcd.c      ****         {
 261:../lcd.c      ****             if( decision >= usDy )
 262:../lcd.c      ****             {
 263:../lcd.c      ****                 decision -= usDy;
 264:../lcd.c      ****                 wCurx += x_sign;
 265:../lcd.c      ****                 wNextx -= x_sign;
 266:../lcd.c      ****             }
 267:../lcd.c      ****             for( wpx = wCurx - usWidth / 2;
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 269:../lcd.c      ****             {
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 271:../lcd.c      ****             }
 272:../lcd.c      **** 
 273:../lcd.c      ****             for( wpx = wNextx - usWidth / 2;
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 275:../lcd.c      ****             {
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 277:../lcd.c      ****             }
 278:../lcd.c      ****         }
 279:../lcd.c      ****     }
 280:../lcd.c      **** }
 281:../lcd.c      **** 
 282:../lcd.c      **** /*********************************************************************************************
 283:../lcd.c      **** * name:		Lcd_Draw_HLine()
 284:../lcd.c      **** * func:		Draw horizontal line with appointed color
 285:../lcd.c      **** * para:		usX0,usY0 -- line's start point coordinate
 286:../lcd.c      **** *			usX1 -- line's end point X-coordinate
 287:../lcd.c      **** *			ucColor -- appointed color value
 288:../lcd.c      **** *			usWidth -- line's width
 289:../lcd.c      **** * ret:		none
 290:../lcd.c      **** * modify:
 291:../lcd.c      **** * comment:		
 292:../lcd.c      **** *********************************************************************************************/
 293:../lcd.c      **** void Lcd_Draw_HLine(INT16 usX0, INT16 usX1, INT16 usY0, INT8U ucColor, INT16U usWidth)
 294:../lcd.c      **** {
 295:../lcd.c      **** 	INT16 usLen;
 296:../lcd.c      **** 
 297:../lcd.c      ****     if( usX1 < usX0 )
 298:../lcd.c      ****     {
 299:../lcd.c      ****         GUISWAP (usX1, usX0);
 300:../lcd.c      ****     }
 301:../lcd.c      **** 
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 303:../lcd.c      ****     {
 304:../lcd.c      ****         usLen = usX1 - usX0 + 1;
 305:../lcd.c      ****         while( (usLen--) > 0 )
 306:../lcd.c      ****         {
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 308:../lcd.c      ****         }
 309:../lcd.c      ****         usY0++;
 310:../lcd.c      ****     }
 311:../lcd.c      **** }
 312:../lcd.c      **** 
 313:../lcd.c      **** /*********************************************************************************************
 314:../lcd.c      **** * name:		Lcd_Draw_VLine()
 315:../lcd.c      **** * func:		Draw vertical line with appointed color
 316:../lcd.c      **** * para:		usX0,usY0 -- line's start point coordinate
 317:../lcd.c      **** *			usY1 -- line's end point Y-coordinate
 318:../lcd.c      **** *			ucColor -- appointed color value
 319:../lcd.c      **** *			usWidth -- line's width
 320:../lcd.c      **** * ret:		none
 321:../lcd.c      **** * modify:
 322:../lcd.c      **** * comment:		
 323:../lcd.c      **** *********************************************************************************************/
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 325:../lcd.c      **** {
 326:../lcd.c      **** 	INT16 usLen;
 327:../lcd.c      **** 
 328:../lcd.c      ****     if( usY1 < usY0 )
 329:../lcd.c      ****     {
 330:../lcd.c      ****         GUISWAP (usY1, usY0);
 331:../lcd.c      ****     }
 332:../lcd.c      **** 
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 334:../lcd.c      ****     {
 335:../lcd.c      ****         usLen = usY1 - usY0 + 1;
 336:../lcd.c      ****         while( (usLen--) > 0 )
 337:../lcd.c      ****         {
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 339:../lcd.c      ****         }
 340:../lcd.c      ****         usX0++;
 341:../lcd.c      ****     }
 342:../lcd.c      **** }
 343:../lcd.c      **** 
 344:../lcd.c      **** void Lcd_DisplayString(INT16U usX0, INT16U usY0, INT8U *pucStr){
 345:../lcd.c      **** 
 346:../lcd.c      **** }
 347:../lcd.c      **** 
 348:../lcd.c      **** /*********************************************************************************************
 349:../lcd.c      **** * name:		Lcd_DspAscII8x16()
 350:../lcd.c      **** * func:		display 8x16 ASCII character string 
 351:../lcd.c      **** * para:		usX0,usY0 -- ASCII character string's start point coordinate
 352:../lcd.c      **** *			ForeColor -- appointed color value
 353:../lcd.c      **** *			pucChar   -- ASCII character string
 354:../lcd.c      **** * ret:		none
 355:../lcd.c      **** * modify:
 356:../lcd.c      **** * comment:		
 357:../lcd.c      **** *********************************************************************************************/
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 359:../lcd.c      **** {
 360:../lcd.c      **** 	INT16 i,j,k,x,y,xx;
 361:../lcd.c      **** 	INT8U qm;
 362:../lcd.c      **** 	INT32U ulOffset;
 363:../lcd.c      **** 	INT8 ywbuf[16],temp[2];
 364:../lcd.c      ****     
 365:../lcd.c      **** 	for( i = 0; i < strlen((const char*)s); i++ )
 366:../lcd.c      **** 	{
 367:../lcd.c      **** 		if( (INT8U)*(s+i) >= 161 )
 368:../lcd.c      **** 		{
 369:../lcd.c      **** 			temp[0] = *(s + i);
 370:../lcd.c      **** 			temp[1] = '\0';
 371:../lcd.c      **** 			return;
 372:../lcd.c      **** 		}
 373:../lcd.c      **** 		else
 374:../lcd.c      **** 		{
 375:../lcd.c      **** 			qm = *(s+i);
 376:../lcd.c      **** 			ulOffset = (INT32U)(qm) * 16;		//Here to be changed tomorrow
 377:../lcd.c      **** 			for( j = 0; j < 16; j ++ )
 378:../lcd.c      **** 			{
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 380:../lcd.c      ****             }
 381:../lcd.c      **** 
 382:../lcd.c      ****             for( y = 0; y < 16; y++ )
 383:../lcd.c      ****             {
 384:../lcd.c      ****             	for( x = 0; x < 8; x++ ) 
 385:../lcd.c      ****                	{
 386:../lcd.c      ****                 	k = x % 8;
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 388:../lcd.c      **** 			       	{
 389:../lcd.c      **** 			       		xx = x0 + x + i*8;
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 391:../lcd.c      **** 			       	}
 392:../lcd.c      **** 			   	}
 393:../lcd.c      ****             }
 394:../lcd.c      **** 		}
 395:../lcd.c      **** 	}
 396:../lcd.c      **** }
 397:../lcd.c      **** 
 398:../lcd.c      **** /*********************************************************************************************
 399:../lcd.c      **** * name:		Lcd_DspAscII6x8()
 400:../lcd.c      **** * func:		display 6x8 ASCII character string
 401:../lcd.c      **** * para:		usX0,usY0 -- ASCII character string's start point coordinate
 402:../lcd.c      **** *			ForeColor -- appointed color value
 403:../lcd.c      **** *			pucChar   -- ASCII character string
 404:../lcd.c      **** * ret:		none
 405:../lcd.c      **** * modify:
 406:../lcd.c      **** * comment:
 407:../lcd.c      **** *********************************************************************************************/
 408:../lcd.c      **** void Lcd_DspAscII6x8(INT16U usX0, INT16U usY0,INT8U ForeColor, INT8U* pucChar)
 409:../lcd.c      **** {
 410:../lcd.c      **** 	INT32U i,j;
 411:../lcd.c      **** 	INT8U  ucTemp;
 412:../lcd.c      **** 
 413:../lcd.c      **** 	while( *pucChar != 0 )
 414:../lcd.c      **** 	{
 415:../lcd.c      **** 		for( i=0; i < 8; i++ )
 416:../lcd.c      **** 		{
 417:../lcd.c      ****   			ucTemp = g_auc_Ascii6x8[(*pucChar) * 8 + i];
 418:../lcd.c      ****   			for( j = 0; j < 8; j++ )
 419:../lcd.c      ****   			{
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 421:../lcd.c      ****   				{
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 423:../lcd.c      ****   				}
 424:../lcd.c      ****   			}
 425:../lcd.c      **** 		}
 426:../lcd.c      **** 		usX0 += XWIDTH;
 427:../lcd.c      **** 		pucChar++;
 428:../lcd.c      **** 	}
 429:../lcd.c      **** }
 430:../lcd.c      **** 
 431:../lcd.c      **** 
 432:../lcd.c      **** /*********************************************************************************************
 433:../lcd.c      **** * name:		ReverseLine()
 434:../lcd.c      **** * func:		Reverse display some lines 
 435:../lcd.c      **** * para:		ulHeight -- line's height
 436:../lcd.c      **** *			ulY -- line's Y-coordinate
 437:../lcd.c      **** * ret:		none
 438:../lcd.c      **** * modify:
 439:../lcd.c      **** * comment:		
 440:../lcd.c      **** *********************************************************************************************/
 441:../lcd.c      **** void ReverseLine(INT32U ulHeight, INT32U ulY)
 442:../lcd.c      **** {
 443:../lcd.c      **** 	INT32U i, j, temp;
 444:../lcd.c      **** 	
 445:../lcd.c      **** 	for( i = 0; i < ulHeight; i++ )
 446:../lcd.c      **** 	{
 447:../lcd.c      **** 		for( j = 0; j < (SCR_XSIZE/4/2) ; j++ )
 448:../lcd.c      **** 		{
 449:../lcd.c      **** 			temp = *(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4);
 450:../lcd.c      **** 			temp ^= 0xFFFFFFFF;
 451:../lcd.c      **** 			*(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4) = temp;
 452:../lcd.c      **** 		}
 453:../lcd.c      **** 	}
 454:../lcd.c      **** }
 455:../lcd.c      **** 
 456:../lcd.c      **** /*********************************************************************************************
 457:../lcd.c      **** * name:		Zdma0Done()
 458:../lcd.c      **** * func:		LCD dma interrupt handle function
 459:../lcd.c      **** * para:		none
 460:../lcd.c      **** * ret:		none
 461:../lcd.c      **** * modify:
 462:../lcd.c      **** * comment:		
 463:../lcd.c      **** *********************************************************************************************/
 464:../lcd.c      **** //volatile static INT8U ucZdma0Done=1;	//When DMA is finish,ucZdma0Done is cleared to Zero
 465:../lcd.c      **** void Zdma0Done(void)
 466:../lcd.c      **** {
 2397              		.loc 1 466 0
 2398              		.cfi_startproc
 2399              		@ Interrupt Service Routine.
 2400              		@ args = 0, pretend = 0, frame = 0
 2401              		@ frame_needed = 1, uses_anonymous_args = 0
 2402 0000 04C02DE5 		str	ip, [sp, #-4]!
 2403 0004 0DC0A0E1 		mov	ip, sp
 2404              	.LCFI0:
 2405              		.cfi_def_cfa_register 12
 2406 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 467:../lcd.c      **** 	rI_ISPC=BIT_ZDMA0;	    //clear pending
 2407              		.loc 1 467 0
 2408 000c 0227A0E3 		mov	r2, #524288
 2409              		.cfi_offset 14, -8
 2410              		.cfi_offset 13, -12
 2411              		.cfi_offset 11, -16
 2412              		.cfi_offset 3, -20
 2413              		.cfi_offset 2, -24
 2414              		.cfi_offset 1, -28
 2415              		.cfi_offset 0, -32
 2416 0010 1E36A0E3 		mov	r3, #31457280
 466:../lcd.c      **** {
 2417              		.loc 1 466 0
 2418 0014 04B04CE2 		sub	fp, ip, #4
 2419              	.LCFI1:
 2420              		.cfi_def_cfa 11, 4
 468:../lcd.c      **** 	//ucZdma0Done=0;
 469:../lcd.c      **** 	push_debug(ev_dma,0);	// comunicamos al programa principal que ha finalizado
 2421              		.loc 1 469 0
 2422 0018 0500A0E3 		mov	r0, #5
 2423 001c 0010A0E3 		mov	r1, #0
 467:../lcd.c      **** 	rI_ISPC=BIT_ZDMA0;	    //clear pending
 2424              		.loc 1 467 0
 2425 0020 242083E5 		str	r2, [r3, #36]
 2426              		.loc 1 469 0
 2427 0024 FEFFFFEB 		bl	push_debug
 470:../lcd.c      **** }
 2428              		.loc 1 470 0
 2429 0028 1CD04BE2 		sub	sp, fp, #28
 2430 002c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2431 0030 04C09DE4 		ldmfd	sp!, {ip}
 2432 0034 04F05EE2 		subs	pc, lr, #4
 2433              		.cfi_endproc
 2434              	.LFE13:
 2436              		.align	2
 2437              		.global	Lcd_Init
 2439              	Lcd_Init:
 2440              	.LFB0:
  30:../lcd.c      **** {       
 2441              		.loc 1 30 0
 2442              		.cfi_startproc
 2443              		@ Function supports interworking.
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              		@ link register save eliminated.
  31:../lcd.c      **** 	rDITHMODE=0x1223a;
 2447              		.loc 1 31 0
 2448 0038 AC209FE5 		ldr	r2, .L3
  32:../lcd.c      **** 	rDP1_2 =0x5a5a;      
 2449              		.loc 1 32 0
 2450 003c AC009FE5 		ldr	r0, .L3+4
  33:../lcd.c      **** 	rDP4_7 =0x366cd9b;
 2451              		.loc 1 33 0
 2452 0040 AC309FE5 		ldr	r3, .L3+8
  34:../lcd.c      **** 	rDP3_5 =0xda5a7;
 2453              		.loc 1 34 0
 2454 0044 AC109FE5 		ldr	r1, .L3+12
  31:../lcd.c      **** 	rDITHMODE=0x1223a;
 2455              		.loc 1 31 0
 2456 0048 1FC6A0E3 		mov	ip, #32505856
 2457 004c 44208CE5 		str	r2, [ip, #68]
  32:../lcd.c      **** 	rDP1_2 =0x5a5a;      
 2458              		.loc 1 32 0
 2459 0050 20008CE5 		str	r0, [ip, #32]
  33:../lcd.c      **** 	rDP4_7 =0x366cd9b;
 2460              		.loc 1 33 0
 2461 0054 24308CE5 		str	r3, [ip, #36]
  35:../lcd.c      **** 	rDP2_3 =0xad7;
 2462              		.loc 1 35 0
 2463 0058 9C009FE5 		ldr	r0, .L3+16
  34:../lcd.c      **** 	rDP3_5 =0xda5a7;
 2464              		.loc 1 34 0
 2465 005c 28108CE5 		str	r1, [ip, #40]
  36:../lcd.c      **** 	rDP5_7 =0xfeda5b7;
 2466              		.loc 1 36 0
 2467 0060 98309FE5 		ldr	r3, .L3+20
  37:../lcd.c      **** 	rDP3_4 =0xebd7;
 2468              		.loc 1 37 0
 2469 0064 98109FE5 		ldr	r1, .L3+24
  35:../lcd.c      **** 	rDP2_3 =0xad7;
 2470              		.loc 1 35 0
 2471 0068 2C008CE5 		str	r0, [ip, #44]
  36:../lcd.c      **** 	rDP5_7 =0xfeda5b7;
 2472              		.loc 1 36 0
 2473 006c 30308CE5 		str	r3, [ip, #48]
  38:../lcd.c      **** 	rDP4_5 =0xebfd7;
 2474              		.loc 1 38 0
 2475 0070 90009FE5 		ldr	r0, .L3+28
  37:../lcd.c      **** 	rDP3_4 =0xebd7;
 2476              		.loc 1 37 0
 2477 0074 34108CE5 		str	r1, [ip, #52]
  39:../lcd.c      **** 	rDP6_7 =0x7efdfbf;
 2478              		.loc 1 39 0
 2479 0078 8C309FE5 		ldr	r3, .L3+32
  41:../lcd.c      **** 	rLCDCON1=(0)|(1<<5)|(MVAL_USED<<7)|(0x0<<8)|(0x0<<10)|(CLKVAL_GREY16<<12);
 2480              		.loc 1 41 0
 2481 007c 8C109FE5 		ldr	r1, .L3+36
  38:../lcd.c      **** 	rDP4_5 =0xebfd7;
 2482              		.loc 1 38 0
 2483 0080 38008CE5 		str	r0, [ip, #56]
  39:../lcd.c      **** 	rDP6_7 =0x7efdfbf;
 2484              		.loc 1 39 0
 2485 0084 3C308CE5 		str	r3, [ip, #60]
  42:../lcd.c      **** 	rLCDCON2=(LINEVAL)|(HOZVAL<<10)|(10<<21); 
 2486              		.loc 1 42 0
 2487 0088 84009FE5 		ldr	r0, .L3+40
  41:../lcd.c      **** 	rLCDCON1=(0)|(1<<5)|(MVAL_USED<<7)|(0x0<<8)|(0x0<<10)|(CLKVAL_GREY16<<12);
 2488              		.loc 1 41 0
 2489 008c 00108CE5 		str	r1, [ip, #0]
  43:../lcd.c      **** 	rLCDSADDR1= (0x2<<27) | ( ((LCD_ACTIVE_BUFFER>>22)<<21 ) | M5D(LCD_ACTIVE_BUFFER>>1));
 2490              		.loc 1 43 0
 2491 0090 80309FE5 		ldr	r3, .L3+44
  44:../lcd.c      ****  	rLCDSADDR2= M5D(((LCD_ACTIVE_BUFFER+(SCR_XSIZE*LCD_YSIZE/2))>>1)) | (MVAL<<21);
 2492              		.loc 1 44 0
 2493 0094 80109FE5 		ldr	r1, .L3+48
  42:../lcd.c      **** 	rLCDCON2=(LINEVAL)|(HOZVAL<<10)|(10<<21); 
 2494              		.loc 1 42 0
 2495 0098 04008CE5 		str	r0, [ip, #4]
  43:../lcd.c      **** 	rLCDSADDR1= (0x2<<27) | ( ((LCD_ACTIVE_BUFFER>>22)<<21 ) | M5D(LCD_ACTIVE_BUFFER>>1));
 2496              		.loc 1 43 0
 2497 009c 08308CE5 		str	r3, [ip, #8]
  44:../lcd.c      ****  	rLCDSADDR2= M5D(((LCD_ACTIVE_BUFFER+(SCR_XSIZE*LCD_YSIZE/2))>>1)) | (MVAL<<21);
 2498              		.loc 1 44 0
 2499 00a0 0C108CE5 		str	r1, [ip, #12]
  47:../lcd.c      **** 	rLCDCON1=(1)|(1<<5)|(MVAL_USED<<7)|(0x3<<8)|(0x3<<10)|(CLKVAL_GREY16<<12);
 2500              		.loc 1 47 0
 2501 00a4 74309FE5 		ldr	r3, .L3+52
  48:../lcd.c      **** 	rBLUELUT=0xfa40;
 2502              		.loc 1 48 0
 2503 00a8 74109FE5 		ldr	r1, .L3+56
  45:../lcd.c      **** 	rLCDSADDR3= (LCD_XSIZE/4) | ( ((SCR_XSIZE-LCD_XSIZE)/4)<<9 );
 2504              		.loc 1 45 0
 2505 00ac 5000A0E3 		mov	r0, #80
 2506 00b0 10008CE5 		str	r0, [ip, #16]
  50:../lcd.c      **** 	rPDATE=rPDATE&0x0e;
 2507              		.loc 1 50 0
 2508 00b4 6C209FE5 		ldr	r2, .L3+60
  47:../lcd.c      **** 	rLCDCON1=(1)|(1<<5)|(MVAL_USED<<7)|(0x3<<8)|(0x3<<10)|(CLKVAL_GREY16<<12);
 2509              		.loc 1 47 0
 2510 00b8 00308CE5 		str	r3, [ip, #0]
  48:../lcd.c      **** 	rBLUELUT=0xfa40;
 2511              		.loc 1 48 0
 2512 00bc 1C108CE5 		str	r1, [ip, #28]
  50:../lcd.c      **** 	rPDATE=rPDATE&0x0e;
 2513              		.loc 1 50 0
 2514 00c0 2C0092E5 		ldr	r0, [r2, #44]
 2515 00c4 0E3000E2 		and	r3, r0, #14
 2516 00c8 2C3082E5 		str	r3, [r2, #44]
  53:../lcd.c      **** 	rINTMSK &= ~(BIT_ZDMA0);
 2517              		.loc 1 53 0
 2518 00cc 1E16A0E3 		mov	r1, #31457280
 2519 00d0 0CC091E5 		ldr	ip, [r1, #12]
  54:../lcd.c      ****     pISR_ZDMA0=(int)Zdma0Done;
 2520              		.loc 1 54 0
 2521 00d4 50209FE5 		ldr	r2, .L3+64
 2522 00d8 50309FE5 		ldr	r3, .L3+68
  53:../lcd.c      **** 	rINTMSK &= ~(BIT_ZDMA0);
 2523              		.loc 1 53 0
 2524 00dc 0207CCE3 		bic	r0, ip, #524288
 2525 00e0 0C0081E5 		str	r0, [r1, #12]
  54:../lcd.c      ****     pISR_ZDMA0=(int)Zdma0Done;
 2526              		.loc 1 54 0
 2527 00e4 932003E5 		str	r2, [r3, #-147]
  55:../lcd.c      **** }
 2528              		.loc 1 55 0
 2529 00e8 1EFF2FE1 		bx	lr
 2530              	.L4:
 2531              		.align	2
 2532              	.L3:
 2533 00ec 3A220100 		.word	74298
 2534 00f0 5A5A0000 		.word	23130
 2535 00f4 9BCD6603 		.word	57068955
 2536 00f8 A7A50D00 		.word	894375
 2537 00fc D70A0000 		.word	2775
 2538 0100 B7A5ED0F 		.word	267232695
 2539 0104 D7EB0000 		.word	60375
 2540 0108 D7BF0E00 		.word	966615
 2541 010c BFDFEF07 		.word	133160895
 2542 0110 20C00000 		.word	49184
 2543 0114 EF3C4101 		.word	21052655
 2544 0118 00001816 		.word	370671616
 2545 011c 004BB801 		.word	28855040
 2546 0120 21CF0000 		.word	53025
 2547 0124 40FA0000 		.word	64064
 2548 0128 0000D201 		.word	30539776
 2549 012c 00000000 		.word	Zdma0Done
 2550 0130 FFFF7F0C 		.word	209715199
 2551              		.cfi_endproc
 2552              	.LFE0:
 2554              		.align	2
 2555              		.global	Lcd_Active_Clr
 2557              	Lcd_Active_Clr:
 2558              	.LFB1:
  66:../lcd.c      **** {
 2559              		.loc 1 66 0
 2560              		.cfi_startproc
 2561              		@ Function supports interworking.
 2562              		@ args = 0, pretend = 0, frame = 0
 2563              		@ frame_needed = 0, uses_anonymous_args = 0
 2564              		@ link register save eliminated.
 2565              	.LVL0:
  70:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
 2566              		.loc 1 70 0
 2567 0134 28009FE5 		ldr	r0, .L12
  68:../lcd.c      **** 	INT32U *pDisp = (INT32U *)LCD_ACTIVE_BUFFER;
 2568              		.loc 1 68 0
 2569 0138 C336A0E3 		mov	r3, #204472320
  72:../lcd.c      **** 		*pDisp++ = WHITE;
 2570              		.loc 1 72 0
 2571 013c 0020A0E3 		mov	r2, #0
 2572              	.LVL1:
 2573              	.L6:
  72:../lcd.c      **** 		*pDisp++ = WHITE;
 2574              		.loc 1 72 0 is_stmt 0 discriminator 2
 2575 0140 0310A0E1 		mov	r1, r3
 2576 0144 042081E4 		str	r2, [r1], #4
 2577              	.LVL2:
 2578 0148 042083E5 		str	r2, [r3, #4]
 2579 014c 042081E5 		str	r2, [r1, #4]
 2580 0150 0C2083E5 		str	r2, [r3, #12]
 2581 0154 103083E2 		add	r3, r3, #16
 2582              	.LVL3:
  70:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
 2583              		.loc 1 70 0 is_stmt 1 discriminator 2
 2584 0158 000053E1 		cmp	r3, r0
 2585 015c F7FFFF1A 		bne	.L6
  74:../lcd.c      **** }
 2586              		.loc 1 74 0
 2587 0160 1EFF2FE1 		bx	lr
 2588              	.L13:
 2589              		.align	2
 2590              	.L12:
 2591 0164 0096300C 		.word	204510720
 2592              		.cfi_endproc
 2593              	.LFE1:
 2595              		.align	2
 2596              		.global	LCD_GetPixel
 2598              	LCD_GetPixel:
 2599              	.LFB2:
  85:../lcd.c      **** {
 2600              		.loc 1 85 0
 2601              		.cfi_startproc
 2602              		@ Function supports interworking.
 2603              		@ args = 0, pretend = 0, frame = 0
 2604              		@ frame_needed = 0, uses_anonymous_args = 0
 2605              		@ link register save eliminated.
 2606              	.LVL4:
  88:../lcd.c      **** 	ucColor = *((INT8U*)(LCD_VIRTUAL_BUFFER + usY*SCR_XSIZE/2 + usX/8*4 + 3 - (usX%8)/2));
 2607              		.loc 1 88 0
 2608 0168 013181E0 		add	r3, r1, r1, asl #2
 2609 016c 8321A0E1 		mov	r2, r3, asl #3
 2610 0170 A0C0A0E1 		mov	ip, r0, lsr #1
 2611 0174 A01182E0 		add	r1, r2, r0, lsr #3
 2612              	.LVL5:
 2613 0178 03300CE2 		and	r3, ip, #3
 2614 017c C32781E2 		add	r2, r1, #51118080
 2615 0180 03C063E2 		rsb	ip, r3, #3
 2616 0184 961D82E2 		add	r1, r2, #9600
  89:../lcd.c      **** 	ucColor = (ucColor >> ((1-(usX%2))*4)) & 0x0f;
 2617              		.loc 1 89 0
 2618 0188 010010E3 		tst	r0, #1
 2619 018c 0121DCE7 		ldrb	r2, [ip, r1, asl #2]	@ zero_extendqisi2
 2620 0190 0430A003 		moveq	r3, #4
 2621 0194 0030A013 		movne	r3, #0
 2622              	.LVL6:
 2623 0198 5203A0E1 		mov	r0, r2, asr r3
 2624              	.LVL7:
  91:../lcd.c      **** }
 2625              		.loc 1 91 0
 2626 019c 0F0000E2 		and	r0, r0, #15
 2627 01a0 1EFF2FE1 		bx	lr
 2628              		.cfi_endproc
 2629              	.LFE2:
 2631              		.align	2
 2632              		.global	Lcd_Clr
 2634              	Lcd_Clr:
 2635              	.LFB3:
 102:../lcd.c      **** {
 2636              		.loc 1 102 0
 2637              		.cfi_startproc
 2638              		@ Function supports interworking.
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              		@ link register save eliminated.
 2642              	.LVL8:
 104:../lcd.c      **** 	INT32U *pDisp = (INT32U *)LCD_VIRTUAL_BUFFER;
 2643              		.loc 1 104 0
 2644 01a4 28309FE5 		ldr	r3, .L23
 106:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
 2645              		.loc 1 106 0
 2646 01a8 28009FE5 		ldr	r0, .L23+4
 108:../lcd.c      **** 		*pDisp++ = WHITE;
 2647              		.loc 1 108 0
 2648 01ac 0020A0E3 		mov	r2, #0
 2649              	.LVL9:
 2650              	.L18:
 108:../lcd.c      **** 		*pDisp++ = WHITE;
 2651              		.loc 1 108 0 is_stmt 0 discriminator 2
 2652 01b0 0310A0E1 		mov	r1, r3
 2653 01b4 042081E4 		str	r2, [r1], #4
 2654              	.LVL10:
 2655 01b8 042083E5 		str	r2, [r3, #4]
 2656 01bc 042081E5 		str	r2, [r1, #4]
 2657 01c0 0C2083E5 		str	r2, [r3, #12]
 2658 01c4 103083E2 		add	r3, r3, #16
 2659              	.LVL11:
 106:../lcd.c      **** 	for( i = 0; i < (SCR_XSIZE*SCR_YSIZE/2/4); i++ )
 2660              		.loc 1 106 0 is_stmt 1 discriminator 2
 2661 01c8 000053E1 		cmp	r3, r0
 2662 01cc F7FFFF1A 		bne	.L18
 110:../lcd.c      **** }
 2663              		.loc 1 110 0
 2664 01d0 1EFF2FE1 		bx	lr
 2665              	.L24:
 2666              		.align	2
 2667              	.L23:
 2668 01d4 0096300C 		.word	204510720
 2669 01d8 002C310C 		.word	204549120
 2670              		.cfi_endproc
 2671              	.LFE3:
 2673              		.align	2
 2674              		.global	LcdClrRect
 2676              	LcdClrRect:
 2677              	.LFB4:
 122:../lcd.c      **** {
 2678              		.loc 1 122 0
 2679              		.cfi_startproc
 2680              		@ Function supports interworking.
 2681              		@ args = 4, pretend = 0, frame = 64
 2682              		@ frame_needed = 0, uses_anonymous_args = 0
 2683              		@ link register save eliminated.
 2684              	.LVL12:
 2685 01dc F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 2686              	.LCFI2:
 2687              		.cfi_def_cfa_offset 28
 2688 01e0 44D04DE2 		sub	sp, sp, #68
 2689              	.LCFI3:
 2690              		.cfi_def_cfa_offset 96
 122:../lcd.c      **** {
 2691              		.loc 1 122 0
 2692 01e4 60C0DDE5 		ldrb	ip, [sp, #96]	@ zero_extendqisi2
 125:../lcd.c      **** 	INT32U ulColor = (ucColor << 28) | (ucColor << 24) | (ucColor << 20) | (ucColor << 16) | 
 2693              		.loc 1 125 0
 2694 01e8 0C4CA0E1 		mov	r4, ip, asl #24
 2695              		.cfi_offset 10, -4
 2696              		.cfi_offset 9, -8
 2697              		.cfi_offset 8, -12
 2698              		.cfi_offset 7, -16
 2699              		.cfi_offset 6, -20
 2700              		.cfi_offset 5, -24
 2701              		.cfi_offset 4, -28
 2702 01ec 0C9E84E1 		orr	r9, r4, ip, asl #28
 2703 01f0 0C4089E1 		orr	r4, r9, ip
 2704 01f4 0C4A84E1 		orr	r4, r4, ip, asl #20
 2705 01f8 0C9884E1 		orr	r9, r4, ip, asl #16
 122:../lcd.c      **** {
 2706              		.loc 1 122 0
 2707 01fc 20008DE5 		str	r0, [sp, #32]
 126:../lcd.c      **** 				     (ucColor << 12) | (ucColor << 8) | (ucColor << 4) | ucColor;
 2708              		.loc 1 126 0
 2709 0200 0C9689E1 		orr	r9, r9, ip, asl #12
 129:../lcd.c      **** 	if( (usRight-usLeft) <= 8 )
 2710              		.loc 1 129 0
 2711 0204 020060E0 		rsb	r0, r0, r2
 2712              	.LVL13:
 126:../lcd.c      **** 				     (ucColor << 12) | (ucColor << 8) | (ucColor << 4) | ucColor;
 2713              		.loc 1 126 0
 2714 0208 0C9489E1 		orr	r9, r9, ip, asl #8
 129:../lcd.c      **** 	if( (usRight-usLeft) <= 8 )
 2715              		.loc 1 129 0
 2716 020c 080050E3 		cmp	r0, #8
 122:../lcd.c      **** {
 2717              		.loc 1 122 0
 2718 0210 18308DE5 		str	r3, [sp, #24]
 126:../lcd.c      **** 				     (ucColor << 12) | (ucColor << 8) | (ucColor << 4) | ucColor;
 2719              		.loc 1 126 0
 2720 0214 0C9289E1 		orr	r9, r9, ip, asl #4
 2721              	.LVL14:
 129:../lcd.c      **** 	if( (usRight-usLeft) <= 8 )
 2722              		.loc 1 129 0
 2723 0218 7D0000CA 		bgt	.L26
 2724              	.LVL15:
 131:../lcd.c      **** 		for( i=usTop; i<=usBottom; i++)
 2725              		.loc 1 131 0 discriminator 1
 2726 021c 030051E1 		cmp	r1, r3
 2727 0220 780000CA 		bgt	.L25
 2728 0224 20309DE5 		ldr	r3, [sp, #32]
 2729              	.LVL16:
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 2730              		.loc 1 121 0
 2731 0228 018181E0 		add	r8, r1, r1, asl #2
 2732 022c 8861A0E1 		mov	r6, r8, asl #3
 2733 0230 C35786E2 		add	r5, r6, #51118080
 2734 0234 0378A0E1 		mov	r7, r3, asl #16
 2735 0238 14108DE5 		str	r1, [sp, #20]
 2736 023c 1C708DE5 		str	r7, [sp, #28]
 2737 0240 965D85E2 		add	r5, r5, #9600
 2738 0244 4778A0E1 		mov	r7, r7, asr #16
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2739              		.loc 1 135 0
 2740 0248 0F62A0E3 		mov	r6, #-268435456
 2741 024c 0390A0E1 		mov	r9, r3
 2742              	.LVL17:
 2743              	.L28:
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2744              		.loc 1 133 0 discriminator 1
 2745 0250 090052E1 		cmp	r2, r9
 2746 0254 620000BA 		blt	.L30
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2747              		.loc 1 135 0
 2748 0258 1CA09DE5 		ldr	sl, [sp, #28]
 2749 025c 000057E3 		cmp	r7, #0
 2750 0260 CA1FA0E1 		mov	r1, sl, asr #31
 2751 0264 A18EA0E1 		mov	r8, r1, lsr #29
 2752 0268 073087E2 		add	r3, r7, #7
 2753 026c 0730A0A1 		movge	r3, r7
 2754 0270 080087E0 		add	r0, r7, r8
 2755 0274 C34185E0 		add	r4, r5, r3, asr #3
 2756 0278 0441A0E1 		mov	r4, r4, asl #2
 2757 027c 07A000E2 		and	sl, r0, #7
 2758 0280 0A0068E0 		rsb	r0, r8, sl
 2759 0284 001094E5 		ldr	r1, [r4, #0]
 2760 0288 0031A0E1 		mov	r3, r0, asl #2
 2761 028c 36A3C1E1 		bic	sl, r1, r6, lsr r3
 2762 0290 078060E2 		rsb	r8, r0, #7
 2763 0294 0831A0E1 		mov	r3, r8, asl #2
 2764 0298 1C838AE1 		orr	r8, sl, ip, asl r3
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2765              		.loc 1 133 0
 2766 029c 010089E2 		add	r0, r9, #1
 2767 02a0 0018A0E1 		mov	r1, r0, asl #16
 2768 02a4 2108A0E1 		mov	r0, r1, lsr #16
 2769              	.LVL18:
 2770 02a8 0018A0E1 		mov	r1, r0, asl #16
 2771 02ac 4138A0E1 		mov	r3, r1, asr #16
 2772 02b0 02A069E0 		rsb	sl, r9, r2
 2773 02b4 030052E1 		cmp	r2, r3
 2774 02b8 01A00AE2 		and	sl, sl, #1
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2775              		.loc 1 135 0
 2776 02bc 008084E5 		str	r8, [r4, #0]
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2777              		.loc 1 133 0
 2778 02c0 470000BA 		blt	.L30
 2779 02c4 00005AE3 		cmp	sl, #0
 2780 02c8 1700000A 		beq	.L29
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2781              		.loc 1 135 0
 2782 02cc 000053E3 		cmp	r3, #0
 2783 02d0 C11FA0E1 		mov	r1, r1, asr #31
 2784 02d4 074083E2 		add	r4, r3, #7
 2785 02d8 A11EA0E1 		mov	r1, r1, lsr #29
 2786 02dc 0340A0A1 		movge	r4, r3
 2787 02e0 018083E0 		add	r8, r3, r1
 2788 02e4 C44185E0 		add	r4, r5, r4, asr #3
 2789 02e8 0441A0E1 		mov	r4, r4, asl #2
 2790 02ec 073008E2 		and	r3, r8, #7
 2791 02f0 033061E0 		rsb	r3, r1, r3
 2792 02f4 001094E5 		ldr	r1, [r4, #0]
 2793 02f8 0381A0E1 		mov	r8, r3, asl #2
 2794 02fc 3618C1E1 		bic	r1, r1, r6, lsr r8
 2795 0300 073063E2 		rsb	r3, r3, #7
 2796 0304 0381A0E1 		mov	r8, r3, asl #2
 2797 0308 1C8881E1 		orr	r8, r1, ip, asl r8
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2798              		.loc 1 133 0
 2799 030c 010080E2 		add	r0, r0, #1
 2800              	.LVL19:
 2801 0310 0038A0E1 		mov	r3, r0, asl #16
 2802 0314 2308A0E1 		mov	r0, r3, lsr #16
 2803              	.LVL20:
 2804 0318 0018A0E1 		mov	r1, r0, asl #16
 2805 031c 4138A0E1 		mov	r3, r1, asr #16
 2806 0320 030052E1 		cmp	r2, r3
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2807              		.loc 1 135 0
 2808 0324 008084E5 		str	r8, [r4, #0]
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2809              		.loc 1 133 0
 2810 0328 2D0000BA 		blt	.L30
 2811              	.LVL21:
 2812              	.L29:
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2813              		.loc 1 135 0 discriminator 2
 2814 032c 000053E3 		cmp	r3, #0
 2815 0330 C11FA0E1 		mov	r1, r1, asr #31
 2816 0334 07A083E2 		add	sl, r3, #7
 2817 0338 A11EA0E1 		mov	r1, r1, lsr #29
 2818 033c 03A0A0A1 		movge	sl, r3
 2819 0340 018083E0 		add	r8, r3, r1
 2820 0344 CA4185E0 		add	r4, r5, sl, asr #3
 2821 0348 0441A0E1 		mov	r4, r4, asl #2
 2822 034c 073008E2 		and	r3, r8, #7
 2823 0350 033061E0 		rsb	r3, r1, r3
 2824 0354 008094E5 		ldr	r8, [r4, #0]
 2825 0358 03A1A0E1 		mov	sl, r3, asl #2
 2826 035c 368AC8E1 		bic	r8, r8, r6, lsr sl
 2827 0360 071063E2 		rsb	r1, r3, #7
 2828 0364 01A1A0E1 		mov	sl, r1, asl #2
 2829 0368 1CAA88E1 		orr	sl, r8, ip, asl sl
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2830              		.loc 1 133 0 discriminator 2
 2831 036c 013080E2 		add	r3, r0, #1
 2832 0370 0318A0E1 		mov	r1, r3, asl #16
 2833 0374 2118A0E1 		mov	r1, r1, lsr #16
 2834 0378 0108A0E1 		mov	r0, r1, asl #16
 2835 037c 4038A0E1 		mov	r3, r0, asr #16
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2836              		.loc 1 135 0 discriminator 2
 2837 0380 000053E3 		cmp	r3, #0
 2838 0384 C00FA0E1 		mov	r0, r0, asr #31
 2839 0388 078083E2 		add	r8, r3, #7
 2840 038c A00EA0E1 		mov	r0, r0, lsr #29
 2841 0390 0380A0A1 		movge	r8, r3
 2842 0394 00A084E5 		str	sl, [r4, #0]
 2843 0398 C88185E0 		add	r8, r5, r8, asr #3
 2844 039c 004083E0 		add	r4, r3, r0
 2845 03a0 073004E2 		and	r3, r4, #7
 2846 03a4 0881A0E1 		mov	r8, r8, asl #2
 2847 03a8 030060E0 		rsb	r0, r0, r3
 2848 03ac 003098E5 		ldr	r3, [r8, #0]
 2849 03b0 0041A0E1 		mov	r4, r0, asl #2
 2850 03b4 3634C3E1 		bic	r3, r3, r6, lsr r4
 2851 03b8 070060E2 		rsb	r0, r0, #7
 2852 03bc 0041A0E1 		mov	r4, r0, asl #2
 2853 03c0 1C4483E1 		orr	r4, r3, ip, asl r4
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2854              		.loc 1 133 0 discriminator 2
 2855 03c4 013081E2 		add	r3, r1, #1
 2856 03c8 0308A0E1 		mov	r0, r3, asl #16
 2857 03cc 2008A0E1 		mov	r0, r0, lsr #16
 2858              	.LVL22:
 2859 03d0 0018A0E1 		mov	r1, r0, asl #16
 2860 03d4 4138A0E1 		mov	r3, r1, asr #16
 2861 03d8 030052E1 		cmp	r2, r3
 135:../lcd.c      **** 				(LCD_PutPixel(m, i, ucColor));
 2862              		.loc 1 135 0 discriminator 2
 2863 03dc 004088E5 		str	r4, [r8, #0]
 133:../lcd.c      **** 			for( m=usLeft; m<=usRight; m++)
 2864              		.loc 1 133 0 discriminator 2
 2865 03e0 D1FFFFAA 		bge	.L29
 2866              	.LVL23:
 2867              	.L30:
 131:../lcd.c      **** 		for( i=usTop; i<=usBottom; i++)
 2868              		.loc 1 131 0
 2869 03e4 14409DE5 		ldr	r4, [sp, #20]
 2870 03e8 018084E2 		add	r8, r4, #1
 2871 03ec 0838A0E1 		mov	r3, r8, asl #16
 2872              	.LVL24:
 2873 03f0 18809DE5 		ldr	r8, [sp, #24]
 2874 03f4 2308A0E1 		mov	r0, r3, lsr #16
 2875 03f8 430858E1 		cmp	r8, r3, asr #16
 2876 03fc 285085E2 		add	r5, r5, #40
 2877 0400 14008DE5 		str	r0, [sp, #20]
 2878 0404 91FFFFAA 		bge	.L28
 2879              	.LVL25:
 2880              	.L25:
 170:../lcd.c      **** }
 2881              		.loc 1 170 0
 2882 0408 44D08DE2 		add	sp, sp, #68
 2883 040c F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 2884 0410 1EFF2FE1 		bx	lr
 2885              	.LVL26:
 2886              	.L26:
 142:../lcd.c      **** 	if( 0 == (usLeft%8) )
 2887              		.loc 1 142 0
 2888 0414 20309DE5 		ldr	r3, [sp, #32]
 2889              	.LVL27:
 2890 0418 070013E3 		tst	r3, #7
 2891 041c 34308D05 		streq	r3, [sp, #52]
 2892 0420 5C01001A 		bne	.L82
 2893              	.LVL28:
 148:../lcd.c      **** 	if( 0 == (usRight%8) )
 2894              		.loc 1 148 0
 2895 0424 070012E3 		tst	r2, #7
 2896 0428 28208D05 		streq	r2, [sp, #40]
 2897 042c 4F01001A 		bne	.L83
 2898              	.L32:
 2899              	.LVL29:
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 2900              		.loc 1 155 0
 2901 0430 18809DE5 		ldr	r8, [sp, #24]
 2902 0434 080051E1 		cmp	r1, r8
 2903 0438 F2FFFFCA 		bgt	.L25
 2904              	.LVL30:
 2905              	.L84:
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 2906              		.loc 1 121 0
 2907 043c 084061E0 		rsb	r4, r1, r8
 2908 0440 34809DE5 		ldr	r8, [sp, #52]
 2909 0444 04A8A0E1 		mov	sl, r4, asl #16
 2910 0448 2A0881E0 		add	r0, r1, sl, lsr #16
 2911 044c 28709DE5 		ldr	r7, [sp, #40]
 2912 0450 08A8A0E1 		mov	sl, r8, asl #16
 2913 0454 20809DE5 		ldr	r8, [sp, #32]
 2914 0458 016181E0 		add	r6, r1, r1, asl #2
 2915 045c 001180E0 		add	r1, r0, r0, asl #2
 2916              	.LVL31:
 2917 0460 64059FE5 		ldr	r0, .L85
 2918 0464 8631A0E1 		mov	r3, r6, asl #3
 2919 0468 8642A0E1 		mov	r4, r6, asl #5
 2920 046c 8111A0E1 		mov	r1, r1, asl #3
 2921 0470 0768A0E1 		mov	r6, r7, asl #16
 2922 0474 0878A0E1 		mov	r7, r8, asl #16
 2923 0478 28809DE5 		ldr	r8, [sp, #40]
 2924 047c 001081E0 		add	r1, r1, r0
 2925 0480 4668A0E1 		mov	r6, r6, asr #16
 2926 0484 4AA8A0E1 		mov	sl, sl, asr #16
 2927 0488 30108DE5 		str	r1, [sp, #48]
 2928 048c 0818A0E1 		mov	r1, r8, asl #16
 2929 0490 4708A0E1 		mov	r0, r7, asr #16
 2930 0494 C33783E2 		add	r3, r3, #51118080
 2931 0498 C34684E2 		add	r4, r4, #204472320
 2932 049c 18608DE5 		str	r6, [sp, #24]
 2933 04a0 38708DE5 		str	r7, [sp, #56]
 2934 04a4 2CA08DE5 		str	sl, [sp, #44]
 2935 04a8 3C108DE5 		str	r1, [sp, #60]
 2936 04ac 24608DE5 		str	r6, [sp, #36]
 2937 04b0 14208DE5 		str	r2, [sp, #20]
 2938 04b4 1C008DE5 		str	r0, [sp, #28]
 2939 04b8 963D83E2 		add	r3, r3, #9600
 2940 04bc 964C84E2 		add	r4, r4, #38400
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 2941              		.loc 1 159 0
 2942 04c0 0F02A0E3 		mov	r0, #-268435456
 2943              	.LVL32:
 2944              	.L33:
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 2945              		.loc 1 157 0 discriminator 1
 2946 04c4 20809DE5 		ldr	r8, [sp, #32]
 2947 04c8 08005AE1 		cmp	sl, r8
 2948 04cc 660000DA 		ble	.L39
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 2949              		.loc 1 159 0
 2950 04d0 1C709DE5 		ldr	r7, [sp, #28]
 2951 04d4 38209DE5 		ldr	r2, [sp, #56]
 2952 04d8 1C509DE5 		ldr	r5, [sp, #28]
 2953 04dc 000057E3 		cmp	r7, #0
 2954 04e0 C21FA0E1 		mov	r1, r2, asr #31
 2955 04e4 076085E2 		add	r6, r5, #7
 2956 04e8 A11EA0E1 		mov	r1, r1, lsr #29
 2957 04ec 0760A0A1 		movge	r6, r7
 2958 04f0 012087E0 		add	r2, r7, r1
 2959 04f4 C65183E0 		add	r5, r3, r6, asr #3
 2960 04f8 0551A0E1 		mov	r5, r5, asl #2
 2961 04fc 076002E2 		and	r6, r2, #7
 2962 0500 062061E0 		rsb	r2, r1, r6
 2963 0504 001095E5 		ldr	r1, [r5, #0]
 2964 0508 0271A0E1 		mov	r7, r2, asl #2
 2965 050c 3067C1E1 		bic	r6, r1, r0, lsr r7
 2966 0510 072062E2 		rsb	r2, r2, #7
 2967 0514 0271A0E1 		mov	r7, r2, asl #2
 2968 0518 1C7786E1 		orr	r7, r6, ip, asl r7
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 2969              		.loc 1 157 0
 2970 051c 018088E2 		add	r8, r8, #1
 2971 0520 0818A0E1 		mov	r1, r8, asl #16
 2972 0524 20209DE5 		ldr	r2, [sp, #32]
 2973 0528 2118A0E1 		mov	r1, r1, lsr #16
 2974              	.LVL33:
 2975 052c 0188A0E1 		mov	r8, r1, asl #16
 2976 0530 0260E0E1 		mvn	r6, r2
 2977 0534 4828A0E1 		mov	r2, r8, asr #16
 2978 0538 0A6086E0 		add	r6, r6, sl
 2979 053c 0A0052E1 		cmp	r2, sl
 2980 0540 016006E2 		and	r6, r6, #1
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 2981              		.loc 1 159 0
 2982 0544 007085E5 		str	r7, [r5, #0]
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 2983              		.loc 1 157 0
 2984 0548 4700000A 		beq	.L39
 2985 054c 000056E3 		cmp	r6, #0
 2986 0550 1700000A 		beq	.L34
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 2987              		.loc 1 159 0
 2988 0554 000052E3 		cmp	r2, #0
 2989 0558 C87FA0E1 		mov	r7, r8, asr #31
 2990 055c 076082E2 		add	r6, r2, #7
 2991 0560 A77EA0E1 		mov	r7, r7, lsr #29
 2992 0564 0260A0A1 		movge	r6, r2
 2993 0568 C65183E0 		add	r5, r3, r6, asr #3
 2994 056c 072082E0 		add	r2, r2, r7
 2995 0570 0551A0E1 		mov	r5, r5, asl #2
 2996 0574 078002E2 		and	r8, r2, #7
 2997 0578 088067E0 		rsb	r8, r7, r8
 2998 057c 002095E5 		ldr	r2, [r5, #0]
 2999 0580 0861A0E1 		mov	r6, r8, asl #2
 3000 0584 3026C2E1 		bic	r2, r2, r0, lsr r6
 3001 0588 077068E2 		rsb	r7, r8, #7
 3002 058c 0761A0E1 		mov	r6, r7, asl #2
 3003 0590 1C6682E1 		orr	r6, r2, ip, asl r6
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 3004              		.loc 1 157 0
 3005 0594 018081E2 		add	r8, r1, #1
 3006 0598 0878A0E1 		mov	r7, r8, asl #16
 3007 059c 2718A0E1 		mov	r1, r7, lsr #16
 3008              	.LVL34:
 3009 05a0 0188A0E1 		mov	r8, r1, asl #16
 3010 05a4 4828A0E1 		mov	r2, r8, asr #16
 3011 05a8 0A0052E1 		cmp	r2, sl
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3012              		.loc 1 159 0
 3013 05ac 006085E5 		str	r6, [r5, #0]
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 3014              		.loc 1 157 0
 3015 05b0 2D00000A 		beq	.L39
 3016              	.LVL35:
 3017              	.L34:
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3018              		.loc 1 159 0 discriminator 2
 3019 05b4 000052E3 		cmp	r2, #0
 3020 05b8 C88FA0E1 		mov	r8, r8, asr #31
 3021 05bc A85EA0E1 		mov	r5, r8, lsr #29
 3022 05c0 076082E2 		add	r6, r2, #7
 3023 05c4 0260A0A1 		movge	r6, r2
 3024 05c8 057082E0 		add	r7, r2, r5
 3025 05cc C66183E0 		add	r6, r3, r6, asr #3
 3026 05d0 0661A0E1 		mov	r6, r6, asl #2
 3027 05d4 072007E2 		and	r2, r7, #7
 3028 05d8 022065E0 		rsb	r2, r5, r2
 3029 05dc 007096E5 		ldr	r7, [r6, #0]
 3030 05e0 0281A0E1 		mov	r8, r2, asl #2
 3031 05e4 3078C7E1 		bic	r7, r7, r0, lsr r8
 3032 05e8 075062E2 		rsb	r5, r2, #7
 3033 05ec 0581A0E1 		mov	r8, r5, asl #2
 3034 05f0 1C8887E1 		orr	r8, r7, ip, asl r8
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 3035              		.loc 1 157 0 discriminator 2
 3036 05f4 012081E2 		add	r2, r1, #1
 3037 05f8 0218A0E1 		mov	r1, r2, asl #16
 3038 05fc 2118A0E1 		mov	r1, r1, lsr #16
 3039 0600 0158A0E1 		mov	r5, r1, asl #16
 3040 0604 4528A0E1 		mov	r2, r5, asr #16
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3041              		.loc 1 159 0 discriminator 2
 3042 0608 000052E3 		cmp	r2, #0
 3043 060c C55FA0E1 		mov	r5, r5, asr #31
 3044 0610 077082E2 		add	r7, r2, #7
 3045 0614 A55EA0E1 		mov	r5, r5, lsr #29
 3046 0618 0270A0A1 		movge	r7, r2
 3047 061c 008086E5 		str	r8, [r6, #0]
 3048 0620 052082E0 		add	r2, r2, r5
 3049 0624 C77183E0 		add	r7, r3, r7, asr #3
 3050 0628 0771A0E1 		mov	r7, r7, asl #2
 3051 062c 076002E2 		and	r6, r2, #7
 3052 0630 062065E0 		rsb	r2, r5, r6
 3053 0634 005097E5 		ldr	r5, [r7, #0]
 3054 0638 0281A0E1 		mov	r8, r2, asl #2
 3055 063c 3088C5E1 		bic	r8, r5, r0, lsr r8
 3056 0640 076062E2 		rsb	r6, r2, #7
 3057 0644 0651A0E1 		mov	r5, r6, asl #2
 3058 0648 1C5588E1 		orr	r5, r8, ip, asl r5
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 3059              		.loc 1 157 0 discriminator 2
 3060 064c 011081E2 		add	r1, r1, #1
 3061 0650 0128A0E1 		mov	r2, r1, asl #16
 3062 0654 2218A0E1 		mov	r1, r2, lsr #16
 3063              	.LVL36:
 3064 0658 0188A0E1 		mov	r8, r1, asl #16
 3065 065c 4828A0E1 		mov	r2, r8, asr #16
 3066 0660 0A0052E1 		cmp	r2, sl
 159:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3067              		.loc 1 159 0 discriminator 2
 3068 0664 005087E5 		str	r5, [r7, #0]
 157:../lcd.c      **** 		for( m=usLeft; m<=(k-1); m++ )
 3069              		.loc 1 157 0 discriminator 2
 3070 0668 D1FFFF1A 		bne	.L34
 3071              	.LVL37:
 3072              	.L39:
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3073              		.loc 1 161 0 discriminator 1
 3074 066c 18209DE5 		ldr	r2, [sp, #24]
 3075 0670 02005AE1 		cmp	sl, r2
 3076 0674 480000AA 		bge	.L35
 3077              	.LVL38:
 3078 0678 34109DE5 		ldr	r1, [sp, #52]
 3079 067c 085081E2 		add	r5, r1, #8
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3080              		.loc 1 121 0
 3081 0680 0518A0E1 		mov	r1, r5, asl #16
 3082 0684 0280A0E1 		mov	r8, r2
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3083              		.loc 1 163 0
 3084 0688 2C609DE5 		ldr	r6, [sp, #44]
 3085 068c 022065E0 		rsb	r2, r5, r2
 3086 0690 077082E2 		add	r7, r2, #7
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3087              		.loc 1 161 0
 3088 0694 4128A0E1 		mov	r2, r1, asr #16
 3089 0698 A751A0E1 		mov	r5, r7, lsr #3
 3090 069c 020058E1 		cmp	r8, r2
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3091              		.loc 1 163 0
 3092 06a0 A67F86E0 		add	r7, r6, r6, lsr #31
 3093 06a4 035005E2 		and	r5, r5, #3
 3094 06a8 C79084E7 		str	r9, [r4, r7, asr #1]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3095              		.loc 1 161 0
 3096 06ac 2118A0E1 		mov	r1, r1, lsr #16
 3097 06b0 390000DA 		ble	.L35
 3098 06b4 000055E3 		cmp	r5, #0
 3099 06b8 1E00000A 		beq	.L79
 3100 06bc 010055E3 		cmp	r5, #1
 3101 06c0 1100000A 		beq	.L72
 3102 06c4 020055E3 		cmp	r5, #2
 3103 06c8 0700000A 		beq	.L73
 3104              	.LVL39:
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3105              		.loc 1 163 0
 3106 06cc A27F82E0 		add	r7, r2, r2, lsr #31
 3107 06d0 C760A0E1 		mov	r6, r7, asr #1
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3108              		.loc 1 121 0
 3109 06d4 081081E2 		add	r1, r1, #8
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3110              		.loc 1 163 0
 3111 06d8 0658A0E1 		mov	r5, r6, asl #16
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3112              		.loc 1 121 0
 3113 06dc 0128A0E1 		mov	r2, r1, asl #16
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3114              		.loc 1 163 0
 3115 06e0 459884E7 		str	r9, [r4, r5, asr #16]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3116              		.loc 1 161 0
 3117 06e4 2218A0E1 		mov	r1, r2, lsr #16
 3118 06e8 4228A0E1 		mov	r2, r2, asr #16
 3119              	.L73:
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3120              		.loc 1 163 0
 3121 06ec A26F82E0 		add	r6, r2, r2, lsr #31
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3122              		.loc 1 121 0
 3123 06f0 081081E2 		add	r1, r1, #8
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3124              		.loc 1 163 0
 3125 06f4 C650A0E1 		mov	r5, r6, asr #1
 3126 06f8 0528A0E1 		mov	r2, r5, asl #16
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3127              		.loc 1 121 0
 3128 06fc 0188A0E1 		mov	r8, r1, asl #16
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3129              		.loc 1 163 0
 3130 0700 429884E7 		str	r9, [r4, r2, asr #16]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3131              		.loc 1 161 0
 3132 0704 2818A0E1 		mov	r1, r8, lsr #16
 3133 0708 4828A0E1 		mov	r2, r8, asr #16
 3134              	.L72:
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3135              		.loc 1 163 0
 3136 070c A22F82E0 		add	r2, r2, r2, lsr #31
 3137 0710 C280A0E1 		mov	r8, r2, asr #1
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3138              		.loc 1 121 0
 3139 0714 081081E2 		add	r1, r1, #8
 3140 0718 0178A0E1 		mov	r7, r1, asl #16
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3141              		.loc 1 163 0
 3142 071c 0858A0E1 		mov	r5, r8, asl #16
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3143              		.loc 1 161 0
 3144 0720 18809DE5 		ldr	r8, [sp, #24]
 3145 0724 4728A0E1 		mov	r2, r7, asr #16
 3146 0728 020058E1 		cmp	r8, r2
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3147              		.loc 1 163 0
 3148 072c 459884E7 		str	r9, [r4, r5, asr #16]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3149              		.loc 1 161 0
 3150 0730 2718A0E1 		mov	r1, r7, lsr #16
 3151 0734 180000DA 		ble	.L35
 3152              	.L79:
 3153 0738 04308DE5 		str	r3, [sp, #4]
 3154 073c 18309DE5 		ldr	r3, [sp, #24]
 3155 0740 0C80A0E1 		mov	r8, ip
 3156              	.L36:
 121:../lcd.c      **** void LcdClrRect(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3157              		.loc 1 121 0 discriminator 2
 3158 0744 081081E2 		add	r1, r1, #8
 3159 0748 0168A0E1 		mov	r6, r1, asl #16
 3160 074c 061786E2 		add	r1, r6, #1572864
 3161 0750 025786E2 		add	r5, r6, #524288
 3162 0754 01C686E2 		add	ip, r6, #1048576
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3163              		.loc 1 163 0 discriminator 2
 3164 0758 A27F82E0 		add	r7, r2, r2, lsr #31
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3165              		.loc 1 161 0 discriminator 2
 3166 075c 4668A0E1 		mov	r6, r6, asr #16
 3167 0760 4128A0E1 		mov	r2, r1, asr #16
 3168 0764 4558A0E1 		mov	r5, r5, asr #16
 3169 0768 4CC8A0E1 		mov	ip, ip, asr #16
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3170              		.loc 1 163 0 discriminator 2
 3171 076c A66F86E0 		add	r6, r6, r6, lsr #31
 3172 0770 A55F85E0 		add	r5, r5, r5, lsr #31
 3173 0774 ACCF8CE0 		add	ip, ip, ip, lsr #31
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3174              		.loc 1 161 0 discriminator 2
 3175 0778 020053E1 		cmp	r3, r2
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3176              		.loc 1 163 0 discriminator 2
 3177 077c C79084E7 		str	r9, [r4, r7, asr #1]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3178              		.loc 1 161 0 discriminator 2
 3179 0780 2118A0E1 		mov	r1, r1, lsr #16
 163:../lcd.c      **** 			(*(INT32U*)(LCD_VIRTUAL_BUFFER + i * SCR_XSIZE / 2 + m / 2)) = ulColor;
 3180              		.loc 1 163 0 discriminator 2
 3181 0784 C69084E7 		str	r9, [r4, r6, asr #1]
 3182 0788 C59084E7 		str	r9, [r4, r5, asr #1]
 3183 078c CC9084E7 		str	r9, [r4, ip, asr #1]
 161:../lcd.c      **** 		for( m=k; m<l; m+=8 )
 3184              		.loc 1 161 0 discriminator 2
 3185 0790 EBFFFFCA 		bgt	.L36
 3186 0794 04309DE5 		ldr	r3, [sp, #4]
 3187 0798 08C0A0E1 		mov	ip, r8
 3188              	.L35:
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3189              		.loc 1 165 0 discriminator 1
 3190 079c 14208DE2 		add	r2, sp, #20
 3191 07a0 440092E8 		ldmia	r2, {r2, r6}	@ phole ldm
 3192 07a4 020056E1 		cmp	r6, r2
 3193 07a8 6A0000CA 		bgt	.L37
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3194              		.loc 1 167 0
 3195 07ac 24609DE5 		ldr	r6, [sp, #36]
 3196 07b0 3C109DE5 		ldr	r1, [sp, #60]
 3197 07b4 000056E3 		cmp	r6, #0
 3198 07b8 C12FA0E1 		mov	r2, r1, asr #31
 3199 07bc 077086E2 		add	r7, r6, #7
 3200 07c0 A21EA0E1 		mov	r1, r2, lsr #29
 3201 07c4 0670A0A1 		movge	r7, r6
 3202 07c8 018086E0 		add	r8, r6, r1
 3203 07cc C75183E0 		add	r5, r3, r7, asr #3
 3204 07d0 0551A0E1 		mov	r5, r5, asl #2
 3205 07d4 077008E2 		and	r7, r8, #7
 3206 07d8 072061E0 		rsb	r2, r1, r7
 3207 07dc 001095E5 		ldr	r1, [r5, #0]
 3208 07e0 0261A0E1 		mov	r6, r2, asl #2
 3209 07e4 3066C1E1 		bic	r6, r1, r0, lsr r6
 3210 07e8 078062E2 		rsb	r8, r2, #7
 3211 07ec 0871A0E1 		mov	r7, r8, asl #2
 3212 07f0 1C2786E1 		orr	r2, r6, ip, asl r7
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3213              		.loc 1 165 0
 3214 07f4 28609DE5 		ldr	r6, [sp, #40]
 3215 07f8 011086E2 		add	r1, r6, #1
 3216 07fc 0188A0E1 		mov	r8, r1, asl #16
 3217 0800 14709DE5 		ldr	r7, [sp, #20]
 3218 0804 2818A0E1 		mov	r1, r8, lsr #16
 3219              	.LVL40:
 3220 0808 077066E0 		rsb	r7, r6, r7
 3221 080c 0188A0E1 		mov	r8, r1, asl #16
 3222 0810 14609DE5 		ldr	r6, [sp, #20]
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3223              		.loc 1 167 0
 3224 0814 002085E5 		str	r2, [r5, #0]
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3225              		.loc 1 165 0
 3226 0818 4828A0E1 		mov	r2, r8, asr #16
 3227 081c 020056E1 		cmp	r6, r2
 3228 0820 B870CDE1 		strh	r7, [sp, #8]	@ movhi
 3229 0824 016007E2 		and	r6, r7, #1
 3230 0828 4A0000BA 		blt	.L37
 3231 082c 000056E3 		cmp	r6, #0
 3232 0830 1900000A 		beq	.L38
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3233              		.loc 1 167 0
 3234 0834 000052E3 		cmp	r2, #0
 3235 0838 077082E2 		add	r7, r2, #7
 3236 083c C88FA0E1 		mov	r8, r8, asr #31
 3237 0840 0270A0A1 		movge	r7, r2
 3238 0844 8766A0E1 		mov	r6, r7, asl #13
 3239 0848 A88EA0E1 		mov	r8, r8, lsr #29
 3240 084c 087082E0 		add	r7, r2, r8
 3241 0850 465883E0 		add	r5, r3, r6, asr #16
 3242 0854 072007E2 		and	r2, r7, #7
 3243 0858 0551A0E1 		mov	r5, r5, asl #2
 3244 085c 028068E0 		rsb	r8, r8, r2
 3245 0860 007095E5 		ldr	r7, [r5, #0]
 3246 0864 0861A0E1 		mov	r6, r8, asl #2
 3247 0868 3076C7E1 		bic	r7, r7, r0, lsr r6
 3248 086c 072068E2 		rsb	r2, r8, #7
 3249 0870 0261A0E1 		mov	r6, r2, asl #2
 3250 0874 1C6687E1 		orr	r6, r7, ip, asl r6
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3251              		.loc 1 165 0
 3252 0878 018081E2 		add	r8, r1, #1
 3253 087c 0828A0E1 		mov	r2, r8, asl #16
 3254 0880 2218A0E1 		mov	r1, r2, lsr #16
 3255              	.LVL41:
 3256 0884 14709DE5 		ldr	r7, [sp, #20]
 3257 0888 0188A0E1 		mov	r8, r1, asl #16
 3258 088c 4828A0E1 		mov	r2, r8, asr #16
 3259 0890 020057E1 		cmp	r7, r2
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3260              		.loc 1 167 0
 3261 0894 006085E5 		str	r6, [r5, #0]
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3262              		.loc 1 165 0
 3263 0898 2E0000BA 		blt	.L37
 3264              	.L38:
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3265              		.loc 1 167 0 discriminator 2
 3266 089c 000052E3 		cmp	r2, #0
 3267 08a0 C88FA0E1 		mov	r8, r8, asr #31
 3268 08a4 A85EA0E1 		mov	r5, r8, lsr #29
 3269 08a8 076082E2 		add	r6, r2, #7
 3270 08ac 0260A0A1 		movge	r6, r2
 3271 08b0 057082E0 		add	r7, r2, r5
 3272 08b4 C66183E0 		add	r6, r3, r6, asr #3
 3273 08b8 0661A0E1 		mov	r6, r6, asl #2
 3274 08bc 072007E2 		and	r2, r7, #7
 3275 08c0 022065E0 		rsb	r2, r5, r2
 3276 08c4 007096E5 		ldr	r7, [r6, #0]
 3277 08c8 0281A0E1 		mov	r8, r2, asl #2
 3278 08cc 3078C7E1 		bic	r7, r7, r0, lsr r8
 3279 08d0 075062E2 		rsb	r5, r2, #7
 3280 08d4 0581A0E1 		mov	r8, r5, asl #2
 3281 08d8 1C8887E1 		orr	r8, r7, ip, asl r8
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3282              		.loc 1 165 0 discriminator 2
 3283 08dc 012081E2 		add	r2, r1, #1
 3284 08e0 0218A0E1 		mov	r1, r2, asl #16
 3285 08e4 2118A0E1 		mov	r1, r1, lsr #16
 3286 08e8 0158A0E1 		mov	r5, r1, asl #16
 3287 08ec 4528A0E1 		mov	r2, r5, asr #16
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3288              		.loc 1 167 0 discriminator 2
 3289 08f0 000052E3 		cmp	r2, #0
 3290 08f4 C55FA0E1 		mov	r5, r5, asr #31
 3291 08f8 077082E2 		add	r7, r2, #7
 3292 08fc A55EA0E1 		mov	r5, r5, lsr #29
 3293 0900 0270A0A1 		movge	r7, r2
 3294 0904 008086E5 		str	r8, [r6, #0]
 3295 0908 052082E0 		add	r2, r2, r5
 3296 090c C77183E0 		add	r7, r3, r7, asr #3
 3297 0910 0771A0E1 		mov	r7, r7, asl #2
 3298 0914 078002E2 		and	r8, r2, #7
 3299 0918 082065E0 		rsb	r2, r5, r8
 3300 091c 005097E5 		ldr	r5, [r7, #0]
 3301 0920 0261A0E1 		mov	r6, r2, asl #2
 3302 0924 3086C5E1 		bic	r8, r5, r0, lsr r6
 3303 0928 072062E2 		rsb	r2, r2, #7
 3304 092c 0251A0E1 		mov	r5, r2, asl #2
 3305 0930 1C5588E1 		orr	r5, r8, ip, asl r5
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3306              		.loc 1 165 0 discriminator 2
 3307 0934 016081E2 		add	r6, r1, #1
 3308 0938 0688A0E1 		mov	r8, r6, asl #16
 3309 093c 2818A0E1 		mov	r1, r8, lsr #16
 3310 0940 14609DE5 		ldr	r6, [sp, #20]
 3311 0944 0188A0E1 		mov	r8, r1, asl #16
 3312 0948 4828A0E1 		mov	r2, r8, asr #16
 3313 094c 020056E1 		cmp	r6, r2
 167:../lcd.c      **** 			(LCD_PutPixel(m, i, ucColor));
 3314              		.loc 1 167 0 discriminator 2
 3315 0950 005087E5 		str	r5, [r7, #0]
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3316              		.loc 1 165 0 discriminator 2
 3317 0954 D0FFFFAA 		bge	.L38
 3318              	.L37:
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3319              		.loc 1 155 0
 3320 0958 30709DE5 		ldr	r7, [sp, #48]
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3321              		.loc 1 165 0
 3322 095c 283083E2 		add	r3, r3, #40
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3323              		.loc 1 155 0
 3324 0960 070053E1 		cmp	r3, r7
 165:../lcd.c      **** 		for( m=l; m<=usRight; m++ )
 3325              		.loc 1 165 0
 3326 0964 A04084E2 		add	r4, r4, #160
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3327              		.loc 1 155 0
 3328 0968 D5FEFF1A 		bne	.L33
 3329 096c A5FEFFEA 		b	.L25
 3330              	.LVL42:
 3331              	.L83:
 152:../lcd.c      **** 		l=(usRight/8)*8;
 3332              		.loc 1 152 0
 3333 0970 000052E3 		cmp	r2, #0
 3334 0974 54709FE5 		ldr	r7, .L85+4
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3335              		.loc 1 155 0
 3336 0978 18809DE5 		ldr	r8, [sp, #24]
 152:../lcd.c      **** 		l=(usRight/8)*8;
 3337              		.loc 1 152 0
 3338 097c 073082E2 		add	r3, r2, #7
 3339 0980 0230A0A1 		movge	r3, r2
 3340 0984 077003E0 		and	r7, r3, r7
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3341              		.loc 1 155 0
 3342 0988 080051E1 		cmp	r1, r8
 152:../lcd.c      **** 		l=(usRight/8)*8;
 3343              		.loc 1 152 0
 3344 098c 28708DE5 		str	r7, [sp, #40]
 3345              	.LVL43:
 155:../lcd.c      **** 	for( i=usTop; i<=usBottom; i++ )
 3346              		.loc 1 155 0
 3347 0990 A9FEFFDA 		ble	.L84
 3348 0994 9BFEFFEA 		b	.L25
 3349              	.LVL44:
 3350              	.L82:
 146:../lcd.c      **** 		k=(usLeft/8)*8+8;
 3351              		.loc 1 146 0
 3352 0998 000053E3 		cmp	r3, #0
 3353 099c 070083E2 		add	r0, r3, #7
 3354 09a0 0300A0A1 		movge	r0, r3
 3355 09a4 C081A0E1 		mov	r8, r0, asr #3
 3356 09a8 0340A0E1 		mov	r4, r3
 3357 09ac 013088E2 		add	r3, r8, #1
 3358 09b0 8309A0E1 		mov	r0, r3, asl #19
 3359 09b4 2088A0E1 		mov	r8, r0, lsr #16
 148:../lcd.c      **** 	if( 0 == (usRight%8) )
 3360              		.loc 1 148 0
 3361 09b8 070012E3 		tst	r2, #7
 146:../lcd.c      **** 		k=(usLeft/8)*8+8;
 3362              		.loc 1 146 0
 3363 09bc 34808DE5 		str	r8, [sp, #52]
 3364              	.LVL45:
 148:../lcd.c      **** 	if( 0 == (usRight%8) )
 3365              		.loc 1 148 0
 3366 09c0 28208D05 		streq	r2, [sp, #40]
 3367 09c4 99FEFF0A 		beq	.L32
 3368 09c8 E8FFFFEA 		b	.L83
 3369              	.L86:
 3370              		.align	2
 3371              	.L85:
 3372 09cc A8250C03 		.word	51127720
 3373 09d0 F8FF0000 		.word	65528
 3374              		.cfi_endproc
 3375              	.LFE4:
 3377              		.align	2
 3378              		.global	Lcd_Draw_Box
 3380              	Lcd_Draw_Box:
 3381              	.LFB5:
 182:../lcd.c      **** {
 3382              		.loc 1 182 0
 3383              		.cfi_startproc
 3384              		@ Function supports interworking.
 3385              		@ args = 4, pretend = 0, frame = 24
 3386              		@ frame_needed = 0, uses_anonymous_args = 0
 3387              		@ link register save eliminated.
 3388              	.LVL46:
 3389 09d4 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 3390              	.LCFI4:
 3391              		.cfi_def_cfa_offset 28
 3392              	.LBB10:
 3393              	.LBB12:
 297:../lcd.c      ****     if( usX1 < usX0 )
 3394              		.loc 1 297 0
 3395 09d8 020050E1 		cmp	r0, r2
 3396              	.LBE12:
 3397              	.LBE10:
 182:../lcd.c      **** {
 3398              		.loc 1 182 0
 3399 09dc 1CD04DE2 		sub	sp, sp, #28
 3400              	.LCFI5:
 3401              		.cfi_def_cfa_offset 56
 182:../lcd.c      **** {
 3402              		.loc 1 182 0
 3403 09e0 10008DE5 		str	r0, [sp, #16]
 3404              	.LVL47:
 3405 09e4 14208DE5 		str	r2, [sp, #20]
 3406              	.LVL48:
 3407 09e8 38C0DDE5 		ldrb	ip, [sp, #56]	@ zero_extendqisi2
 3408              	.LVL49:
 3409              	.LBB14:
 3410              	.LBB11:
 297:../lcd.c      ****     if( usX1 < usX0 )
 3411              		.loc 1 297 0
 3412 09ec BE0100DA 		ble	.L100
 3413              		.cfi_offset 10, -4
 3414              		.cfi_offset 9, -8
 3415              		.cfi_offset 8, -12
 3416              		.cfi_offset 7, -16
 3417              		.cfi_offset 6, -20
 3418              		.cfi_offset 5, -24
 3419              		.cfi_offset 4, -28
 3420 09f0 0050A0E1 		mov	r5, r0
 299:../lcd.c      ****         GUISWAP (usX1, usX0);
 3421              		.loc 1 299 0
 3422 09f4 000022E0 		eor	r0, r2, r0
 3423              	.LVL50:
 3424 09f8 00A8A0E1 		mov	sl, r0, asl #16
 3425 09fc 2A08A0E1 		mov	r0, sl, lsr #16
 3426              	.LVL51:
 3427 0a00 004025E0 		eor	r4, r5, r0
 3428 0a04 0428A0E1 		mov	r2, r4, asl #16
 3429              	.LVL52:
 3430 0a08 4228A0E1 		mov	r2, r2, asr #16
 3431              	.LVL53:
 3432 0a0c 000022E0 		eor	r0, r2, r0
 3433              	.LVL54:
 3434 0a10 00A8A0E1 		mov	sl, r0, asl #16
 3435              	.LVL55:
 3436 0a14 4AA8A0E1 		mov	sl, sl, asr #16
 3437              	.LVL56:
 3438              	.L88:
 304:../lcd.c      ****         usLen = usX1 - usX0 + 1;
 3439              		.loc 1 304 0
 3440 0a18 01408AE2 		add	r4, sl, #1
 3441 0a1c 04A062E0 		rsb	sl, r2, r4
 3442              	.LVL57:
 3443 0a20 0A58A0E1 		mov	r5, sl, asl #16
 3444 0a24 25A8A0E1 		mov	sl, r5, lsr #16
 3445              	.LVL58:
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3446              		.loc 1 305 0
 3447 0a28 0A48A0E1 		mov	r4, sl, asl #16
 3448              	.LVL59:
 3449 0a2c 000054E3 		cmp	r4, #0
 3450 0a30 620000DA 		ble	.L89
 3451 0a34 01804AE2 		sub	r8, sl, #1
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3452              		.loc 1 181 0
 3453 0a38 0898A0E1 		mov	r9, r8, asl #16
 3454 0a3c 4908A0E1 		mov	r0, r9, asr #16
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3455              		.loc 1 305 0
 3456 0a40 017181E0 		add	r7, r1, r1, asl #2
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3457              		.loc 1 181 0
 3458 0a44 04008DE5 		str	r0, [sp, #4]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3459              		.loc 1 305 0
 3460 0a48 8751A0E1 		mov	r5, r7, asl #3
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3461              		.loc 1 181 0
 3462 0a4c 000082E0 		add	r0, r2, r0
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3463              		.loc 1 305 0
 3464 0a50 C36785E2 		add	r6, r5, #51118080
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3465              		.loc 1 307 0
 3466 0a54 000050E3 		cmp	r0, #0
 3467 0a58 C04FA0E1 		mov	r4, r0, asr #31
 3468 0a5c 078080E2 		add	r8, r0, #7
 3469 0a60 A44EA0E1 		mov	r4, r4, lsr #29
 3470 0a64 0080A0A1 		movge	r8, r0
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3471              		.loc 1 305 0
 3472 0a68 966D86E2 		add	r6, r6, #9600
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3473              		.loc 1 307 0
 3474 0a6c 049080E0 		add	r9, r0, r4
 3475 0a70 C87186E0 		add	r7, r6, r8, asr #3
 3476 0a74 075009E2 		and	r5, r9, #7
 3477 0a78 0771A0E1 		mov	r7, r7, asl #2
 3478 0a7c 054064E0 		rsb	r4, r4, r5
 3479 0a80 009097E5 		ldr	r9, [r7, #0]
 3480 0a84 0481A0E1 		mov	r8, r4, asl #2
 3481 0a88 0F52A0E3 		mov	r5, #-268435456
 3482 0a8c 3598C9E1 		bic	r9, r9, r5, lsr r8
 3483 0a90 074064E2 		rsb	r4, r4, #7
 3484 0a94 0481A0E1 		mov	r8, r4, asl #2
 3485 0a98 1C8889E1 		orr	r8, r9, ip, asl r8
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3486              		.loc 1 181 0
 3487 0a9c 01A04AE2 		sub	sl, sl, #1
 3488              	.LVL60:
 3489 0aa0 012042E2 		sub	r2, r2, #1
 3490              	.LVL61:
 3491 0aa4 0A48A0E1 		mov	r4, sl, asl #16
 3492 0aa8 24A842E0 		sub	sl, r2, r4, lsr #16
 3493              	.LVL62:
 3494 0aac 04209DE5 		ldr	r2, [sp, #4]
 3495              	.LVL63:
 3496 0ab0 02A08AE0 		add	sl, sl, r2
 3497 0ab4 0A4060E0 		rsb	r4, r0, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3498              		.loc 1 307 0
 3499 0ab8 012040E2 		sub	r2, r0, #1
 3500 0abc 0440E0E1 		mvn	r4, r4
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3501              		.loc 1 305 0
 3502 0ac0 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3503              		.loc 1 307 0
 3504 0ac4 0C908DE5 		str	r9, [sp, #12]
 3505 0ac8 014004E2 		and	r4, r4, #1
 3506 0acc 008087E5 		str	r8, [r7, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3507              		.loc 1 305 0
 3508 0ad0 3A00000A 		beq	.L89
 3509 0ad4 000054E3 		cmp	r4, #0
 3510 0ad8 1300000A 		beq	.L90
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3511              		.loc 1 307 0
 3512 0adc 000052E3 		cmp	r2, #0
 3513 0ae0 C28FA0E1 		mov	r8, r2, asr #31
 3514 0ae4 A87EA0E1 		mov	r7, r8, lsr #29
 3515 0ae8 0200A0A1 		movge	r0, r2
 3516 0aec 060080B2 		addlt	r0, r0, #6
 3517 0af0 074082E0 		add	r4, r2, r7
 3518 0af4 C00186E0 		add	r0, r6, r0, asr #3
 3519 0af8 0001A0E1 		mov	r0, r0, asl #2
 3520 0afc 078004E2 		and	r8, r4, #7
 3521 0b00 084067E0 		rsb	r4, r7, r8
 3522 0b04 007090E5 		ldr	r7, [r0, #0]
 3523 0b08 0481A0E1 		mov	r8, r4, asl #2
 3524 0b0c 3578C7E1 		bic	r7, r7, r5, lsr r8
 3525 0b10 074064E2 		rsb	r4, r4, #7
 3526 0b14 0441A0E1 		mov	r4, r4, asl #2
 3527 0b18 1C7487E1 		orr	r7, r7, ip, asl r4
 3528 0b1c 012042E2 		sub	r2, r2, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3529              		.loc 1 305 0
 3530 0b20 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3531              		.loc 1 307 0
 3532 0b24 007080E5 		str	r7, [r0, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3533              		.loc 1 305 0
 3534 0b28 2400000A 		beq	.L89
 3535              	.L90:
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3536              		.loc 1 307 0
 3537 0b2c C27FA0E1 		mov	r7, r2, asr #31
 3538 0b30 000052E3 		cmp	r2, #0
 3539 0b34 070082E2 		add	r0, r2, #7
 3540 0b38 A78EA0E1 		mov	r8, r7, lsr #29
 3541 0b3c 0200A0A1 		movge	r0, r2
 3542 0b40 089082E0 		add	r9, r2, r8
 3543 0b44 C04186E0 		add	r4, r6, r0, asr #3
 3544 0b48 0441A0E1 		mov	r4, r4, asl #2
 3545 0b4c 077009E2 		and	r7, r9, #7
 3546 0b50 078068E0 		rsb	r8, r8, r7
 3547 0b54 009094E5 		ldr	r9, [r4, #0]
 3548 0b58 0801A0E1 		mov	r0, r8, asl #2
 3549 0b5c 3590C9E1 		bic	r9, r9, r5, lsr r0
 3550 0b60 077068E2 		rsb	r7, r8, #7
 3551 0b64 0701A0E1 		mov	r0, r7, asl #2
 3552 0b68 1C7089E1 		orr	r7, r9, ip, asl r0
 3553 0b6c 010052E2 		subs	r0, r2, #1
 3554 0b70 C08FA0E1 		mov	r8, r0, asr #31
 3555 0b74 06208242 		addmi	r2, r2, #6
 3556 0b78 0020A051 		movpl	r2, r0
 3557 0b7c A88EA0E1 		mov	r8, r8, lsr #29
 3558 0b80 007084E5 		str	r7, [r4, #0]
 3559 0b84 087080E0 		add	r7, r0, r8
 3560 0b88 C24186E0 		add	r4, r6, r2, asr #3
 3561 0b8c 0441A0E1 		mov	r4, r4, asl #2
 3562 0b90 072007E2 		and	r2, r7, #7
 3563 0b94 028068E0 		rsb	r8, r8, r2
 3564 0b98 002094E5 		ldr	r2, [r4, #0]
 3565 0b9c 0871A0E1 		mov	r7, r8, asl #2
 3566 0ba0 3527C2E1 		bic	r2, r2, r5, lsr r7
 3567 0ba4 078068E2 		rsb	r8, r8, #7
 3568 0ba8 0871A0E1 		mov	r7, r8, asl #2
 3569 0bac 1C7782E1 		orr	r7, r2, ip, asl r7
 3570 0bb0 012040E2 		sub	r2, r0, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3571              		.loc 1 305 0
 3572 0bb4 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3573              		.loc 1 307 0
 3574 0bb8 007084E5 		str	r7, [r4, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3575              		.loc 1 305 0
 3576 0bbc DAFFFF1A 		bne	.L90
 3577              	.L89:
 3578              	.LVL64:
 3579              	.LBE11:
 3580              	.LBE14:
 3581              	.LBB15:
 3582              	.LBB16:
 297:../lcd.c      ****     if( usX1 < usX0 )
 3583              		.loc 1 297 0
 3584 0bc0 10408DE2 		add	r4, sp, #16
 3585 0bc4 300094E8 		ldmia	r4, {r4, r5}	@ phole ldm
 3586 0bc8 050054E1 		cmp	r4, r5
 3587 0bcc 0500A0D1 		movle	r0, r5
 3588 0bd0 0420A0D1 		movle	r2, r4
 3589 0bd4 080000DA 		ble	.L91
 299:../lcd.c      ****         GUISWAP (usX1, usX0);
 3590              		.loc 1 299 0
 3591 0bd8 045025E0 		eor	r5, r5, r4
 3592 0bdc 05A8A0E1 		mov	sl, r5, asl #16
 3593 0be0 2A08A0E1 		mov	r0, sl, lsr #16
 3594              	.LVL65:
 3595 0be4 004024E0 		eor	r4, r4, r0
 3596 0be8 0428A0E1 		mov	r2, r4, asl #16
 3597 0bec 4228A0E1 		mov	r2, r2, asr #16
 3598              	.LVL66:
 3599 0bf0 005022E0 		eor	r5, r2, r0
 3600 0bf4 05A8A0E1 		mov	sl, r5, asl #16
 3601 0bf8 4A08A0E1 		mov	r0, sl, asr #16
 3602              	.LVL67:
 3603              	.L91:
 304:../lcd.c      ****         usLen = usX1 - usX0 + 1;
 3604              		.loc 1 304 0
 3605 0bfc 010080E2 		add	r0, r0, #1
 3606              	.LVL68:
 3607 0c00 00A062E0 		rsb	sl, r2, r0
 3608 0c04 0A48A0E1 		mov	r4, sl, asl #16
 3609 0c08 24A8A0E1 		mov	sl, r4, lsr #16
 3610              	.LVL69:
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3611              		.loc 1 305 0
 3612 0c0c 0A48A0E1 		mov	r4, sl, asl #16
 3613 0c10 000054E3 		cmp	r4, #0
 3614 0c14 620000DA 		ble	.L92
 3615 0c18 01804AE2 		sub	r8, sl, #1
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3616              		.loc 1 181 0
 3617 0c1c 0898A0E1 		mov	r9, r8, asl #16
 3618 0c20 4908A0E1 		mov	r0, r9, asr #16
 3619              	.LVL70:
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3620              		.loc 1 305 0
 3621 0c24 037183E0 		add	r7, r3, r3, asl #2
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3622              		.loc 1 181 0
 3623 0c28 04008DE5 		str	r0, [sp, #4]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3624              		.loc 1 305 0
 3625 0c2c 8751A0E1 		mov	r5, r7, asl #3
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3626              		.loc 1 181 0
 3627 0c30 020080E0 		add	r0, r0, r2
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3628              		.loc 1 305 0
 3629 0c34 C36785E2 		add	r6, r5, #51118080
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3630              		.loc 1 307 0
 3631 0c38 000050E3 		cmp	r0, #0
 3632 0c3c C04FA0E1 		mov	r4, r0, asr #31
 3633 0c40 078080E2 		add	r8, r0, #7
 3634 0c44 A44EA0E1 		mov	r4, r4, lsr #29
 3635 0c48 0080A0A1 		movge	r8, r0
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3636              		.loc 1 305 0
 3637 0c4c 966D86E2 		add	r6, r6, #9600
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3638              		.loc 1 307 0
 3639 0c50 049080E0 		add	r9, r0, r4
 3640 0c54 C87186E0 		add	r7, r6, r8, asr #3
 3641 0c58 075009E2 		and	r5, r9, #7
 3642 0c5c 0771A0E1 		mov	r7, r7, asl #2
 3643 0c60 054064E0 		rsb	r4, r4, r5
 3644 0c64 009097E5 		ldr	r9, [r7, #0]
 3645 0c68 0481A0E1 		mov	r8, r4, asl #2
 3646 0c6c 0F52A0E3 		mov	r5, #-268435456
 3647 0c70 3598C9E1 		bic	r9, r9, r5, lsr r8
 3648 0c74 074064E2 		rsb	r4, r4, #7
 3649 0c78 0481A0E1 		mov	r8, r4, asl #2
 3650 0c7c 1C8889E1 		orr	r8, r9, ip, asl r8
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3651              		.loc 1 181 0
 3652 0c80 01404AE2 		sub	r4, sl, #1
 3653 0c84 04A09DE5 		ldr	sl, [sp, #4]
 3654              	.LVL71:
 3655 0c88 012042E2 		sub	r2, r2, #1
 3656              	.LVL72:
 3657 0c8c 0A2082E0 		add	r2, r2, sl
 3658              	.LVL73:
 3659 0c90 04A8A0E1 		mov	sl, r4, asl #16
 3660 0c94 2AA842E0 		sub	sl, r2, sl, lsr #16
 3661 0c98 0A4060E0 		rsb	r4, r0, sl
 3662              	.LVL74:
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3663              		.loc 1 307 0
 3664 0c9c 012040E2 		sub	r2, r0, #1
 3665 0ca0 0440E0E1 		mvn	r4, r4
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3666              		.loc 1 305 0
 3667 0ca4 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3668              		.loc 1 307 0
 3669 0ca8 0C908DE5 		str	r9, [sp, #12]
 3670 0cac 014004E2 		and	r4, r4, #1
 3671 0cb0 008087E5 		str	r8, [r7, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3672              		.loc 1 305 0
 3673 0cb4 3A00000A 		beq	.L92
 3674 0cb8 000054E3 		cmp	r4, #0
 3675 0cbc 1300000A 		beq	.L93
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3676              		.loc 1 307 0
 3677 0cc0 000052E3 		cmp	r2, #0
 3678 0cc4 C28FA0E1 		mov	r8, r2, asr #31
 3679 0cc8 A87EA0E1 		mov	r7, r8, lsr #29
 3680 0ccc 0200A0A1 		movge	r0, r2
 3681 0cd0 060080B2 		addlt	r0, r0, #6
 3682 0cd4 074082E0 		add	r4, r2, r7
 3683 0cd8 C00186E0 		add	r0, r6, r0, asr #3
 3684 0cdc 0001A0E1 		mov	r0, r0, asl #2
 3685 0ce0 078004E2 		and	r8, r4, #7
 3686 0ce4 084067E0 		rsb	r4, r7, r8
 3687 0ce8 007090E5 		ldr	r7, [r0, #0]
 3688 0cec 0481A0E1 		mov	r8, r4, asl #2
 3689 0cf0 3578C7E1 		bic	r7, r7, r5, lsr r8
 3690 0cf4 074064E2 		rsb	r4, r4, #7
 3691 0cf8 0441A0E1 		mov	r4, r4, asl #2
 3692 0cfc 1C7487E1 		orr	r7, r7, ip, asl r4
 3693 0d00 012042E2 		sub	r2, r2, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3694              		.loc 1 305 0
 3695 0d04 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3696              		.loc 1 307 0
 3697 0d08 007080E5 		str	r7, [r0, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3698              		.loc 1 305 0
 3699 0d0c 2400000A 		beq	.L92
 3700              	.L93:
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3701              		.loc 1 307 0
 3702 0d10 C27FA0E1 		mov	r7, r2, asr #31
 3703 0d14 000052E3 		cmp	r2, #0
 3704 0d18 070082E2 		add	r0, r2, #7
 3705 0d1c A78EA0E1 		mov	r8, r7, lsr #29
 3706 0d20 0200A0A1 		movge	r0, r2
 3707 0d24 089082E0 		add	r9, r2, r8
 3708 0d28 C04186E0 		add	r4, r6, r0, asr #3
 3709 0d2c 0441A0E1 		mov	r4, r4, asl #2
 3710 0d30 077009E2 		and	r7, r9, #7
 3711 0d34 078068E0 		rsb	r8, r8, r7
 3712 0d38 009094E5 		ldr	r9, [r4, #0]
 3713 0d3c 0801A0E1 		mov	r0, r8, asl #2
 3714 0d40 3590C9E1 		bic	r9, r9, r5, lsr r0
 3715 0d44 077068E2 		rsb	r7, r8, #7
 3716 0d48 0701A0E1 		mov	r0, r7, asl #2
 3717 0d4c 1C7089E1 		orr	r7, r9, ip, asl r0
 3718 0d50 010052E2 		subs	r0, r2, #1
 3719 0d54 C08FA0E1 		mov	r8, r0, asr #31
 3720 0d58 06208242 		addmi	r2, r2, #6
 3721 0d5c 0020A051 		movpl	r2, r0
 3722 0d60 A88EA0E1 		mov	r8, r8, lsr #29
 3723 0d64 007084E5 		str	r7, [r4, #0]
 3724 0d68 087080E0 		add	r7, r0, r8
 3725 0d6c C24186E0 		add	r4, r6, r2, asr #3
 3726 0d70 0441A0E1 		mov	r4, r4, asl #2
 3727 0d74 072007E2 		and	r2, r7, #7
 3728 0d78 028068E0 		rsb	r8, r8, r2
 3729 0d7c 002094E5 		ldr	r2, [r4, #0]
 3730 0d80 0871A0E1 		mov	r7, r8, asl #2
 3731 0d84 3527C2E1 		bic	r2, r2, r5, lsr r7
 3732 0d88 078068E2 		rsb	r8, r8, #7
 3733 0d8c 0871A0E1 		mov	r7, r8, asl #2
 3734 0d90 1C7782E1 		orr	r7, r2, ip, asl r7
 3735 0d94 012040E2 		sub	r2, r0, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3736              		.loc 1 305 0
 3737 0d98 0A0052E1 		cmp	r2, sl
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 3738              		.loc 1 307 0
 3739 0d9c 007084E5 		str	r7, [r4, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 3740              		.loc 1 305 0
 3741 0da0 DAFFFF1A 		bne	.L93
 3742              	.L92:
 3743              	.LVL75:
 3744              	.LBE16:
 3745              	.LBE15:
 3746              	.LBB17:
 3747              	.LBB18:
 328:../lcd.c      ****     if( usY1 < usY0 )
 3748              		.loc 1 328 0
 3749 0da4 030051E1 		cmp	r1, r3
 3750 0da8 0300A0D1 		movle	r0, r3
 3751 0dac 0120A0D1 		movle	r2, r1
 3752 0db0 080000DA 		ble	.L94
 330:../lcd.c      ****         GUISWAP (usY1, usY0);
 3753              		.loc 1 330 0
 3754 0db4 012023E0 		eor	r2, r3, r1
 3755 0db8 0258A0E1 		mov	r5, r2, asl #16
 3756 0dbc 2558A0E1 		mov	r5, r5, lsr #16
 3757              	.LVL76:
 3758 0dc0 050021E0 		eor	r0, r1, r5
 3759 0dc4 0028A0E1 		mov	r2, r0, asl #16
 3760 0dc8 4228A0E1 		mov	r2, r2, asr #16
 3761              	.LVL77:
 3762 0dcc 050022E0 		eor	r0, r2, r5
 3763 0dd0 0058A0E1 		mov	r5, r0, asl #16
 3764              	.LVL78:
 3765 0dd4 4508A0E1 		mov	r0, r5, asr #16
 3766              	.LVL79:
 3767              	.L94:
 335:../lcd.c      ****         usLen = usY1 - usY0 + 1;
 3768              		.loc 1 335 0
 3769 0dd8 015080E2 		add	r5, r0, #1
 3770 0ddc 050062E0 		rsb	r0, r2, r5
 3771              	.LVL80:
 3772 0de0 0058A0E1 		mov	r5, r0, asl #16
 3773              	.LVL81:
 3774 0de4 2558A0E1 		mov	r5, r5, lsr #16
 3775              	.LVL82:
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3776              		.loc 1 336 0
 3777 0de8 0508A0E1 		mov	r0, r5, asl #16
 3778 0dec 000050E3 		cmp	r0, #0
 3779 0df0 540000DA 		ble	.L95
 3780 0df4 10609DE5 		ldr	r6, [sp, #16]
 3781 0df8 C64FA0E1 		mov	r4, r6, asr #31
 3782 0dfc A49EA0E1 		mov	r9, r4, lsr #29
 3783 0e00 090086E0 		add	r0, r6, r9
 3784 0e04 077000E2 		and	r7, r0, #7
 3785 0e08 078069E0 		rsb	r8, r9, r7
 3786 0e0c 076068E2 		rsb	r6, r8, #7
 3787 0e10 0841A0E1 		mov	r4, r8, asl #2
 3788 0e14 0FA2A0E3 		mov	sl, #-268435456
 3789 0e18 3A44E0E1 		mvn	r4, sl, lsr r4
 3790 0e1c 0601A0E1 		mov	r0, r6, asl #2
 3791 0e20 1C00A0E1 		mov	r0, ip, asl r0
 3792 0e24 10709DE5 		ldr	r7, [sp, #16]
 3793 0e28 019045E2 		sub	r9, r5, #1
 3794 0e2c 000057E3 		cmp	r7, #0
 3795 0e30 078087E2 		add	r8, r7, #7
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3796              		.loc 1 181 0
 3797 0e34 09A8A0E1 		mov	sl, r9, asl #16
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3798              		.loc 1 336 0
 3799 0e38 0780A0A1 		movge	r8, r7
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3800              		.loc 1 181 0
 3801 0e3c 4A2882E0 		add	r2, r2, sl, asr #16
 3802              	.LVL83:
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3803              		.loc 1 336 0
 3804 0e40 C881A0E1 		mov	r8, r8, asr #3
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3805              		.loc 1 181 0
 3806 0e44 026182E0 		add	r6, r2, r2, asl #2
 3807 0e48 C39788E2 		add	r9, r8, #51118080
 3808 0e4c 8661A0E1 		mov	r6, r6, asl #3
 3809 0e50 967D89E2 		add	r7, r9, #9600
 3810 0e54 01A045E2 		sub	sl, r5, #1
 3811 0e58 0A98A0E1 		mov	r9, sl, asl #16
 3812 0e5c 075086E0 		add	r5, r6, r7
 3813              	.LVL84:
 3814 0e60 90229FE5 		ldr	r2, .L151
 3815 0e64 0551A0E1 		mov	r5, r5, asl #2
 3816 0e68 2978A0E1 		mov	r7, r9, lsr #16
 3817 0e6c 02A088E0 		add	sl, r8, r2
 3818              	.LVL85:
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3819              		.loc 1 338 0
 3820 0e70 009095E5 		ldr	r9, [r5, #0]
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3821              		.loc 1 181 0
 3822 0e74 077187E0 		add	r7, r7, r7, asl #2
 3823 0e78 87214AE0 		sub	r2, sl, r7, asl #3
 3824 0e7c 06A082E0 		add	sl, r2, r6
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3825              		.loc 1 338 0
 3826 0e80 097004E0 		and	r7, r4, r9
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3827              		.loc 1 181 0
 3828 0e84 0AA1A0E1 		mov	sl, sl, asl #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3829              		.loc 1 338 0
 3830 0e88 0520A0E1 		mov	r2, r5
 3831 0e8c 077080E1 		orr	r7, r0, r7
 3832 0e90 05606AE0 		rsb	r6, sl, r5
 3833 0e94 A07002E4 		str	r7, [r2], #-160
 3834 0e98 A06046E2 		sub	r6, r6, #160
 3835 0e9c A662A0E1 		mov	r6, r6, lsr #5
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3836              		.loc 1 336 0
 3837 0ea0 0A0052E1 		cmp	r2, sl
 3838 0ea4 036006E2 		and	r6, r6, #3
 3839 0ea8 2600000A 		beq	.L95
 3840 0eac 000056E3 		cmp	r6, #0
 3841 0eb0 1100000A 		beq	.L96
 3842 0eb4 010056E3 		cmp	r6, #1
 3843 0eb8 0900000A 		beq	.L141
 3844 0ebc 020056E3 		cmp	r6, #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3845              		.loc 1 338 0
 3846 0ec0 00609215 		ldrne	r6, [r2, #0]
 3847 0ec4 06600410 		andne	r6, r4, r6
 3848 0ec8 06608011 		orrne	r6, r0, r6
 3849 0ecc 00608215 		strne	r6, [r2, #0]
 3850 0ed0 052D4512 		subne	r2, r5, #320
 3851 0ed4 005092E5 		ldr	r5, [r2, #0]
 3852 0ed8 055004E0 		and	r5, r4, r5
 3853 0edc 055080E1 		orr	r5, r0, r5
 3854 0ee0 A05002E4 		str	r5, [r2], #-160
 3855              	.L141:
 3856 0ee4 005092E5 		ldr	r5, [r2, #0]
 3857 0ee8 055004E0 		and	r5, r4, r5
 3858 0eec 055080E1 		orr	r5, r0, r5
 3859 0ef0 A05002E4 		str	r5, [r2], #-160
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3860              		.loc 1 336 0
 3861 0ef4 0A0052E1 		cmp	r2, sl
 3862 0ef8 1200000A 		beq	.L95
 3863              	.L96:
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3864              		.loc 1 338 0
 3865 0efc 008092E5 		ldr	r8, [r2, #0]
 3866 0f00 A07012E5 		ldr	r7, [r2, #-160]
 3867 0f04 406112E5 		ldr	r6, [r2, #-320]
 3868 0f08 E05112E5 		ldr	r5, [r2, #-480]
 3869 0f0c 088004E0 		and	r8, r4, r8
 3870 0f10 077004E0 		and	r7, r4, r7
 3871 0f14 066004E0 		and	r6, r4, r6
 3872 0f18 055004E0 		and	r5, r4, r5
 3873 0f1c 088080E1 		orr	r8, r0, r8
 3874 0f20 077080E1 		orr	r7, r0, r7
 3875 0f24 066080E1 		orr	r6, r0, r6
 3876 0f28 055080E1 		orr	r5, r0, r5
 3877 0f2c 008082E5 		str	r8, [r2, #0]
 3878 0f30 A07002E5 		str	r7, [r2, #-160]
 3879 0f34 406102E5 		str	r6, [r2, #-320]
 3880 0f38 E05102E5 		str	r5, [r2, #-480]
 3881 0f3c 0A2D42E2 		sub	r2, r2, #640
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3882              		.loc 1 336 0
 3883 0f40 0A0052E1 		cmp	r2, sl
 3884 0f44 ECFFFF1A 		bne	.L96
 3885              	.L95:
 3886              	.LVL86:
 3887              	.LBE18:
 3888              	.LBE17:
 3889              	.LBB19:
 3890              	.LBB20:
 328:../lcd.c      ****     if( usY1 < usY0 )
 3891              		.loc 1 328 0
 3892 0f48 030051E1 		cmp	r1, r3
 3893 0f4c 080000DA 		ble	.L97
 330:../lcd.c      ****         GUISWAP (usY1, usY0);
 3894              		.loc 1 330 0
 3895 0f50 010023E0 		eor	r0, r3, r1
 3896 0f54 0028A0E1 		mov	r2, r0, asl #16
 3897 0f58 2208A0E1 		mov	r0, r2, lsr #16
 3898              	.LVL87:
 3899 0f5c 003021E0 		eor	r3, r1, r0
 3900              	.LVL88:
 3901 0f60 0318A0E1 		mov	r1, r3, asl #16
 3902              	.LVL89:
 3903 0f64 4118A0E1 		mov	r1, r1, asr #16
 3904              	.LVL90:
 3905 0f68 002021E0 		eor	r2, r1, r0
 3906 0f6c 0238A0E1 		mov	r3, r2, asl #16
 3907 0f70 4338A0E1 		mov	r3, r3, asr #16
 3908              	.LVL91:
 3909              	.L97:
 335:../lcd.c      ****         usLen = usY1 - usY0 + 1;
 3910              		.loc 1 335 0
 3911 0f74 012083E2 		add	r2, r3, #1
 3912 0f78 020061E0 		rsb	r0, r1, r2
 3913 0f7c 0038A0E1 		mov	r3, r0, asl #16
 3914              	.LVL92:
 3915 0f80 2338A0E1 		mov	r3, r3, lsr #16
 3916              	.LVL93:
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3917              		.loc 1 336 0
 3918 0f84 0328A0E1 		mov	r2, r3, asl #16
 3919              	.LVL94:
 3920 0f88 000052E3 		cmp	r2, #0
 3921 0f8c 530000DA 		ble	.L87
 3922 0f90 14809DE5 		ldr	r8, [sp, #20]
 3923 0f94 C85FA0E1 		mov	r5, r8, asr #31
 3924 0f98 A56EA0E1 		mov	r6, r5, lsr #29
 3925 0f9c 062088E0 		add	r2, r8, r6
 3926 0fa0 074002E2 		and	r4, r2, #7
 3927 0fa4 040066E0 		rsb	r0, r6, r4
 3928 0fa8 076060E2 		rsb	r6, r0, #7
 3929 0fac 0021A0E1 		mov	r2, r0, asl #2
 3930 0fb0 0F52A0E3 		mov	r5, #-268435456
 3931 0fb4 0641A0E1 		mov	r4, r6, asl #2
 3932 0fb8 3522E0E1 		mvn	r2, r5, lsr r2
 3933 0fbc 1CC4A0E1 		mov	ip, ip, asl r4
 3934              	.LVL95:
 3935 0fc0 010043E2 		sub	r0, r3, #1
 3936 0fc4 000058E3 		cmp	r8, #0
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3937              		.loc 1 181 0
 3938 0fc8 0068A0E1 		mov	r6, r0, asl #16
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3939              		.loc 1 336 0
 3940 0fcc 075088E2 		add	r5, r8, #7
 3941 0fd0 0850A0A1 		movge	r5, r8
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3942              		.loc 1 181 0
 3943 0fd4 464881E0 		add	r4, r1, r6, asr #16
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3944              		.loc 1 336 0
 3945 0fd8 C551A0E1 		mov	r5, r5, asr #3
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3946              		.loc 1 181 0
 3947 0fdc 041184E0 		add	r1, r4, r4, asl #2
 3948              	.LVL96:
 3949 0fe0 C30785E2 		add	r0, r5, #51118080
 3950 0fe4 8111A0E1 		mov	r1, r1, asl #3
 3951 0fe8 014043E2 		sub	r4, r3, #1
 3952 0fec 966D80E2 		add	r6, r0, #9600
 3953 0ff0 060081E0 		add	r0, r1, r6
 3954 0ff4 FC309FE5 		ldr	r3, .L151
 3955              	.LVL97:
 3956 0ff8 0468A0E1 		mov	r6, r4, asl #16
 3957 0ffc 0001A0E1 		mov	r0, r0, asl #2
 3958 1000 2648A0E1 		mov	r4, r6, lsr #16
 3959              	.LVL98:
 3960 1004 033085E0 		add	r3, r5, r3
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3961              		.loc 1 338 0
 3962 1008 006090E5 		ldr	r6, [r0, #0]
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3963              		.loc 1 181 0
 3964 100c 044184E0 		add	r4, r4, r4, asl #2
 3965 1010 844143E0 		sub	r4, r3, r4, asl #3
 3966 1014 013084E0 		add	r3, r4, r1
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3967              		.loc 1 338 0
 3968 1018 064002E0 		and	r4, r2, r6
 3969 101c 04408CE1 		orr	r4, ip, r4
 181:../lcd.c      **** void Lcd_Draw_Box(INT16 usLeft, INT16 usTop, INT16 usRight, INT16 usBottom, INT8U ucColor)
 3970              		.loc 1 181 0
 3971 1020 0361A0E1 		mov	r6, r3, asl #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3972              		.loc 1 338 0
 3973 1024 0030A0E1 		mov	r3, r0
 3974 1028 001066E0 		rsb	r1, r6, r0
 3975 102c A04003E4 		str	r4, [r3], #-160
 3976 1030 A01041E2 		sub	r1, r1, #160
 3977 1034 A112A0E1 		mov	r1, r1, lsr #5
 336:../lcd.c      ****         while( (usLen--) > 0 )
 3978              		.loc 1 336 0
 3979 1038 060053E1 		cmp	r3, r6
 3980 103c 031001E2 		and	r1, r1, #3
 3981 1040 2600000A 		beq	.L87
 3982 1044 000051E3 		cmp	r1, #0
 3983 1048 1100000A 		beq	.L99
 3984 104c 010051E3 		cmp	r1, #1
 3985 1050 0900000A 		beq	.L139
 3986 1054 020051E3 		cmp	r1, #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 3987              		.loc 1 338 0
 3988 1058 00109315 		ldrne	r1, [r3, #0]
 3989 105c 01100210 		andne	r1, r2, r1
 3990 1060 01108C11 		orrne	r1, ip, r1
 3991 1064 00108315 		strne	r1, [r3, #0]
 3992 1068 053D4012 		subne	r3, r0, #320
 3993 106c 001093E5 		ldr	r1, [r3, #0]
 3994 1070 010002E0 		and	r0, r2, r1
 3995 1074 00108CE1 		orr	r1, ip, r0
 3996 1078 A01003E4 		str	r1, [r3], #-160
 3997              	.L139:
 3998 107c 000093E5 		ldr	r0, [r3, #0]
 3999 1080 001002E0 		and	r1, r2, r0
 4000 1084 01008CE1 		orr	r0, ip, r1
 4001 1088 A00003E4 		str	r0, [r3], #-160
 336:../lcd.c      ****         while( (usLen--) > 0 )
 4002              		.loc 1 336 0
 4003 108c 060053E1 		cmp	r3, r6
 4004 1090 1200000A 		beq	.L87
 4005              	.L99:
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 4006              		.loc 1 338 0
 4007 1094 005093E5 		ldr	r5, [r3, #0]
 4008 1098 A04013E5 		ldr	r4, [r3, #-160]
 4009 109c 400113E5 		ldr	r0, [r3, #-320]
 4010 10a0 E01113E5 		ldr	r1, [r3, #-480]
 4011 10a4 055002E0 		and	r5, r2, r5
 4012 10a8 044002E0 		and	r4, r2, r4
 4013 10ac 000002E0 		and	r0, r2, r0
 4014 10b0 011002E0 		and	r1, r2, r1
 4015 10b4 05508CE1 		orr	r5, ip, r5
 4016 10b8 04408CE1 		orr	r4, ip, r4
 4017 10bc 00008CE1 		orr	r0, ip, r0
 4018 10c0 01108CE1 		orr	r1, ip, r1
 4019 10c4 005083E5 		str	r5, [r3, #0]
 4020 10c8 A04003E5 		str	r4, [r3, #-160]
 4021 10cc 400103E5 		str	r0, [r3, #-320]
 4022 10d0 E01103E5 		str	r1, [r3, #-480]
 4023 10d4 0A3D43E2 		sub	r3, r3, #640
 336:../lcd.c      ****         while( (usLen--) > 0 )
 4024              		.loc 1 336 0
 4025 10d8 060053E1 		cmp	r3, r6
 4026 10dc ECFFFF1A 		bne	.L99
 4027              	.L87:
 4028              	.LBE20:
 4029              	.LBE19:
 187:../lcd.c      **** }
 4030              		.loc 1 187 0
 4031 10e0 1CD08DE2 		add	sp, sp, #28
 4032 10e4 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 4033 10e8 1EFF2FE1 		bx	lr
 4034              	.LVL99:
 4035              	.L100:
 4036 10ec 02A0A0E1 		mov	sl, r2
 4037              	.LBB21:
 4038              	.LBB13:
 297:../lcd.c      ****     if( usX1 < usX0 )
 4039              		.loc 1 297 0
 4040 10f0 10209DE5 		ldr	r2, [sp, #16]
 4041              	.LVL100:
 4042 10f4 47FEFFEA 		b	.L88
 4043              	.L152:
 4044              		.align	2
 4045              	.L151:
 4046 10f8 58250C03 		.word	51127640
 4047              	.LBE13:
 4048              	.LBE21:
 4049              		.cfi_endproc
 4050              	.LFE5:
 4052              		.global	__aeabi_idiv
 4053              		.align	2
 4054              		.global	Lcd_Draw_Line
 4056              	Lcd_Draw_Line:
 4057              	.LFB6:
 201:../lcd.c      **** {
 4058              		.loc 1 201 0
 4059              		.cfi_startproc
 4060              		@ Function supports interworking.
 4061              		@ args = 8, pretend = 0, frame = 48
 4062              		@ frame_needed = 1, uses_anonymous_args = 0
 4063              	.LVL101:
 4064 10fc 0DC0A0E1 		mov	ip, sp
 4065              	.LCFI6:
 4066              		.cfi_def_cfa_register 12
 4067 1100 F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 4068 1104 04B04CE2 		sub	fp, ip, #4
 4069              		.cfi_offset 14, -8
 4070              		.cfi_offset 13, -12
 4071              		.cfi_offset 11, -16
 4072              		.cfi_offset 10, -20
 4073              		.cfi_offset 9, -24
 4074              		.cfi_offset 8, -28
 4075              		.cfi_offset 7, -32
 4076              		.cfi_offset 6, -36
 4077              		.cfi_offset 5, -40
 4078              		.cfi_offset 4, -44
 4079              	.LCFI7:
 4080              		.cfi_def_cfa 11, 4
 4081 1108 34D04DE2 		sub	sp, sp, #52
 209:../lcd.c      **** 	if( usY0 == usY1 )
 4082              		.loc 1 209 0
 4083 110c 030051E1 		cmp	r1, r3
 201:../lcd.c      **** {
 4084              		.loc 1 201 0
 4085 1110 0140A0E1 		mov	r4, r1
 4086 1114 0360A0E1 		mov	r6, r3
 4087 1118 0050A0E1 		mov	r5, r0
 4088 111c 0280A0E1 		mov	r8, r2
 4089 1120 0470DBE5 		ldrb	r7, [fp, #4]	@ zero_extendqisi2
 4090 1124 B8C0DBE1 		ldrh	ip, [fp, #8]
 209:../lcd.c      **** 	if( usY0 == usY1 )
 4091              		.loc 1 209 0
 4092 1128 5602000A 		beq	.L248
 214:../lcd.c      **** 	if( usX0 == usX1 )
 4093              		.loc 1 214 0
 4094 112c 020050E1 		cmp	r0, r2
 4095 1130 D802000A 		beq	.L249
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 4096              		.loc 1 219 0
 4097 1134 00A062E0 		rsb	sl, r2, r0
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 4098              		.loc 1 220 0
 4099 1138 013063E0 		rsb	r3, r3, r1
 4100              	.LVL102:
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 4101              		.loc 1 219 0
 4102 113c 00005AE3 		cmp	sl, #0
 4103 1140 00A06AB2 		rsblt	sl, sl, #0
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 4104              		.loc 1 220 0
 4105 1144 000053E3 		cmp	r3, #0
 4106 1148 003063B2 		rsblt	r3, r3, #0
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 4107              		.loc 1 219 0
 4108 114c 0A28A0E1 		mov	r2, sl, asl #16
 4109              	.LVL103:
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 4110              		.loc 1 220 0
 4111 1150 0398A0E1 		mov	r9, r3, asl #16
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 4112              		.loc 1 219 0
 4113 1154 2228A0E1 		mov	r2, r2, lsr #16
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 4114              		.loc 1 220 0
 4115 1158 29E8A0E1 		mov	lr, r9, lsr #16
 221:../lcd.c      **** 	if( ((usDx >= usDy && (usX0 > usX1)) ||
 4116              		.loc 1 221 0
 4117 115c 0EA8A0E1 		mov	sl, lr, asl #16
 4118 1160 0298A0E1 		mov	r9, r2, asl #16
 4119 1164 4908A0E1 		mov	r0, r9, asr #16
 4120              	.LVL104:
 4121 1168 4A18A0E1 		mov	r1, sl, asr #16
 4122              	.LVL105:
 4123 116c 010050E1 		cmp	r0, r1
 219:../lcd.c      **** 	usDx = abs(usX0 - usX1);
 4124              		.loc 1 219 0
 4125 1170 4C200BE5 		str	r2, [fp, #-76]
 4126              	.LVL106:
 221:../lcd.c      **** 	if( ((usDx >= usDy && (usX0 > usX1)) ||
 4127              		.loc 1 221 0
 4128 1174 0020A0B3 		movlt	r2, #0
 4129 1178 0120A0A3 		movge	r2, #1
 4130 117c 010050E1 		cmp	r0, r1
 4131 1180 080055A1 		cmpge	r5, r8
 220:../lcd.c      **** 	usDy = abs(usY0 - usY1);
 4132              		.loc 1 220 0
 4133 1184 50E00BE5 		str	lr, [fp, #-80]
 4134              	.LVL107:
 221:../lcd.c      **** 	if( ((usDx >= usDy && (usX0 > usX1)) ||
 4135              		.loc 1 221 0
 4136 1188 40000BE5 		str	r0, [fp, #-64]
 4137 118c 44100BE5 		str	r1, [fp, #-68]
 4138 1190 FC0100DA 		ble	.L250
 4139              	.L165:
 4140              	.LVL108:
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 4141              		.loc 1 224 0
 4142 1194 053028E0 		eor	r3, r8, r5
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 4143              		.loc 1 225 0
 4144 1198 04E026E0 		eor	lr, r6, r4
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 4145              		.loc 1 224 0
 4146 119c 031028E0 		eor	r1, r8, r3
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 4147              		.loc 1 225 0
 4148 11a0 0E0026E0 		eor	r0, r6, lr
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 4149              		.loc 1 224 0
 4150 11a4 0850A0E1 		mov	r5, r8
 4151              	.LVL109:
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 4152              		.loc 1 225 0
 4153 11a8 0640A0E1 		mov	r4, r6
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 4154              		.loc 1 224 0
 4155 11ac 0188A0E1 		mov	r8, r1, asl #16
 4156              	.LVL110:
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 4157              		.loc 1 225 0
 4158 11b0 0068A0E1 		mov	r6, r0, asl #16
 224:../lcd.c      ****         GUISWAP(usX1, usX0);
 4159              		.loc 1 224 0
 4160 11b4 4888A0E1 		mov	r8, r8, asr #16
 4161              	.LVL111:
 225:../lcd.c      ****         GUISWAP(usY1, usY0);
 4162              		.loc 1 225 0
 4163 11b8 4668A0E1 		mov	r6, r6, asr #16
 4164              	.LVL112:
 4165              	.L166:
 227:../lcd.c      ****     y_sign = (usY1 - usY0) / usDy;
 4166              		.loc 1 227 0
 4167 11bc 44101BE5 		ldr	r1, [fp, #-68]
 4168 11c0 060064E0 		rsb	r0, r4, r6
 4169 11c4 54200BE5 		str	r2, [fp, #-84]
 4170 11c8 58C00BE5 		str	ip, [fp, #-88]
 4171 11cc FEFFFFEB 		bl	__aeabi_idiv
 4172 11d0 00C8A0E1 		mov	ip, r0, asl #16
 4173 11d4 2C38A0E1 		mov	r3, ip, lsr #16
 228:../lcd.c      ****     x_sign = (usX1 - usX0) / usDx;
 4174              		.loc 1 228 0
 4175 11d8 40101BE5 		ldr	r1, [fp, #-64]
 4176 11dc 080065E0 		rsb	r0, r5, r8
 227:../lcd.c      ****     y_sign = (usY1 - usY0) / usDy;
 4177              		.loc 1 227 0
 4178 11e0 48300BE5 		str	r3, [fp, #-72]
 4179              	.LVL113:
 228:../lcd.c      ****     x_sign = (usX1 - usX0) / usDx;
 4180              		.loc 1 228 0
 4181 11e4 FEFFFFEB 		bl	__aeabi_idiv
 230:../lcd.c      ****     if( usDx >= usDy )
 4182              		.loc 1 230 0
 4183 11e8 54201BE5 		ldr	r2, [fp, #-84]
 228:../lcd.c      ****     x_sign = (usX1 - usX0) / usDx;
 4184              		.loc 1 228 0
 4185 11ec 00C8A0E1 		mov	ip, r0, asl #16
 230:../lcd.c      ****     if( usDx >= usDy )
 4186              		.loc 1 230 0
 4187 11f0 000052E3 		cmp	r2, #0
 228:../lcd.c      ****     x_sign = (usX1 - usX0) / usDx;
 4188              		.loc 1 228 0
 4189 11f4 2C08A0E1 		mov	r0, ip, lsr #16
 4190              	.LVL114:
 230:../lcd.c      ****     if( usDx >= usDy )
 4191              		.loc 1 230 0
 4192 11f8 58C01BE5 		ldr	ip, [fp, #-88]
 4193 11fc 1101000A 		beq	.L167
 4194              	.LVL115:
 232:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 4195              		.loc 1 232 0
 4196 1200 080055E1 		cmp	r5, r8
 4197 1204 1C0200CA 		bgt	.L153
 233:../lcd.c      ****              wNexty = usY1, decision = (usDx >> 1);
 4198              		.loc 1 233 0
 4199 1208 C908A0E1 		mov	r0, r9, asr #17
 4200              	.LVL116:
 4201 120c 2AA8A0E1 		mov	sl, sl, lsr #16
 4202 1210 0098A0E1 		mov	r9, r0, asl #16
 4203 1214 38800BE5 		str	r8, [fp, #-56]
 4204 1218 30400BE5 		str	r4, [fp, #-48]
 4205 121c 34500BE5 		str	r5, [fp, #-52]
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4206              		.loc 1 242 0
 4207 1220 3C700BE5 		str	r7, [fp, #-60]
 233:../lcd.c      ****              wNexty = usY1, decision = (usDx >> 1);
 4208              		.loc 1 233 0
 4209 1224 44A00BE5 		str	sl, [fp, #-68]
 4210 1228 2998A0E1 		mov	r9, r9, lsr #16
 4211 122c ACC0A0E1 		mov	ip, ip, lsr #1
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4212              		.loc 1 242 0
 4213 1230 06A0A0E1 		mov	sl, r6
 4214              	.LVL117:
 4215              	.L173:
 236:../lcd.c      ****             if( decision >= usDx )
 4216              		.loc 1 236 0
 4217 1234 40701BE5 		ldr	r7, [fp, #-64]
 4218 1238 0958A0E1 		mov	r5, r9, asl #16
 4219 123c 450857E1 		cmp	r7, r5, asr #16
 4220 1240 0C0000CA 		bgt	.L168
 238:../lcd.c      ****                 decision -= usDx;
 4221              		.loc 1 238 0
 4222 1244 4C401BE5 		ldr	r4, [fp, #-76]
 239:../lcd.c      ****                 wCury += y_sign;
 4223              		.loc 1 239 0
 4224 1248 30001BE5 		ldr	r0, [fp, #-48]
 238:../lcd.c      ****                 decision -= usDx;
 4225              		.loc 1 238 0
 4226 124c 099064E0 		rsb	r9, r4, r9
 239:../lcd.c      ****                 wCury += y_sign;
 4227              		.loc 1 239 0
 4228 1250 48401BE5 		ldr	r4, [fp, #-72]
 4229 1254 003084E0 		add	r3, r4, r0
 4230 1258 03E8A0E1 		mov	lr, r3, asl #16
 240:../lcd.c      ****                 wNexty -= y_sign;
 4231              		.loc 1 240 0
 4232 125c 0AA064E0 		rsb	sl, r4, sl
 239:../lcd.c      ****                 wCury += y_sign;
 4233              		.loc 1 239 0
 4234 1260 2E18A0E1 		mov	r1, lr, lsr #16
 238:../lcd.c      ****                 decision -= usDx;
 4235              		.loc 1 238 0
 4236 1264 0928A0E1 		mov	r2, r9, asl #16
 240:../lcd.c      ****                 wNexty -= y_sign;
 4237              		.loc 1 240 0
 4238 1268 0A68A0E1 		mov	r6, sl, asl #16
 239:../lcd.c      ****                 wCury += y_sign;
 4239              		.loc 1 239 0
 4240 126c 30100BE5 		str	r1, [fp, #-48]
 238:../lcd.c      ****                 decision -= usDx;
 4241              		.loc 1 238 0
 4242 1270 2298A0E1 		mov	r9, r2, lsr #16
 4243              	.LVL118:
 240:../lcd.c      ****                 wNexty -= y_sign;
 4244              		.loc 1 240 0
 4245 1274 26A8A0E1 		mov	sl, r6, lsr #16
 4246              	.LVL119:
 4247              	.L168:
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4248              		.loc 1 242 0
 4249 1278 30601BE5 		ldr	r6, [fp, #-48]
 4250 127c 06106CE0 		rsb	r1, ip, r6
 243:../lcd.c      ****                  wpy <= wCury + usWidth / 2; wpy++ )
 4251              		.loc 1 243 0
 4252 1280 0178A0E1 		mov	r7, r1, asl #16
 4253 1284 0658A0E1 		mov	r5, r6, asl #16
 4254 1288 4778A0E1 		mov	r7, r7, asr #16
 4255 128c 45688CE0 		add	r6, ip, r5, asr #16
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4256              		.loc 1 242 0
 4257 1290 060057E1 		cmp	r7, r6
 4258 1294 690000CA 		bgt	.L169
 4259 1298 34001BE5 		ldr	r0, [fp, #-52]
 4260 129c 0038A0E1 		mov	r3, r0, asl #16
 4261 12a0 C3EFA0E1 		mov	lr, r3, asr #31
 4262 12a4 AE2EA0E1 		mov	r2, lr, lsr #29
 4263 12a8 4338A0E1 		mov	r3, r3, asr #16
 4264 12ac 021083E0 		add	r1, r3, r2
 4265 12b0 075001E2 		and	r5, r1, #7
 4266 12b4 058062E0 		rsb	r8, r2, r5
 4267 12b8 07E068E2 		rsb	lr, r8, #7
 4268 12bc 3C201BE5 		ldr	r2, [fp, #-60]
 4269 12c0 0801A0E1 		mov	r0, r8, asl #2
 4270 12c4 0F42A0E3 		mov	r4, #-268435456
 4271 12c8 3400E0E1 		mvn	r0, r4, lsr r0
 4272 12cc 0E11A0E1 		mov	r1, lr, asl #2
 4273 12d0 1211A0E1 		mov	r1, r2, asl r1
 4274 12d4 075083E2 		add	r5, r3, #7
 4275 12d8 000053E3 		cmp	r3, #0
 4276 12dc 0530A0B1 		movlt	r3, r5
 4277 12e0 C381A0E1 		mov	r8, r3, asr #3
 4278 12e4 C34788E2 		add	r4, r8, #51118080
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4279              		.loc 1 245 0
 4280 12e8 07E187E0 		add	lr, r7, r7, asl #2
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4281              		.loc 1 242 0
 4282 12ec 964D84E2 		add	r4, r4, #9600
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4283              		.loc 1 245 0
 4284 12f0 8E2184E0 		add	r2, r4, lr, asl #3
 4285 12f4 02E1A0E1 		mov	lr, r2, asl #2
 4286 12f8 00309EE5 		ldr	r3, [lr, #0]
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4287              		.loc 1 200 0
 4288 12fc 015087E2 		add	r5, r7, #1
 4289 1300 026086E2 		add	r6, r6, #2
 4290 1304 0570E0E1 		mvn	r7, r5
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4291              		.loc 1 245 0
 4292 1308 038000E0 		and	r8, r0, r3
 4293 130c 013085E2 		add	r3, r5, #1
 4294 1310 0520A0E1 		mov	r2, r5
 4295 1314 018088E1 		orr	r8, r8, r1
 4296 1318 065087E0 		add	r5, r7, r6
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4297              		.loc 1 242 0
 4298 131c 060053E1 		cmp	r3, r6
 4299 1320 037005E2 		and	r7, r5, #3
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4300              		.loc 1 245 0
 4301 1324 00808EE5 		str	r8, [lr, #0]
 4302              	.LVL120:
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4303              		.loc 1 242 0
 4304 1328 4400000A 		beq	.L169
 4305 132c 000057E3 		cmp	r7, #0
 4306 1330 2000000A 		beq	.L170
 4307 1334 010057E3 		cmp	r7, #1
 4308 1338 1300000A 		beq	.L234
 4309 133c 020057E3 		cmp	r7, #2
 4310 1340 0800000A 		beq	.L235
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4311              		.loc 1 245 0
 4312 1344 025182E0 		add	r5, r2, r2, asl #2
 4313 1348 857184E0 		add	r7, r4, r5, asl #3
 4314 134c 0771A0E1 		mov	r7, r7, asl #2
 4315 1350 00E097E5 		ldr	lr, [r7, #0]
 4316 1354 0E2000E0 		and	r2, r0, lr
 4317 1358 015082E1 		orr	r5, r2, r1
 4318 135c 005087E5 		str	r5, [r7, #0]
 4319 1360 0320A0E1 		mov	r2, r3
 4320 1364 013083E2 		add	r3, r3, #1
 4321              	.L235:
 4322 1368 02E182E0 		add	lr, r2, r2, asl #2
 4323 136c 8E2184E0 		add	r2, r4, lr, asl #3
 4324 1370 0221A0E1 		mov	r2, r2, asl #2
 4325 1374 005092E5 		ldr	r5, [r2, #0]
 4326 1378 057000E0 		and	r7, r0, r5
 4327 137c 01E087E1 		orr	lr, r7, r1
 4328 1380 00E082E5 		str	lr, [r2, #0]
 4329 1384 0320A0E1 		mov	r2, r3
 4330 1388 013083E2 		add	r3, r3, #1
 4331              	.L234:
 4332 138c 025182E0 		add	r5, r2, r2, asl #2
 4333 1390 852184E0 		add	r2, r4, r5, asl #3
 4334 1394 0251A0E1 		mov	r5, r2, asl #2
 4335 1398 007095E5 		ldr	r7, [r5, #0]
 4336 139c 0320A0E1 		mov	r2, r3
 4337 13a0 07E000E0 		and	lr, r0, r7
 4338 13a4 013083E2 		add	r3, r3, #1
 4339 13a8 01708EE1 		orr	r7, lr, r1
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4340              		.loc 1 242 0
 4341 13ac 060053E1 		cmp	r3, r6
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4342              		.loc 1 245 0
 4343 13b0 007085E5 		str	r7, [r5, #0]
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4344              		.loc 1 242 0
 4345 13b4 2100000A 		beq	.L169
 4346              	.L170:
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4347              		.loc 1 245 0
 4348 13b8 028182E0 		add	r8, r2, r2, asl #2
 4349 13bc 885184E0 		add	r5, r4, r8, asl #3
 4350 13c0 0581A0E1 		mov	r8, r5, asl #2
 4351 13c4 002098E5 		ldr	r2, [r8, #0]
 4352 13c8 027000E0 		and	r7, r0, r2
 4353 13cc 035183E0 		add	r5, r3, r3, asl #2
 4354 13d0 01E087E1 		orr	lr, r7, r1
 4355 13d4 00E088E5 		str	lr, [r8, #0]
 4356 13d8 852184E0 		add	r2, r4, r5, asl #3
 4357 13dc 0251A0E1 		mov	r5, r2, asl #2
 4358 13e0 007095E5 		ldr	r7, [r5, #0]
 4359 13e4 012083E2 		add	r2, r3, #1
 4360 13e8 07E000E0 		and	lr, r0, r7
 4361 13ec 01808EE1 		orr	r8, lr, r1
 4362 13f0 027182E0 		add	r7, r2, r2, asl #2
 4363 13f4 008085E5 		str	r8, [r5, #0]
 4364 13f8 87E184E0 		add	lr, r4, r7, asl #3
 4365 13fc 0EE1A0E1 		mov	lr, lr, asl #2
 4366 1400 00509EE5 		ldr	r5, [lr, #0]
 4367 1404 017082E2 		add	r7, r2, #1
 4368 1408 058000E0 		and	r8, r0, r5
 4369 140c 018088E1 		orr	r8, r8, r1
 4370 1410 075187E0 		add	r5, r7, r7, asl #2
 4371 1414 00808EE5 		str	r8, [lr, #0]
 4372 1418 852184E0 		add	r2, r4, r5, asl #3
 4373 141c 0251A0E1 		mov	r5, r2, asl #2
 4374 1420 007095E5 		ldr	r7, [r5, #0]
 4375 1424 032083E2 		add	r2, r3, #3
 4376 1428 07E000E0 		and	lr, r0, r7
 4377 142c 043083E2 		add	r3, r3, #4
 4378 1430 01708EE1 		orr	r7, lr, r1
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4379              		.loc 1 242 0
 4380 1434 060053E1 		cmp	r3, r6
 245:../lcd.c      ****                 (LCD_PutPixel(wCurx, wpy, ucColor));
 4381              		.loc 1 245 0
 4382 1438 007085E5 		str	r7, [r5, #0]
 242:../lcd.c      ****             for( wpy = wCury - usWidth / 2;
 4383              		.loc 1 242 0
 4384 143c DDFFFF1A 		bne	.L170
 4385              	.L169:
 4386              	.LVL121:
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4387              		.loc 1 248 0
 4388 1440 0A306CE0 		rsb	r3, ip, sl
 249:../lcd.c      ****                  wpy <= wNexty + usWidth / 2; wpy++ )
 4389              		.loc 1 249 0
 4390 1444 0318A0E1 		mov	r1, r3, asl #16
 4391 1448 0A68A0E1 		mov	r6, sl, asl #16
 4392 144c 4178A0E1 		mov	r7, r1, asr #16
 4393 1450 46688CE0 		add	r6, ip, r6, asr #16
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4394              		.loc 1 248 0
 4395 1454 060057E1 		cmp	r7, r6
 4396 1458 690000CA 		bgt	.L171
 4397 145c 38001BE5 		ldr	r0, [fp, #-56]
 4398 1460 0088A0E1 		mov	r8, r0, asl #16
 4399 1464 C8EFA0E1 		mov	lr, r8, asr #31
 4400 1468 AE2EA0E1 		mov	r2, lr, lsr #29
 4401 146c 4888A0E1 		mov	r8, r8, asr #16
 4402 1470 021088E0 		add	r1, r8, r2
 4403 1474 073001E2 		and	r3, r1, #7
 4404 1478 035062E0 		rsb	r5, r2, r3
 4405 147c 07E065E2 		rsb	lr, r5, #7
 4406 1480 3C201BE5 		ldr	r2, [fp, #-60]
 4407 1484 0501A0E1 		mov	r0, r5, asl #2
 4408 1488 0F42A0E3 		mov	r4, #-268435456
 4409 148c 3400E0E1 		mvn	r0, r4, lsr r0
 4410 1490 0E11A0E1 		mov	r1, lr, asl #2
 4411 1494 1211A0E1 		mov	r1, r2, asl r1
 4412 1498 073088E2 		add	r3, r8, #7
 4413 149c 000058E3 		cmp	r8, #0
 4414 14a0 0380A0B1 		movlt	r8, r3
 4415 14a4 C851A0E1 		mov	r5, r8, asr #3
 4416 14a8 C34785E2 		add	r4, r5, #51118080
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4417              		.loc 1 251 0
 4418 14ac 07E187E0 		add	lr, r7, r7, asl #2
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4419              		.loc 1 248 0
 4420 14b0 964D84E2 		add	r4, r4, #9600
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4421              		.loc 1 251 0
 4422 14b4 8E2184E0 		add	r2, r4, lr, asl #3
 4423 14b8 02E1A0E1 		mov	lr, r2, asl #2
 4424 14bc 00809EE5 		ldr	r8, [lr, #0]
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4425              		.loc 1 200 0
 4426 14c0 013087E2 		add	r3, r7, #1
 4427 14c4 026086E2 		add	r6, r6, #2
 4428 14c8 0370E0E1 		mvn	r7, r3
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4429              		.loc 1 251 0
 4430 14cc 0320A0E1 		mov	r2, r3
 4431 14d0 085000E0 		and	r5, r0, r8
 4432 14d4 013083E2 		add	r3, r3, #1
 4433 14d8 067087E0 		add	r7, r7, r6
 4434 14dc 018085E1 		orr	r8, r5, r1
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4435              		.loc 1 248 0
 4436 14e0 060053E1 		cmp	r3, r6
 4437 14e4 037007E2 		and	r7, r7, #3
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4438              		.loc 1 251 0
 4439 14e8 00808EE5 		str	r8, [lr, #0]
 4440              	.LVL122:
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4441              		.loc 1 248 0
 4442 14ec 4400000A 		beq	.L171
 4443 14f0 000057E3 		cmp	r7, #0
 4444 14f4 2000000A 		beq	.L172
 4445 14f8 010057E3 		cmp	r7, #1
 4446 14fc 1300000A 		beq	.L232
 4447 1500 020057E3 		cmp	r7, #2
 4448 1504 0800000A 		beq	.L233
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4449              		.loc 1 251 0
 4450 1508 02E182E0 		add	lr, r2, r2, asl #2
 4451 150c 8E7184E0 		add	r7, r4, lr, asl #3
 4452 1510 0771A0E1 		mov	r7, r7, asl #2
 4453 1514 005097E5 		ldr	r5, [r7, #0]
 4454 1518 052000E0 		and	r2, r0, r5
 4455 151c 01E082E1 		orr	lr, r2, r1
 4456 1520 00E087E5 		str	lr, [r7, #0]
 4457 1524 0320A0E1 		mov	r2, r3
 4458 1528 013083E2 		add	r3, r3, #1
 4459              	.L233:
 4460 152c 025182E0 		add	r5, r2, r2, asl #2
 4461 1530 852184E0 		add	r2, r4, r5, asl #3
 4462 1534 0221A0E1 		mov	r2, r2, asl #2
 4463 1538 00E092E5 		ldr	lr, [r2, #0]
 4464 153c 0E7000E0 		and	r7, r0, lr
 4465 1540 015087E1 		orr	r5, r7, r1
 4466 1544 005082E5 		str	r5, [r2, #0]
 4467 1548 0320A0E1 		mov	r2, r3
 4468 154c 013083E2 		add	r3, r3, #1
 4469              	.L232:
 4470 1550 02E182E0 		add	lr, r2, r2, asl #2
 4471 1554 8E2184E0 		add	r2, r4, lr, asl #3
 4472 1558 02E1A0E1 		mov	lr, r2, asl #2
 4473 155c 00509EE5 		ldr	r5, [lr, #0]
 4474 1560 0320A0E1 		mov	r2, r3
 4475 1564 057000E0 		and	r7, r0, r5
 4476 1568 013083E2 		add	r3, r3, #1
 4477 156c 017087E1 		orr	r7, r7, r1
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4478              		.loc 1 248 0
 4479 1570 060053E1 		cmp	r3, r6
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4480              		.loc 1 251 0
 4481 1574 00708EE5 		str	r7, [lr, #0]
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4482              		.loc 1 248 0
 4483 1578 2100000A 		beq	.L171
 4484              	.L172:
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4485              		.loc 1 251 0
 4486 157c 028182E0 		add	r8, r2, r2, asl #2
 4487 1580 885184E0 		add	r5, r4, r8, asl #3
 4488 1584 0581A0E1 		mov	r8, r5, asl #2
 4489 1588 002098E5 		ldr	r2, [r8, #0]
 4490 158c 02E000E0 		and	lr, r0, r2
 4491 1590 035183E0 		add	r5, r3, r3, asl #2
 4492 1594 01708EE1 		orr	r7, lr, r1
 4493 1598 007088E5 		str	r7, [r8, #0]
 4494 159c 852184E0 		add	r2, r4, r5, asl #3
 4495 15a0 0251A0E1 		mov	r5, r2, asl #2
 4496 15a4 00E095E5 		ldr	lr, [r5, #0]
 4497 15a8 012083E2 		add	r2, r3, #1
 4498 15ac 0E7000E0 		and	r7, r0, lr
 4499 15b0 018087E1 		orr	r8, r7, r1
 4500 15b4 02E182E0 		add	lr, r2, r2, asl #2
 4501 15b8 008085E5 		str	r8, [r5, #0]
 4502 15bc 8E7184E0 		add	r7, r4, lr, asl #3
 4503 15c0 0771A0E1 		mov	r7, r7, asl #2
 4504 15c4 005097E5 		ldr	r5, [r7, #0]
 4505 15c8 01E082E2 		add	lr, r2, #1
 4506 15cc 058000E0 		and	r8, r0, r5
 4507 15d0 018088E1 		orr	r8, r8, r1
 4508 15d4 0E518EE0 		add	r5, lr, lr, asl #2
 4509 15d8 008087E5 		str	r8, [r7, #0]
 4510 15dc 852184E0 		add	r2, r4, r5, asl #3
 4511 15e0 0251A0E1 		mov	r5, r2, asl #2
 4512 15e4 00E095E5 		ldr	lr, [r5, #0]
 4513 15e8 032083E2 		add	r2, r3, #3
 4514 15ec 0E7000E0 		and	r7, r0, lr
 4515 15f0 043083E2 		add	r3, r3, #4
 4516 15f4 017087E1 		orr	r7, r7, r1
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4517              		.loc 1 248 0
 4518 15f8 060053E1 		cmp	r3, r6
 251:../lcd.c      ****                 (LCD_PutPixel(wNextx, wpy, ucColor));
 4519              		.loc 1 251 0
 4520 15fc 007085E5 		str	r7, [r5, #0]
 248:../lcd.c      ****             for( wpy = wNexty - usWidth / 2;
 4521              		.loc 1 248 0
 4522 1600 DDFFFF1A 		bne	.L172
 4523              	.L171:
 234:../lcd.c      ****              wCurx <= wNextx; wCurx++, wNextx--, decision += usDy )
 4524              		.loc 1 234 0
 4525 1604 34501BE5 		ldr	r5, [fp, #-52]
 4526 1608 38601BE5 		ldr	r6, [fp, #-56]
 4527 160c 012085E2 		add	r2, r5, #1
 4528 1610 013046E2 		sub	r3, r6, #1
 4529 1614 02E8A0E1 		mov	lr, r2, asl #16
 4530              	.LVL123:
 4531 1618 0318A0E1 		mov	r1, r3, asl #16
 4532              	.LVL124:
 232:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 4533              		.loc 1 232 0
 4534 161c 2E08A0E1 		mov	r0, lr, lsr #16
 4535 1620 2138A0E1 		mov	r3, r1, lsr #16
 4536 1624 01005EE1 		cmp	lr, r1
 4537 1628 34000BE5 		str	r0, [fp, #-52]
 4538 162c 38300BE5 		str	r3, [fp, #-56]
 4539 1630 110100CA 		bgt	.L153
 234:../lcd.c      ****              wCurx <= wNextx; wCurx++, wNextx--, decision += usDy )
 4540              		.loc 1 234 0
 4541 1634 44701BE5 		ldr	r7, [fp, #-68]
 4542 1638 096087E0 		add	r6, r7, r9
 4543 163c 0698A0E1 		mov	r9, r6, asl #16
 4544 1640 2998A0E1 		mov	r9, r9, lsr #16
 4545 1644 FAFEFFEA 		b	.L173
 4546              	.LVL125:
 4547              	.L167:
 257:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 4548              		.loc 1 257 0
 4549 1648 060054E1 		cmp	r4, r6
 4550 164c 0A0100CA 		bgt	.L153
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4551              		.loc 1 258 0
 4552 1650 CA38A0E1 		mov	r3, sl, asr #17
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4553              		.loc 1 200 0
 4554 1654 061186E0 		add	r1, r6, r6, asl #2
 4555 1658 042184E0 		add	r2, r4, r4, asl #2
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4556              		.loc 1 258 0
 4557 165c 03A8A0E1 		mov	sl, r3, asl #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4558              		.loc 1 200 0
 4559 1660 81E1A0E1 		mov	lr, r1, asl #3
 4560 1664 8221A0E1 		mov	r2, r2, asl #3
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4561              		.loc 1 258 0
 4562 1668 2AA8A0E1 		mov	sl, sl, lsr #16
 4563 166c 2938A0E1 		mov	r3, r9, lsr #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4564              		.loc 1 200 0
 4565 1670 C3178EE2 		add	r1, lr, #51118080
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4566              		.loc 1 258 0
 4567 1674 30A00BE5 		str	sl, [fp, #-48]
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4568              		.loc 1 200 0
 4569 1678 C3E782E2 		add	lr, r2, #51118080
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4570              		.loc 1 258 0
 4571 167c 4C300BE5 		str	r3, [fp, #-76]
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4572              		.loc 1 200 0
 4573 1680 40600BE5 		str	r6, [fp, #-64]
 4574 1684 38800BE5 		str	r8, [fp, #-56]
 4575 1688 34500BE5 		str	r5, [fp, #-52]
 264:../lcd.c      ****                 wCurx += x_sign;
 4576              		.loc 1 264 0
 4577 168c 48000BE5 		str	r0, [fp, #-72]
 258:../lcd.c      ****              wNexty = usY1, decision = (usDy >> 1);
 4578              		.loc 1 258 0
 4579 1690 AC90A0E1 		mov	r9, ip, lsr #1
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4580              		.loc 1 200 0
 4581 1694 3C400BE5 		str	r4, [fp, #-60]
 4582 1698 961D81E2 		add	r1, r1, #9600
 4583 169c 962D8EE2 		add	r2, lr, #9600
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4584              		.loc 1 270 0
 4585 16a0 0FC2A0E3 		mov	ip, #-268435456
 4586 16a4 0A40A0E1 		mov	r4, sl
 4587              	.LVL126:
 4588              	.L179:
 261:../lcd.c      ****             if( decision >= usDy )
 4589              		.loc 1 261 0
 4590 16a8 44501BE5 		ldr	r5, [fp, #-68]
 4591 16ac 0408A0E1 		mov	r0, r4, asl #16
 4592 16b0 400855E1 		cmp	r5, r0, asr #16
 4593 16b4 0F0000CA 		bgt	.L174
 264:../lcd.c      ****                 wCurx += x_sign;
 4594              		.loc 1 264 0
 4595 16b8 48A01BE5 		ldr	sl, [fp, #-72]
 4596 16bc 34301BE5 		ldr	r3, [fp, #-52]
 265:../lcd.c      ****                 wNextx -= x_sign;
 4597              		.loc 1 265 0
 4598 16c0 38E01BE5 		ldr	lr, [fp, #-56]
 263:../lcd.c      ****                 decision -= usDy;
 4599              		.loc 1 263 0
 4600 16c4 50501BE5 		ldr	r5, [fp, #-80]
 264:../lcd.c      ****                 wCurx += x_sign;
 4601              		.loc 1 264 0
 4602 16c8 03008AE0 		add	r0, sl, r3
 265:../lcd.c      ****                 wNextx -= x_sign;
 4603              		.loc 1 265 0
 4604 16cc 0E606AE0 		rsb	r6, sl, lr
 263:../lcd.c      ****                 decision -= usDy;
 4605              		.loc 1 263 0
 4606 16d0 044065E0 		rsb	r4, r5, r4
 4607 16d4 0458A0E1 		mov	r5, r4, asl #16
 264:../lcd.c      ****                 wCurx += x_sign;
 4608              		.loc 1 264 0
 4609 16d8 00E8A0E1 		mov	lr, r0, asl #16
 265:../lcd.c      ****                 wNextx -= x_sign;
 4610              		.loc 1 265 0
 4611 16dc 0668A0E1 		mov	r6, r6, asl #16
 263:../lcd.c      ****                 decision -= usDy;
 4612              		.loc 1 263 0
 4613 16e0 2538A0E1 		mov	r3, r5, lsr #16
 264:../lcd.c      ****                 wCurx += x_sign;
 4614              		.loc 1 264 0
 4615 16e4 2EA8A0E1 		mov	sl, lr, lsr #16
 265:../lcd.c      ****                 wNextx -= x_sign;
 4616              		.loc 1 265 0
 4617 16e8 2648A0E1 		mov	r4, r6, lsr #16
 263:../lcd.c      ****                 decision -= usDy;
 4618              		.loc 1 263 0
 4619 16ec 30300BE5 		str	r3, [fp, #-48]
 4620              	.LVL127:
 264:../lcd.c      ****                 wCurx += x_sign;
 4621              		.loc 1 264 0
 4622 16f0 34A00BE5 		str	sl, [fp, #-52]
 4623              	.LVL128:
 265:../lcd.c      ****                 wNextx -= x_sign;
 4624              		.loc 1 265 0
 4625 16f4 38400BE5 		str	r4, [fp, #-56]
 4626              	.LVL129:
 4627              	.L174:
 267:../lcd.c      ****             for( wpx = wCurx - usWidth / 2;
 4628              		.loc 1 267 0
 4629 16f8 34401BE5 		ldr	r4, [fp, #-52]
 4630 16fc 04A069E0 		rsb	sl, r9, r4
 4631 1700 0A08A0E1 		mov	r0, sl, asl #16
 4632 1704 2008A0E1 		mov	r0, r0, lsr #16
 4633              	.LVL130:
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4634              		.loc 1 268 0
 4635 1708 0468A0E1 		mov	r6, r4, asl #16
 4636 170c 00A8A0E1 		mov	sl, r0, asl #16
 4637 1710 465889E0 		add	r5, r9, r6, asr #16
 4638 1714 4A38A0E1 		mov	r3, sl, asr #16
 267:../lcd.c      ****             for( wpx = wCurx - usWidth / 2;
 4639              		.loc 1 267 0
 4640 1718 050053E1 		cmp	r3, r5
 4641 171c 3C0000CA 		bgt	.L175
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4642              		.loc 1 200 0
 4643 1720 018085E2 		add	r8, r5, #1
 4644 1724 085063E0 		rsb	r5, r3, r8
 4645 1728 010015E3 		tst	r5, #1
 4646 172c 0060A0E3 		mov	r6, #0
 4647 1730 B500000A 		beq	.L236
 4648 1734 0AE0A0E1 		mov	lr, sl
 4649 1738 01A0A0E1 		mov	sl, r1
 4650 173c 0E10A0E1 		mov	r1, lr
 4651 1740 180000EA 		b	.L176
 4652              	.LVL131:
 4653              	.L251:
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4654              		.loc 1 270 0
 4655 1744 028911E2 		ands	r8, r1, #32768
 4656 1748 0080E013 		mvnne	r8, #0
 4657 174c 000053E3 		cmp	r3, #0
 4658 1750 A8EEA0E1 		mov	lr, r8, lsr #29
 4659 1754 0340A0A1 		movge	r4, r3
 4660 1758 0040A0B1 		movlt	r4, r0
 4661 175c C44182E0 		add	r4, r2, r4, asr #3
 4662 1760 0E0083E0 		add	r0, r3, lr
 4663 1764 073000E2 		and	r3, r0, #7
 4664 1768 0441A0E1 		mov	r4, r4, asl #2
 4665 176c 03E06EE0 		rsb	lr, lr, r3
 4666 1770 000094E5 		ldr	r0, [r4, #0]
 4667 1774 0E81A0E1 		mov	r8, lr, asl #2
 4668 1778 3C08C0E1 		bic	r0, r0, ip, lsr r8
 4669 177c 07306EE2 		rsb	r3, lr, #7
 4670 1780 03E1A0E1 		mov	lr, r3, asl #2
 4671 1784 178E80E1 		orr	r8, r0, r7, asl lr
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4672              		.loc 1 268 0
 4673 1788 011081E2 		add	r1, r1, #1
 4674 178c 0108A0E1 		mov	r0, r1, asl #16
 4675 1790 2008A0E1 		mov	r0, r0, lsr #16
 4676              	.LVL132:
 4677 1794 0038A0E1 		mov	r3, r0, asl #16
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4678              		.loc 1 270 0
 4679 1798 008084E5 		str	r8, [r4, #0]
 4680 179c 0310A0E1 		mov	r1, r3
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4681              		.loc 1 268 0
 4682 17a0 016086E2 		add	r6, r6, #1
 4683 17a4 4338A0E1 		mov	r3, r3, asr #16
 4684              	.LVL133:
 4685              	.L176:
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4686              		.loc 1 270 0
 4687 17a8 000053E3 		cmp	r3, #0
 4688 17ac C1EFA0E1 		mov	lr, r1, asr #31
 4689 17b0 078083E2 		add	r8, r3, #7
 4690 17b4 AE1EA0E1 		mov	r1, lr, lsr #29
 4691 17b8 0380A0A1 		movge	r8, r3
 4692 17bc C84182E0 		add	r4, r2, r8, asr #3
 4693 17c0 013083E0 		add	r3, r3, r1
 4694 17c4 0441A0E1 		mov	r4, r4, asl #2
 4695 17c8 07E003E2 		and	lr, r3, #7
 4696 17cc 008094E5 		ldr	r8, [r4, #0]
 4697 17d0 0E3061E0 		rsb	r3, r1, lr
 4698 17d4 0311A0E1 		mov	r1, r3, asl #2
 4699 17d8 3CE1C8E1 		bic	lr, r8, ip, lsr r1
 4700 17dc 073063E2 		rsb	r3, r3, #7
 4701 17e0 0381A0E1 		mov	r8, r3, asl #2
 4702 17e4 17888EE1 		orr	r8, lr, r7, asl r8
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4703              		.loc 1 268 0
 4704 17e8 010080E2 		add	r0, r0, #1
 4705 17ec 0018A0E1 		mov	r1, r0, asl #16
 4706 17f0 2118A0E1 		mov	r1, r1, lsr #16
 4707 17f4 016086E2 		add	r6, r6, #1
 4708 17f8 0138A0E1 		mov	r3, r1, asl #16
 4709 17fc 4338A0E1 		mov	r3, r3, asr #16
 267:../lcd.c      ****             for( wpx = wCurx - usWidth / 2;
 4710              		.loc 1 267 0
 4711 1800 050056E1 		cmp	r6, r5
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4712              		.loc 1 270 0
 4713 1804 070083E2 		add	r0, r3, #7
 4714 1808 008084E5 		str	r8, [r4, #0]
 267:../lcd.c      ****             for( wpx = wCurx - usWidth / 2;
 4715              		.loc 1 267 0
 4716 180c CCFFFF1A 		bne	.L251
 4717 1810 0A10A0E1 		mov	r1, sl
 4718              	.L175:
 273:../lcd.c      ****             for( wpx = wNextx - usWidth / 2;
 4719              		.loc 1 273 0
 4720 1814 38401BE5 		ldr	r4, [fp, #-56]
 4721 1818 04A069E0 		rsb	sl, r9, r4
 4722 181c 0A68A0E1 		mov	r6, sl, asl #16
 4723 1820 2608A0E1 		mov	r0, r6, lsr #16
 4724              	.LVL134:
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4725              		.loc 1 274 0
 4726 1824 0458A0E1 		mov	r5, r4, asl #16
 4727 1828 00A8A0E1 		mov	sl, r0, asl #16
 4728 182c 455889E0 		add	r5, r9, r5, asr #16
 4729 1830 4A38A0E1 		mov	r3, sl, asr #16
 273:../lcd.c      ****             for( wpx = wNextx - usWidth / 2;
 4730              		.loc 1 273 0
 4731 1834 050053E1 		cmp	r3, r5
 4732 1838 3C0000CA 		bgt	.L177
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4733              		.loc 1 200 0
 4734 183c 01E085E2 		add	lr, r5, #1
 4735 1840 0E5063E0 		rsb	r5, r3, lr
 4736 1844 010015E3 		tst	r5, #1
 4737 1848 0060A0E3 		mov	r6, #0
 4738 184c 5100000A 		beq	.L237
 4739 1850 0A40A0E1 		mov	r4, sl
 4740 1854 02A0A0E1 		mov	sl, r2
 4741 1858 0420A0E1 		mov	r2, r4
 4742 185c 180000EA 		b	.L178
 4743              	.LVL135:
 4744              	.L252:
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4745              		.loc 1 276 0
 4746 1860 028912E2 		ands	r8, r2, #32768
 4747 1864 0080E013 		mvnne	r8, #0
 4748 1868 000053E3 		cmp	r3, #0
 4749 186c A8EEA0E1 		mov	lr, r8, lsr #29
 4750 1870 0340A0A1 		movge	r4, r3
 4751 1874 0040A0B1 		movlt	r4, r0
 4752 1878 C44181E0 		add	r4, r1, r4, asr #3
 4753 187c 0E0083E0 		add	r0, r3, lr
 4754 1880 073000E2 		and	r3, r0, #7
 4755 1884 0441A0E1 		mov	r4, r4, asl #2
 4756 1888 03E06EE0 		rsb	lr, lr, r3
 4757 188c 000094E5 		ldr	r0, [r4, #0]
 4758 1890 0E81A0E1 		mov	r8, lr, asl #2
 4759 1894 3C08C0E1 		bic	r0, r0, ip, lsr r8
 4760 1898 07306EE2 		rsb	r3, lr, #7
 4761 189c 03E1A0E1 		mov	lr, r3, asl #2
 4762 18a0 178E80E1 		orr	r8, r0, r7, asl lr
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4763              		.loc 1 274 0
 4764 18a4 012082E2 		add	r2, r2, #1
 4765 18a8 0208A0E1 		mov	r0, r2, asl #16
 4766 18ac 2008A0E1 		mov	r0, r0, lsr #16
 4767              	.LVL136:
 4768 18b0 0038A0E1 		mov	r3, r0, asl #16
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4769              		.loc 1 276 0
 4770 18b4 008084E5 		str	r8, [r4, #0]
 4771 18b8 0320A0E1 		mov	r2, r3
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4772              		.loc 1 274 0
 4773 18bc 016086E2 		add	r6, r6, #1
 4774 18c0 4338A0E1 		mov	r3, r3, asr #16
 4775              	.LVL137:
 4776              	.L178:
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4777              		.loc 1 276 0
 4778 18c4 000053E3 		cmp	r3, #0
 4779 18c8 C2EFA0E1 		mov	lr, r2, asr #31
 4780 18cc 078083E2 		add	r8, r3, #7
 4781 18d0 AE2EA0E1 		mov	r2, lr, lsr #29
 4782 18d4 0380A0A1 		movge	r8, r3
 4783 18d8 C84181E0 		add	r4, r1, r8, asr #3
 4784 18dc 023083E0 		add	r3, r3, r2
 4785 18e0 0441A0E1 		mov	r4, r4, asl #2
 4786 18e4 07E003E2 		and	lr, r3, #7
 4787 18e8 008094E5 		ldr	r8, [r4, #0]
 4788 18ec 0E3062E0 		rsb	r3, r2, lr
 4789 18f0 0321A0E1 		mov	r2, r3, asl #2
 4790 18f4 3CE2C8E1 		bic	lr, r8, ip, lsr r2
 4791 18f8 073063E2 		rsb	r3, r3, #7
 4792 18fc 0381A0E1 		mov	r8, r3, asl #2
 4793 1900 17888EE1 		orr	r8, lr, r7, asl r8
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4794              		.loc 1 274 0
 4795 1904 010080E2 		add	r0, r0, #1
 4796 1908 0028A0E1 		mov	r2, r0, asl #16
 4797 190c 2228A0E1 		mov	r2, r2, lsr #16
 4798 1910 016086E2 		add	r6, r6, #1
 4799 1914 0238A0E1 		mov	r3, r2, asl #16
 4800 1918 4338A0E1 		mov	r3, r3, asr #16
 273:../lcd.c      ****             for( wpx = wNextx - usWidth / 2;
 4801              		.loc 1 273 0
 4802 191c 050056E1 		cmp	r6, r5
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4803              		.loc 1 276 0
 4804 1920 070083E2 		add	r0, r3, #7
 4805 1924 008084E5 		str	r8, [r4, #0]
 273:../lcd.c      ****             for( wpx = wNextx - usWidth / 2;
 4806              		.loc 1 273 0
 4807 1928 CCFFFF1A 		bne	.L252
 4808 192c 0A20A0E1 		mov	r2, sl
 4809              	.L177:
 259:../lcd.c      ****              wCury <= wNexty; wCury++, wNexty--, decision += usDx )
 4810              		.loc 1 259 0
 4811 1930 3C501BE5 		ldr	r5, [fp, #-60]
 4812 1934 40601BE5 		ldr	r6, [fp, #-64]
 4813 1938 01E085E2 		add	lr, r5, #1
 4814 193c 013046E2 		sub	r3, r6, #1
 4815 1940 0E08A0E1 		mov	r0, lr, asl #16
 4816              	.LVL138:
 4817 1944 03E8A0E1 		mov	lr, r3, asl #16
 4818              	.LVL139:
 257:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 4819              		.loc 1 257 0
 4820 1948 0E0050E1 		cmp	r0, lr
 4821 194c 2E38A0E1 		mov	r3, lr, lsr #16
 4822 1950 2008A0E1 		mov	r0, r0, lsr #16
 4823              	.LVL140:
 259:../lcd.c      ****              wCury <= wNexty; wCury++, wNexty--, decision += usDx )
 4824              		.loc 1 259 0
 4825 1954 281041E2 		sub	r1, r1, #40
 4826 1958 282082E2 		add	r2, r2, #40
 257:../lcd.c      ****         for( wCurx = usX0, wCury = usY0, wNextx = usX1,
 4827              		.loc 1 257 0
 4828 195c 3C000BE5 		str	r0, [fp, #-60]
 4829 1960 40300BE5 		str	r3, [fp, #-64]
 4830 1964 440000CA 		bgt	.L153
 259:../lcd.c      ****              wCury <= wNexty; wCury++, wNexty--, decision += usDx )
 4831              		.loc 1 259 0
 4832 1968 30401BE5 		ldr	r4, [fp, #-48]
 4833 196c 4C001BE5 		ldr	r0, [fp, #-76]
 4834 1970 04A080E0 		add	sl, r0, r4
 4835 1974 0A68A0E1 		mov	r6, sl, asl #16
 4836 1978 2658A0E1 		mov	r5, r6, lsr #16
 4837 197c 30500BE5 		str	r5, [fp, #-48]
 4838 1980 0540A0E1 		mov	r4, r5
 4839 1984 47FFFFEA 		b	.L179
 4840              	.LVL141:
 4841              	.L250:
 221:../lcd.c      **** 	if( ((usDx >= usDy && (usX0 > usX1)) ||
 4842              		.loc 1 221 0 discriminator 1
 4843 1988 000051E1 		cmp	r1, r0
 4844 198c 060054C1 		cmpgt	r4, r6
 4845 1990 09FEFFDA 		ble	.L166
 4846 1994 FEFDFFEA 		b	.L165
 4847              	.LVL142:
 4848              	.L237:
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4849              		.loc 1 276 0
 4850 1998 000053E3 		cmp	r3, #0
 4851 199c 076083E2 		add	r6, r3, #7
 4852 19a0 CA8FA0E1 		mov	r8, sl, asr #31
 4853 19a4 0360A0A1 		movge	r6, r3
 4854 19a8 A8EEA0E1 		mov	lr, r8, lsr #29
 4855 19ac 86A6A0E1 		mov	sl, r6, asl #13
 4856 19b0 0E3083E0 		add	r3, r3, lr
 4857 19b4 4A4881E0 		add	r4, r1, sl, asr #16
 4858 19b8 078003E2 		and	r8, r3, #7
 4859 19bc 0441A0E1 		mov	r4, r4, asl #2
 4860 19c0 08E06EE0 		rsb	lr, lr, r8
 4861 19c4 006094E5 		ldr	r6, [r4, #0]
 4862 19c8 0EA1A0E1 		mov	sl, lr, asl #2
 4863 19cc 3C8AC6E1 		bic	r8, r6, ip, lsr sl
 4864 19d0 07306EE2 		rsb	r3, lr, #7
 4865 19d4 03A1A0E1 		mov	sl, r3, asl #2
 4866 19d8 176A88E1 		orr	r6, r8, r7, asl sl
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4867              		.loc 1 274 0
 4868 19dc 01E080E2 		add	lr, r0, #1
 4869 19e0 0E08A0E1 		mov	r0, lr, asl #16
 4870              	.LVL143:
 4871 19e4 2008A0E1 		mov	r0, r0, lsr #16
 4872              	.LVL144:
 4873 19e8 0038A0E1 		mov	r3, r0, asl #16
 4874 19ec 03A0A0E1 		mov	sl, r3
 4875 19f0 0A80A0E1 		mov	r8, sl
 276:../lcd.c      ****                 (LCD_PutPixel(wpx, wNexty, ucColor));
 4876              		.loc 1 276 0
 4877 19f4 006084E5 		str	r6, [r4, #0]
 4878 19f8 02A0A0E1 		mov	sl, r2
 274:../lcd.c      ****                  wpx <= wNextx + usWidth / 2; wpx++ )
 4879              		.loc 1 274 0
 4880 19fc 0160A0E3 		mov	r6, #1
 4881 1a00 4338A0E1 		mov	r3, r3, asr #16
 4882 1a04 0820A0E1 		mov	r2, r8
 4883 1a08 ADFFFFEA 		b	.L178
 4884              	.L236:
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4885              		.loc 1 270 0
 4886 1a0c 000053E3 		cmp	r3, #0
 4887 1a10 076083E2 		add	r6, r3, #7
 4888 1a14 CA8FA0E1 		mov	r8, sl, asr #31
 4889 1a18 0360A0A1 		movge	r6, r3
 4890 1a1c A8AEA0E1 		mov	sl, r8, lsr #29
 4891 1a20 8646A0E1 		mov	r4, r6, asl #13
 4892 1a24 0A3083E0 		add	r3, r3, sl
 4893 1a28 44E882E0 		add	lr, r2, r4, asr #16
 4894 1a2c 078003E2 		and	r8, r3, #7
 4895 1a30 0EE1A0E1 		mov	lr, lr, asl #2
 4896 1a34 08A06AE0 		rsb	sl, sl, r8
 4897 1a38 00609EE5 		ldr	r6, [lr, #0]
 4898 1a3c 0A41A0E1 		mov	r4, sl, asl #2
 4899 1a40 3C84C6E1 		bic	r8, r6, ip, lsr r4
 4900 1a44 07306AE2 		rsb	r3, sl, #7
 4901 1a48 0341A0E1 		mov	r4, r3, asl #2
 4902 1a4c 17A488E1 		orr	sl, r8, r7, asl r4
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4903              		.loc 1 268 0
 4904 1a50 016080E2 		add	r6, r0, #1
 4905 1a54 0608A0E1 		mov	r0, r6, asl #16
 4906              	.LVL145:
 4907 1a58 2008A0E1 		mov	r0, r0, lsr #16
 4908              	.LVL146:
 4909 1a5c 0038A0E1 		mov	r3, r0, asl #16
 4910 1a60 0340A0E1 		mov	r4, r3
 270:../lcd.c      ****                 (LCD_PutPixel(wpx, wCury, ucColor));
 4911              		.loc 1 270 0
 4912 1a64 00A08EE5 		str	sl, [lr, #0]
 268:../lcd.c      ****                  wpx <= wCurx + usWidth / 2; wpx++ )
 4913              		.loc 1 268 0
 4914 1a68 0160A0E3 		mov	r6, #1
 4915 1a6c 01A0A0E1 		mov	sl, r1
 4916 1a70 4338A0E1 		mov	r3, r3, asr #16
 4917 1a74 0410A0E1 		mov	r1, r4
 4918 1a78 4AFFFFEA 		b	.L176
 4919              	.LVL147:
 4920              	.L153:
 280:../lcd.c      **** }
 4921              		.loc 1 280 0
 4922 1a7c 28D04BE2 		sub	sp, fp, #40
 4923 1a80 F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 4924 1a84 1EFF2FE1 		bx	lr
 4925              	.LVL148:
 4926              	.L248:
 4927              	.LBB26:
 4928              	.LBB27:
 297:../lcd.c      ****     if( usX1 < usX0 )
 4929              		.loc 1 297 0
 4930 1a88 020050E1 		cmp	r0, r2
 4931 1a8c 080000DA 		ble	.L155
 299:../lcd.c      ****         GUISWAP (usX1, usX0);
 4932              		.loc 1 299 0
 4933 1a90 008022E0 		eor	r8, r2, r0
 4934 1a94 0828A0E1 		mov	r2, r8, asl #16
 4935              	.LVL149:
 4936 1a98 2218A0E1 		mov	r1, r2, lsr #16
 4937              	.LVL150:
 4938 1a9c 010020E0 		eor	r0, r0, r1
 4939              	.LVL151:
 4940 1aa0 0058A0E1 		mov	r5, r0, asl #16
 4941              	.LVL152:
 4942 1aa4 4558A0E1 		mov	r5, r5, asr #16
 4943              	.LVL153:
 4944 1aa8 013025E0 		eor	r3, r5, r1
 4945              	.LVL154:
 4946 1aac 0388A0E1 		mov	r8, r3, asl #16
 4947 1ab0 4888A0E1 		mov	r8, r8, asr #16
 4948              	.LVL155:
 4949              	.L155:
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 4950              		.loc 1 302 0
 4951 1ab4 00005CE3 		cmp	ip, #0
 4952 1ab8 EFFFFF0A 		beq	.L153
 4953 1abc 0888A0E1 		mov	r8, r8, asl #16
 4954              	.LVL156:
 4955 1ac0 011888E2 		add	r1, r8, #65536
 4956 1ac4 212865E0 		rsb	r2, r5, r1, lsr #16
 4957 1ac8 0238A0E1 		mov	r3, r2, asl #16
 4958 1acc 2388A0E1 		mov	r8, r3, lsr #16
 4959 1ad0 01A048E2 		sub	sl, r8, #1
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4960              		.loc 1 200 0
 4961 1ad4 0A08A0E1 		mov	r0, sl, asl #16
 4962 1ad8 4098A0E1 		mov	r9, r0, asr #16
 4963 1adc 30900BE5 		str	r9, [fp, #-48]
 4964 1ae0 044184E0 		add	r4, r4, r4, asl #2
 4965              	.LVL157:
 4966 1ae4 30101BE5 		ldr	r1, [fp, #-48]
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 4967              		.loc 1 302 0
 4968 1ae8 01C04CE2 		sub	ip, ip, #1
 4969              	.LVL158:
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4970              		.loc 1 200 0
 4971 1aec 8461A0E1 		mov	r6, r4, asl #3
 4972 1af0 013048E2 		sub	r3, r8, #1
 4973 1af4 012045E2 		sub	r2, r5, #1
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 4974              		.loc 1 302 0
 4975 1af8 0CA8A0E1 		mov	sl, ip, asl #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4976              		.loc 1 200 0
 4977 1afc C30786E2 		add	r0, r6, #51118080
 4978 1b00 0898A0E1 		mov	r9, r8, asl #16
 4979 1b04 016082E0 		add	r6, r2, r1
 4980 1b08 03C8A0E1 		mov	ip, r3, asl #16
 4981              	.LVL159:
 4982 1b0c 2C8846E0 		sub	r8, r6, ip, lsr #16
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 4983              		.loc 1 302 0
 4984 1b10 2AA8A0E1 		mov	sl, sl, lsr #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4985              		.loc 1 200 0
 4986 1b14 960D80E2 		add	r0, r0, #9600
 4987 1b18 4998A0E1 		mov	r9, r9, asr #16
 4988 1b1c 0560A0E1 		mov	r6, r5
 4989              	.LVL160:
 4990              	.L159:
 305:../lcd.c      ****         while( (usLen--) > 0 )
 4991              		.loc 1 305 0
 4992 1b20 000059E3 		cmp	r9, #0
 4993 1b24 540000DA 		ble	.L157
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 4994              		.loc 1 200 0
 4995 1b28 30201BE5 		ldr	r2, [fp, #-48]
 4996 1b2c 062082E0 		add	r2, r2, r6
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 4997              		.loc 1 307 0
 4998 1b30 C23FA0E1 		mov	r3, r2, asr #31
 4999 1b34 000052E3 		cmp	r2, #0
 5000 1b38 A3CEA0E1 		mov	ip, r3, lsr #29
 5001 1b3c 074082E2 		add	r4, r2, #7
 5002 1b40 0240A0A1 		movge	r4, r2
 5003 1b44 0C5082E0 		add	r5, r2, ip
 5004 1b48 C41180E0 		add	r1, r0, r4, asr #3
 5005 1b4c 0111A0E1 		mov	r1, r1, asl #2
 5006 1b50 073005E2 		and	r3, r5, #7
 5007 1b54 03306CE0 		rsb	r3, ip, r3
 5008 1b58 004091E5 		ldr	r4, [r1, #0]
 5009 1b5c 0351A0E1 		mov	r5, r3, asl #2
 5010 1b60 0FC2A0E3 		mov	ip, #-268435456
 5011 1b64 3C55C4E1 		bic	r5, r4, ip, lsr r5
 5012 1b68 073063E2 		rsb	r3, r3, #7
 5013 1b6c 0341A0E1 		mov	r4, r3, asl #2
 5014 1b70 174485E1 		orr	r4, r5, r7, asl r4
 5015 1b74 013042E2 		sub	r3, r2, #1
 5016 1b78 085062E0 		rsb	r5, r2, r8
 5017 1b7c 0550E0E1 		mvn	r5, r5
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5018              		.loc 1 305 0
 5019 1b80 080053E1 		cmp	r3, r8
 5020 1b84 015005E2 		and	r5, r5, #1
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5021              		.loc 1 307 0
 5022 1b88 004081E5 		str	r4, [r1, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5023              		.loc 1 305 0
 5024 1b8c 3A00000A 		beq	.L157
 5025 1b90 000055E3 		cmp	r5, #0
 5026 1b94 1300000A 		beq	.L158
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5027              		.loc 1 307 0
 5028 1b98 000053E3 		cmp	r3, #0
 5029 1b9c C35FA0E1 		mov	r5, r3, asr #31
 5030 1ba0 A54EA0E1 		mov	r4, r5, lsr #29
 5031 1ba4 0320A0A1 		movge	r2, r3
 5032 1ba8 062082B2 		addlt	r2, r2, #6
 5033 1bac 041083E0 		add	r1, r3, r4
 5034 1bb0 C22180E0 		add	r2, r0, r2, asr #3
 5035 1bb4 0221A0E1 		mov	r2, r2, asl #2
 5036 1bb8 075001E2 		and	r5, r1, #7
 5037 1bbc 051064E0 		rsb	r1, r4, r5
 5038 1bc0 004092E5 		ldr	r4, [r2, #0]
 5039 1bc4 0151A0E1 		mov	r5, r1, asl #2
 5040 1bc8 3C45C4E1 		bic	r4, r4, ip, lsr r5
 5041 1bcc 071061E2 		rsb	r1, r1, #7
 5042 1bd0 0111A0E1 		mov	r1, r1, asl #2
 5043 1bd4 174184E1 		orr	r4, r4, r7, asl r1
 5044 1bd8 013043E2 		sub	r3, r3, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5045              		.loc 1 305 0
 5046 1bdc 080053E1 		cmp	r3, r8
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5047              		.loc 1 307 0
 5048 1be0 004082E5 		str	r4, [r2, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5049              		.loc 1 305 0
 5050 1be4 2400000A 		beq	.L157
 5051              	.L158:
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5052              		.loc 1 307 0
 5053 1be8 000053E3 		cmp	r3, #0
 5054 1bec C35FA0E1 		mov	r5, r3, asr #31
 5055 1bf0 072083E2 		add	r2, r3, #7
 5056 1bf4 A55EA0E1 		mov	r5, r5, lsr #29
 5057 1bf8 0320A0A1 		movge	r2, r3
 5058 1bfc 054083E0 		add	r4, r3, r5
 5059 1c00 C21180E0 		add	r1, r0, r2, asr #3
 5060 1c04 0111A0E1 		mov	r1, r1, asl #2
 5061 1c08 072004E2 		and	r2, r4, #7
 5062 1c0c 022065E0 		rsb	r2, r5, r2
 5063 1c10 004091E5 		ldr	r4, [r1, #0]
 5064 1c14 0251A0E1 		mov	r5, r2, asl #2
 5065 1c18 3C55C4E1 		bic	r5, r4, ip, lsr r5
 5066 1c1c 074062E2 		rsb	r4, r2, #7
 5067 1c20 0421A0E1 		mov	r2, r4, asl #2
 5068 1c24 174285E1 		orr	r4, r5, r7, asl r2
 5069 1c28 012053E2 		subs	r2, r3, #1
 5070 1c2c C25FA0E1 		mov	r5, r2, asr #31
 5071 1c30 06308342 		addmi	r3, r3, #6
 5072 1c34 0230A051 		movpl	r3, r2
 5073 1c38 A55EA0E1 		mov	r5, r5, lsr #29
 5074 1c3c 004081E5 		str	r4, [r1, #0]
 5075 1c40 054082E0 		add	r4, r2, r5
 5076 1c44 C31180E0 		add	r1, r0, r3, asr #3
 5077 1c48 0111A0E1 		mov	r1, r1, asl #2
 5078 1c4c 073004E2 		and	r3, r4, #7
 5079 1c50 035065E0 		rsb	r5, r5, r3
 5080 1c54 003091E5 		ldr	r3, [r1, #0]
 5081 1c58 0541A0E1 		mov	r4, r5, asl #2
 5082 1c5c 3C34C3E1 		bic	r3, r3, ip, lsr r4
 5083 1c60 075065E2 		rsb	r5, r5, #7
 5084 1c64 0541A0E1 		mov	r4, r5, asl #2
 5085 1c68 174483E1 		orr	r4, r3, r7, asl r4
 5086 1c6c 013042E2 		sub	r3, r2, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5087              		.loc 1 305 0
 5088 1c70 080053E1 		cmp	r3, r8
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5089              		.loc 1 307 0
 5090 1c74 004081E5 		str	r4, [r1, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5091              		.loc 1 305 0
 5092 1c78 DAFFFF1A 		bne	.L158
 5093              	.L157:
 5094              	.LVL161:
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5095              		.loc 1 302 0
 5096 1c7c 00005AE3 		cmp	sl, #0
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5097              		.loc 1 305 0
 5098 1c80 280080E2 		add	r0, r0, #40
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5099              		.loc 1 302 0
 5100 1c84 7CFFFF0A 		beq	.L153
 5101 1c88 01C04AE2 		sub	ip, sl, #1
 5102 1c8c 0CA8A0E1 		mov	sl, ip, asl #16
 5103              	.LVL162:
 5104 1c90 2AA8A0E1 		mov	sl, sl, lsr #16
 5105 1c94 A1FFFFEA 		b	.L159
 5106              	.LVL163:
 5107              	.L249:
 5108              	.LBE27:
 5109              	.LBE26:
 5110              	.LBB28:
 5111              	.LBB29:
 328:../lcd.c      ****     if( usY1 < usY0 )
 5112              		.loc 1 328 0
 5113 1c98 030051E1 		cmp	r1, r3
 5114 1c9c 740000CA 		bgt	.L253
 5115              	.LVL164:
 5116              	.L161:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5117              		.loc 1 333 0
 5118 1ca0 00005CE3 		cmp	ip, #0
 5119 1ca4 74FFFF0A 		beq	.L153
 5120 1ca8 0488A0E1 		mov	r8, r4, asl #16
 5121 1cac 0628A0E1 		mov	r2, r6, asl #16
 5122 1cb0 011882E2 		add	r1, r2, #65536
 5123 1cb4 2838A0E1 		mov	r3, r8, lsr #16
 5124 1cb8 210863E0 		rsb	r0, r3, r1, lsr #16
 5125 1cbc 00A8A0E1 		mov	sl, r0, asl #16
 5126 1cc0 2A98A0E1 		mov	r9, sl, lsr #16
 5127 1cc4 018049E2 		sub	r8, r9, #1
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5128              		.loc 1 200 0
 5129 1cc8 0828A0E1 		mov	r2, r8, asl #16
 5130 1ccc 421884E0 		add	r1, r4, r2, asr #16
 5131 1cd0 014181E0 		add	r4, r1, r1, asl #2
 5132              	.LVL165:
 5133 1cd4 8441A0E1 		mov	r4, r4, asl #3
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5134              		.loc 1 333 0
 5135 1cd8 01304CE2 		sub	r3, ip, #1
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5136              		.loc 1 200 0
 5137 1cdc C3C784E2 		add	ip, r4, #51118080
 5138              	.LVL166:
 5139 1ce0 968D8CE2 		add	r8, ip, #9600
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5140              		.loc 1 333 0
 5141 1ce4 30900BE5 		str	r9, [fp, #-48]
 5142 1ce8 03A8A0E1 		mov	sl, r3, asl #16
 5143 1cec 0998A0E1 		mov	r9, r9, asl #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5144              		.loc 1 200 0
 5145 1cf0 34400BE5 		str	r4, [fp, #-52]
 5146 1cf4 38800BE5 		str	r8, [fp, #-56]
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5147              		.loc 1 333 0
 5148 1cf8 2AA8A0E1 		mov	sl, sl, lsr #16
 5149 1cfc 4998A0E1 		mov	r9, r9, asr #16
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5150              		.loc 1 200 0
 5151 1d00 0780A0E1 		mov	r8, r7
 5152              	.LVL167:
 5153              	.L164:
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5154              		.loc 1 336 0
 5155 1d04 000059E3 		cmp	r9, #0
 5156 1d08 500000DA 		ble	.L162
 5157 1d0c C56FA0E1 		mov	r6, r5, asr #31
 5158 1d10 A62EA0E1 		mov	r2, r6, lsr #29
 5159 1d14 023085E0 		add	r3, r5, r2
 5160 1d18 074003E2 		and	r4, r3, #7
 5161 1d1c 04C062E0 		rsb	ip, r2, r4
 5162 1d20 07606CE2 		rsb	r6, ip, #7
 5163 1d24 0C11A0E1 		mov	r1, ip, asl #2
 5164 1d28 0F02A0E3 		mov	r0, #-268435456
 5165 1d2c 3011E0E1 		mvn	r1, r0, lsr r1
 5166 1d30 0621A0E1 		mov	r2, r6, asl #2
 5167 1d34 1822A0E1 		mov	r2, r8, asl r2
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5168              		.loc 1 200 0
 5169 1d38 30301BE5 		ldr	r3, [fp, #-48]
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5170              		.loc 1 336 0
 5171 1d3c 000055E3 		cmp	r5, #0
 5172 1d40 074085E2 		add	r4, r5, #7
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5173              		.loc 1 200 0
 5174 1d44 01C043E2 		sub	ip, r3, #1
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5175              		.loc 1 336 0
 5176 1d48 0540A0A1 		movge	r4, r5
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5177              		.loc 1 200 0
 5178 1d4c 0C68A0E1 		mov	r6, ip, asl #16
 5179 1d50 38301BE5 		ldr	r3, [fp, #-56]
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5180              		.loc 1 336 0
 5181 1d54 8406A0E1 		mov	r0, r4, asl #13
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5182              		.loc 1 200 0
 5183 1d58 4008A0E1 		mov	r0, r0, asr #16
 5184 1d5c 2648A0E1 		mov	r4, r6, lsr #16
 5185 1d60 00C083E0 		add	ip, r3, r0
 5186 1d64 046184E0 		add	r6, r4, r4, asl #2
 5187 1d68 2C319FE5 		ldr	r3, .L254
 5188 1d6c 8641A0E1 		mov	r4, r6, asl #3
 5189 1d70 0CC1A0E1 		mov	ip, ip, asl #2
 5190 1d74 033064E0 		rsb	r3, r4, r3
 5191 1d78 34401BE5 		ldr	r4, [fp, #-52]
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5192              		.loc 1 338 0
 5193 1d7c 00609CE5 		ldr	r6, [ip, #0]
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5194              		.loc 1 200 0
 5195 1d80 043083E0 		add	r3, r3, r4
 5196 1d84 000083E0 		add	r0, r3, r0
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5197              		.loc 1 338 0
 5198 1d88 066001E0 		and	r6, r1, r6
 200:../lcd.c      **** void Lcd_Draw_Line(INT16 usX0, INT16 usY0, INT16 usX1, INT16 usY1, INT8U ucColor, INT16U usWidth)
 5199              		.loc 1 200 0
 5200 1d8c 0001A0E1 		mov	r0, r0, asl #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5201              		.loc 1 338 0
 5202 1d90 0C30A0E1 		mov	r3, ip
 5203 1d94 066082E1 		orr	r6, r2, r6
 5204 1d98 0C4060E0 		rsb	r4, r0, ip
 5205 1d9c A06003E4 		str	r6, [r3], #-160
 5206 1da0 A04044E2 		sub	r4, r4, #160
 5207 1da4 A442A0E1 		mov	r4, r4, lsr #5
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5208              		.loc 1 336 0
 5209 1da8 000053E1 		cmp	r3, r0
 5210 1dac 034004E2 		and	r4, r4, #3
 5211 1db0 2600000A 		beq	.L162
 5212 1db4 000054E3 		cmp	r4, #0
 5213 1db8 1100000A 		beq	.L163
 5214 1dbc 010054E3 		cmp	r4, #1
 5215 1dc0 0900000A 		beq	.L230
 5216 1dc4 020054E3 		cmp	r4, #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5217              		.loc 1 338 0
 5218 1dc8 A0301C15 		ldrne	r3, [ip, #-160]
 5219 1dcc 03300110 		andne	r3, r1, r3
 5220 1dd0 03308211 		orrne	r3, r2, r3
 5221 1dd4 A0300C15 		strne	r3, [ip, #-160]
 5222 1dd8 053D4C12 		subne	r3, ip, #320
 5223 1ddc 00C093E5 		ldr	ip, [r3, #0]
 5224 1de0 0CC001E0 		and	ip, r1, ip
 5225 1de4 0CC082E1 		orr	ip, r2, ip
 5226 1de8 A0C003E4 		str	ip, [r3], #-160
 5227              	.L230:
 5228 1dec 00C093E5 		ldr	ip, [r3, #0]
 5229 1df0 0CC001E0 		and	ip, r1, ip
 5230 1df4 0CC082E1 		orr	ip, r2, ip
 5231 1df8 A0C003E4 		str	ip, [r3], #-160
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5232              		.loc 1 336 0
 5233 1dfc 000053E1 		cmp	r3, r0
 5234 1e00 1200000A 		beq	.L162
 5235              	.L163:
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5236              		.loc 1 338 0
 5237 1e04 007093E5 		ldr	r7, [r3, #0]
 5238 1e08 A06013E5 		ldr	r6, [r3, #-160]
 5239 1e0c 404113E5 		ldr	r4, [r3, #-320]
 5240 1e10 E0C113E5 		ldr	ip, [r3, #-480]
 5241 1e14 077001E0 		and	r7, r1, r7
 5242 1e18 066001E0 		and	r6, r1, r6
 5243 1e1c 044001E0 		and	r4, r1, r4
 5244 1e20 0CC001E0 		and	ip, r1, ip
 5245 1e24 077082E1 		orr	r7, r2, r7
 5246 1e28 066082E1 		orr	r6, r2, r6
 5247 1e2c 044082E1 		orr	r4, r2, r4
 5248 1e30 0CC082E1 		orr	ip, r2, ip
 5249 1e34 007083E5 		str	r7, [r3, #0]
 5250 1e38 A06003E5 		str	r6, [r3, #-160]
 5251 1e3c 404103E5 		str	r4, [r3, #-320]
 5252 1e40 E0C103E5 		str	ip, [r3, #-480]
 5253 1e44 0A3D43E2 		sub	r3, r3, #640
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5254              		.loc 1 336 0
 5255 1e48 000053E1 		cmp	r3, r0
 5256 1e4c ECFFFF1A 		bne	.L163
 5257              	.L162:
 5258              	.LVL168:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5259              		.loc 1 333 0
 5260 1e50 00005AE3 		cmp	sl, #0
 5261 1e54 08FFFF0A 		beq	.L153
 340:../lcd.c      ****         usX0++;
 5262              		.loc 1 340 0
 5263 1e58 010085E2 		add	r0, r5, #1
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5264              		.loc 1 333 0
 5265 1e5c 01104AE2 		sub	r1, sl, #1
 340:../lcd.c      ****         usX0++;
 5266              		.loc 1 340 0
 5267 1e60 0058A0E1 		mov	r5, r0, asl #16
 5268              	.LVL169:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5269              		.loc 1 333 0
 5270 1e64 01A8A0E1 		mov	sl, r1, asl #16
 5271              	.LVL170:
 340:../lcd.c      ****         usX0++;
 5272              		.loc 1 340 0
 5273 1e68 4558A0E1 		mov	r5, r5, asr #16
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5274              		.loc 1 333 0
 5275 1e6c 2AA8A0E1 		mov	sl, sl, lsr #16
 5276 1e70 A3FFFFEA 		b	.L164
 5277              	.LVL171:
 5278              	.L253:
 330:../lcd.c      ****         GUISWAP (usY1, usY0);
 5279              		.loc 1 330 0
 5280 1e74 016023E0 		eor	r6, r3, r1
 5281 1e78 0628A0E1 		mov	r2, r6, asl #16
 5282              	.LVL172:
 5283 1e7c 2238A0E1 		mov	r3, r2, lsr #16
 5284              	.LVL173:
 5285 1e80 031021E0 		eor	r1, r1, r3
 5286              	.LVL174:
 5287 1e84 0148A0E1 		mov	r4, r1, asl #16
 5288              	.LVL175:
 5289 1e88 4448A0E1 		mov	r4, r4, asr #16
 5290              	.LVL176:
 5291 1e8c 030024E0 		eor	r0, r4, r3
 5292              	.LVL177:
 5293 1e90 0068A0E1 		mov	r6, r0, asl #16
 5294 1e94 4668A0E1 		mov	r6, r6, asr #16
 5295              	.LVL178:
 5296 1e98 80FFFFEA 		b	.L161
 5297              	.L255:
 5298              		.align	2
 5299              	.L254:
 5300 1e9c 58250C03 		.word	51127640
 5301              	.LBE29:
 5302              	.LBE28:
 5303              		.cfi_endproc
 5304              	.LFE6:
 5306              		.align	2
 5307              		.global	Lcd_Draw_HLine
 5309              	Lcd_Draw_HLine:
 5310              	.LFB7:
 294:../lcd.c      **** {
 5311              		.loc 1 294 0
 5312              		.cfi_startproc
 5313              		@ Function supports interworking.
 5314              		@ args = 4, pretend = 0, frame = 8
 5315              		@ frame_needed = 0, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
 5317              	.LVL179:
 5318 1ea0 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 5319              	.LCFI8:
 5320              		.cfi_def_cfa_offset 28
 5321 1ea4 0CD04DE2 		sub	sp, sp, #12
 5322              	.LCFI9:
 5323              		.cfi_def_cfa_offset 40
 297:../lcd.c      ****     if( usX1 < usX0 )
 5324              		.loc 1 297 0
 5325 1ea8 000051E1 		cmp	r1, r0
 294:../lcd.c      **** {
 5326              		.loc 1 294 0
 5327 1eac B8C2DDE1 		ldrh	ip, [sp, #40]
 299:../lcd.c      ****         GUISWAP (usX1, usX0);
 5328              		.loc 1 299 0
 5329 1eb0 004021B0 		eorlt	r4, r1, r0
 5330              		.cfi_offset 10, -4
 5331              		.cfi_offset 9, -8
 5332              		.cfi_offset 8, -12
 5333              		.cfi_offset 7, -16
 5334              		.cfi_offset 6, -20
 5335              		.cfi_offset 5, -24
 5336              		.cfi_offset 4, -28
 5337 1eb4 0100A0B1 		movlt	r0, r1
 5338              	.LVL180:
 5339 1eb8 041021B0 		eorlt	r1, r1, r4
 5340              	.LVL181:
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5341              		.loc 1 302 0
 5342 1ebc 00005CE3 		cmp	ip, #0
 5343 1ec0 7400000A 		beq	.L256
 5344 1ec4 01A8A0E1 		mov	sl, r1, asl #16
 5345 1ec8 01488AE2 		add	r4, sl, #65536
 5346 1ecc 241860E0 		rsb	r1, r0, r4, lsr #16
 5347              	.LVL182:
 5348 1ed0 0158A0E1 		mov	r5, r1, asl #16
 5349 1ed4 2518A0E1 		mov	r1, r5, lsr #16
 5350 1ed8 01A041E2 		sub	sl, r1, #1
 293:../lcd.c      **** void Lcd_Draw_HLine(INT16 usX0, INT16 usX1, INT16 usY0, INT8U ucColor, INT16U usWidth)
 5351              		.loc 1 293 0
 5352 1edc 028182E0 		add	r8, r2, r2, asl #2
 5353 1ee0 0A58A0E1 		mov	r5, sl, asl #16
 5354 1ee4 0520A0E1 		mov	r2, r5
 5355              	.LVL183:
 5356 1ee8 8841A0E1 		mov	r4, r8, asl #3
 5357 1eec 0118A0E1 		mov	r1, r1, asl #16
 5358 1ef0 018040E2 		sub	r8, r0, #1
 5359 1ef4 4558A0E1 		mov	r5, r5, asr #16
 5360 1ef8 228848E0 		sub	r8, r8, r2, lsr #16
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5361              		.loc 1 302 0
 5362 1efc 01C04CE2 		sub	ip, ip, #1
 5363              	.LVL184:
 5364 1f00 4128A0E1 		mov	r2, r1, asr #16
 5365 1f04 0CA8A0E1 		mov	sl, ip, asl #16
 293:../lcd.c      **** void Lcd_Draw_HLine(INT16 usX0, INT16 usX1, INT16 usY0, INT8U ucColor, INT16U usWidth)
 5366              		.loc 1 293 0
 5367 1f08 C34784E2 		add	r4, r4, #51118080
 5368 1f0c 24008DE8 		stmia	sp, {r2, r5}	@ phole stm
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5369              		.loc 1 302 0
 5370 1f10 2AA8A0E1 		mov	sl, sl, lsr #16
 293:../lcd.c      **** void Lcd_Draw_HLine(INT16 usX0, INT16 usX1, INT16 usY0, INT8U ucColor, INT16U usWidth)
 5371              		.loc 1 293 0
 5372 1f14 964D84E2 		add	r4, r4, #9600
 5373 1f18 058088E0 		add	r8, r8, r5
 5374              	.LVL185:
 5375              	.L261:
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5376              		.loc 1 305 0
 5377 1f1c 000052E3 		cmp	r2, #0
 5378 1f20 540000DA 		ble	.L259
 293:../lcd.c      **** void Lcd_Draw_HLine(INT16 usX0, INT16 usX1, INT16 usY0, INT8U ucColor, INT16U usWidth)
 5379              		.loc 1 293 0
 5380 1f24 04109DE5 		ldr	r1, [sp, #4]
 5381 1f28 001081E0 		add	r1, r1, r0
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5382              		.loc 1 307 0
 5383 1f2c C12FA0E1 		mov	r2, r1, asr #31
 5384 1f30 000051E3 		cmp	r1, #0
 5385 1f34 A25EA0E1 		mov	r5, r2, lsr #29
 5386 1f38 076081E2 		add	r6, r1, #7
 5387 1f3c 0160A0A1 		movge	r6, r1
 5388 1f40 057081E0 		add	r7, r1, r5
 5389 1f44 C6C184E0 		add	ip, r4, r6, asr #3
 5390 1f48 0CC1A0E1 		mov	ip, ip, asl #2
 5391 1f4c 072007E2 		and	r2, r7, #7
 5392 1f50 022065E0 		rsb	r2, r5, r2
 5393 1f54 00609CE5 		ldr	r6, [ip, #0]
 5394 1f58 0271A0E1 		mov	r7, r2, asl #2
 5395 1f5c 0F52A0E3 		mov	r5, #-268435456
 5396 1f60 3577C6E1 		bic	r7, r6, r5, lsr r7
 5397 1f64 072062E2 		rsb	r2, r2, #7
 5398 1f68 0261A0E1 		mov	r6, r2, asl #2
 5399 1f6c 136687E1 		orr	r6, r7, r3, asl r6
 5400 1f70 012041E2 		sub	r2, r1, #1
 5401 1f74 087061E0 		rsb	r7, r1, r8
 5402 1f78 0770E0E1 		mvn	r7, r7
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5403              		.loc 1 305 0
 5404 1f7c 080052E1 		cmp	r2, r8
 5405 1f80 017007E2 		and	r7, r7, #1
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5406              		.loc 1 307 0
 5407 1f84 00608CE5 		str	r6, [ip, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5408              		.loc 1 305 0
 5409 1f88 3A00000A 		beq	.L259
 5410 1f8c 000057E3 		cmp	r7, #0
 5411 1f90 1300000A 		beq	.L260
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5412              		.loc 1 307 0
 5413 1f94 000052E3 		cmp	r2, #0
 5414 1f98 C27FA0E1 		mov	r7, r2, asr #31
 5415 1f9c A76EA0E1 		mov	r6, r7, lsr #29
 5416 1fa0 0210A0A1 		movge	r1, r2
 5417 1fa4 061081B2 		addlt	r1, r1, #6
 5418 1fa8 06C082E0 		add	ip, r2, r6
 5419 1fac C11184E0 		add	r1, r4, r1, asr #3
 5420 1fb0 0111A0E1 		mov	r1, r1, asl #2
 5421 1fb4 07700CE2 		and	r7, ip, #7
 5422 1fb8 07C066E0 		rsb	ip, r6, r7
 5423 1fbc 006091E5 		ldr	r6, [r1, #0]
 5424 1fc0 0C71A0E1 		mov	r7, ip, asl #2
 5425 1fc4 3567C6E1 		bic	r6, r6, r5, lsr r7
 5426 1fc8 07C06CE2 		rsb	ip, ip, #7
 5427 1fcc 0CC1A0E1 		mov	ip, ip, asl #2
 5428 1fd0 136C86E1 		orr	r6, r6, r3, asl ip
 5429 1fd4 012042E2 		sub	r2, r2, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5430              		.loc 1 305 0
 5431 1fd8 080052E1 		cmp	r2, r8
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5432              		.loc 1 307 0
 5433 1fdc 006081E5 		str	r6, [r1, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5434              		.loc 1 305 0
 5435 1fe0 2400000A 		beq	.L259
 5436              	.L260:
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5437              		.loc 1 307 0
 5438 1fe4 C26FA0E1 		mov	r6, r2, asr #31
 5439 1fe8 000052E3 		cmp	r2, #0
 5440 1fec 071082E2 		add	r1, r2, #7
 5441 1ff0 A67EA0E1 		mov	r7, r6, lsr #29
 5442 1ff4 0210A0A1 		movge	r1, r2
 5443 1ff8 079082E0 		add	r9, r2, r7
 5444 1ffc C1C184E0 		add	ip, r4, r1, asr #3
 5445 2000 0CC1A0E1 		mov	ip, ip, asl #2
 5446 2004 076009E2 		and	r6, r9, #7
 5447 2008 067067E0 		rsb	r7, r7, r6
 5448 200c 00909CE5 		ldr	r9, [ip, #0]
 5449 2010 0711A0E1 		mov	r1, r7, asl #2
 5450 2014 3591C9E1 		bic	r9, r9, r5, lsr r1
 5451 2018 076067E2 		rsb	r6, r7, #7
 5452 201c 0611A0E1 		mov	r1, r6, asl #2
 5453 2020 136189E1 		orr	r6, r9, r3, asl r1
 5454 2024 011052E2 		subs	r1, r2, #1
 5455 2028 C17FA0E1 		mov	r7, r1, asr #31
 5456 202c 06208242 		addmi	r2, r2, #6
 5457 2030 0120A051 		movpl	r2, r1
 5458 2034 A77EA0E1 		mov	r7, r7, lsr #29
 5459 2038 00608CE5 		str	r6, [ip, #0]
 5460 203c 076081E0 		add	r6, r1, r7
 5461 2040 C2C184E0 		add	ip, r4, r2, asr #3
 5462 2044 0CC1A0E1 		mov	ip, ip, asl #2
 5463 2048 072006E2 		and	r2, r6, #7
 5464 204c 027067E0 		rsb	r7, r7, r2
 5465 2050 00209CE5 		ldr	r2, [ip, #0]
 5466 2054 0761A0E1 		mov	r6, r7, asl #2
 5467 2058 3526C2E1 		bic	r2, r2, r5, lsr r6
 5468 205c 077067E2 		rsb	r7, r7, #7
 5469 2060 0761A0E1 		mov	r6, r7, asl #2
 5470 2064 136682E1 		orr	r6, r2, r3, asl r6
 5471 2068 012041E2 		sub	r2, r1, #1
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5472              		.loc 1 305 0
 5473 206c 080052E1 		cmp	r2, r8
 307:../lcd.c      ****         	(LCD_PutPixel(usX0 + usLen, usY0, ucColor));
 5474              		.loc 1 307 0
 5475 2070 00608CE5 		str	r6, [ip, #0]
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5476              		.loc 1 305 0
 5477 2074 DAFFFF1A 		bne	.L260
 5478              	.L259:
 5479              	.LVL186:
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5480              		.loc 1 302 0
 5481 2078 00005AE3 		cmp	sl, #0
 305:../lcd.c      ****         while( (usLen--) > 0 )
 5482              		.loc 1 305 0
 5483 207c 284084E2 		add	r4, r4, #40
 302:../lcd.c      ****     while( (usWidth--) > 0 )
 5484              		.loc 1 302 0
 5485 2080 0400000A 		beq	.L256
 5486 2084 01204AE2 		sub	r2, sl, #1
 5487 2088 02A8A0E1 		mov	sl, r2, asl #16
 5488              	.LVL187:
 5489 208c 2AA8A0E1 		mov	sl, sl, lsr #16
 5490 2090 00209DE5 		ldr	r2, [sp, #0]
 5491              	.LVL188:
 5492 2094 A0FFFFEA 		b	.L261
 5493              	.L256:
 311:../lcd.c      **** }
 5494              		.loc 1 311 0
 5495 2098 0CD08DE2 		add	sp, sp, #12
 5496 209c F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 5497 20a0 1EFF2FE1 		bx	lr
 5498              		.cfi_endproc
 5499              	.LFE7:
 5501              		.align	2
 5502              		.global	Lcd_Draw_VLine
 5504              	Lcd_Draw_VLine:
 5505              	.LFB8:
 325:../lcd.c      **** {
 5506              		.loc 1 325 0
 5507              		.cfi_startproc
 5508              		@ Function supports interworking.
 5509              		@ args = 4, pretend = 0, frame = 16
 5510              		@ frame_needed = 0, uses_anonymous_args = 0
 5511              		@ link register save eliminated.
 5512              	.LVL189:
 5513 20a4 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 5514              	.LCFI10:
 5515              		.cfi_def_cfa_offset 28
 5516 20a8 14D04DE2 		sub	sp, sp, #20
 5517              	.LCFI11:
 5518              		.cfi_def_cfa_offset 48
 328:../lcd.c      ****     if( usY1 < usY0 )
 5519              		.loc 1 328 0
 5520 20ac 000051E1 		cmp	r1, r0
 325:../lcd.c      **** {
 5521              		.loc 1 325 0
 5522 20b0 08308DE5 		str	r3, [sp, #8]
 5523 20b4 B033DDE1 		ldrh	r3, [sp, #48]
 5524              	.LVL190:
 330:../lcd.c      ****         GUISWAP (usY1, usY0);
 5525              		.loc 1 330 0
 5526 20b8 00C021B0 		eorlt	ip, r1, r0
 5527 20bc 0100A0B1 		movlt	r0, r1
 5528              	.LVL191:
 5529 20c0 0C1021B0 		eorlt	r1, r1, ip
 5530              	.LVL192:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5531              		.loc 1 333 0
 5532 20c4 000053E3 		cmp	r3, #0
 5533 20c8 6D00000A 		beq	.L270
 5534              		.cfi_offset 10, -4
 5535              		.cfi_offset 9, -8
 5536              		.cfi_offset 8, -12
 5537              		.cfi_offset 7, -16
 5538              		.cfi_offset 6, -20
 5539              		.cfi_offset 5, -24
 5540              		.cfi_offset 4, -28
 5541 20cc 0188A0E1 		mov	r8, r1, asl #16
 5542 20d0 01A888E2 		add	sl, r8, #65536
 5543 20d4 2AC860E0 		rsb	ip, r0, sl, lsr #16
 5544 20d8 0C98A0E1 		mov	r9, ip, asl #16
 5545 20dc 2998A0E1 		mov	r9, r9, lsr #16
 5546 20e0 011049E2 		sub	r1, r9, #1
 5547              	.LVL193:
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5548              		.loc 1 324 0
 5549 20e4 0188A0E1 		mov	r8, r1, asl #16
 5550 20e8 48A880E0 		add	sl, r0, r8, asr #16
 5551 20ec 0A018AE0 		add	r0, sl, sl, asl #2
 5552              	.LVL194:
 5553 20f0 8011A0E1 		mov	r1, r0, asl #3
 5554 20f4 C30781E2 		add	r0, r1, #51118080
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5555              		.loc 1 333 0
 5556 20f8 01C043E2 		sub	ip, r3, #1
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5557              		.loc 1 324 0
 5558 20fc 963D80E2 		add	r3, r0, #9600
 5559              	.LVL195:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5560              		.loc 1 333 0
 5561 2100 0C88A0E1 		mov	r8, ip, asl #16
 5562 2104 09A8A0E1 		mov	sl, r9, asl #16
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5563              		.loc 1 324 0
 5564 2108 04108DE5 		str	r1, [sp, #4]
 5565 210c 0C308DE5 		str	r3, [sp, #12]
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5566              		.loc 1 333 0
 5567 2110 2888A0E1 		mov	r8, r8, lsr #16
 5568 2114 4AA8A0E1 		mov	sl, sl, asr #16
 5569              	.LVL196:
 5570              	.L275:
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5571              		.loc 1 336 0
 5572 2118 00005AE3 		cmp	sl, #0
 5573 211c 4F0000DA 		ble	.L273
 5574 2120 C26FA0E1 		mov	r6, r2, asr #31
 5575 2124 A65EA0E1 		mov	r5, r6, lsr #29
 5576 2128 051082E0 		add	r1, r2, r5
 5577 212c 074001E2 		and	r4, r1, #7
 5578 2130 04C065E0 		rsb	ip, r5, r4
 5579 2134 0C31A0E1 		mov	r3, ip, asl #2
 5580 2138 07606CE2 		rsb	r6, ip, #7
 5581 213c 08509DE5 		ldr	r5, [sp, #8]
 5582 2140 0F02A0E3 		mov	r0, #-268435456
 5583 2144 3003E0E1 		mvn	r0, r0, lsr r3
 5584 2148 0611A0E1 		mov	r1, r6, asl #2
 5585 214c 1511A0E1 		mov	r1, r5, asl r1
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5586              		.loc 1 324 0
 5587 2150 014049E2 		sub	r4, r9, #1
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5588              		.loc 1 336 0
 5589 2154 000052E3 		cmp	r2, #0
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5590              		.loc 1 324 0
 5591 2158 0468A0E1 		mov	r6, r4, asl #16
 5592 215c 0C309DE5 		ldr	r3, [sp, #12]
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5593              		.loc 1 336 0
 5594 2160 07C082E2 		add	ip, r2, #7
 5595 2164 02C0A0A1 		movge	ip, r2
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5596              		.loc 1 324 0
 5597 2168 CCC1A0E1 		mov	ip, ip, asr #3
 5598 216c 2658A0E1 		mov	r5, r6, lsr #16
 5599 2170 0C4083E0 		add	r4, r3, ip
 5600 2174 056185E0 		add	r6, r5, r5, asl #2
 5601 2178 10319FE5 		ldr	r3, .L292
 5602 217c 8651A0E1 		mov	r5, r6, asl #3
 5603 2180 0441A0E1 		mov	r4, r4, asl #2
 5604 2184 033065E0 		rsb	r3, r5, r3
 5605 2188 04509DE5 		ldr	r5, [sp, #4]
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5606              		.loc 1 338 0
 5607 218c 006094E5 		ldr	r6, [r4, #0]
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5608              		.loc 1 324 0
 5609 2190 055083E0 		add	r5, r3, r5
 5610 2194 0C3085E0 		add	r3, r5, ip
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5611              		.loc 1 338 0
 5612 2198 066000E0 		and	r6, r0, r6
 324:../lcd.c      **** void Lcd_Draw_VLine (INT16 usY0, INT16 usY1, INT16 usX0, INT8U ucColor, INT16U usWidth)
 5613              		.loc 1 324 0
 5614 219c 03C1A0E1 		mov	ip, r3, asl #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5615              		.loc 1 338 0
 5616 21a0 066081E1 		orr	r6, r1, r6
 5617 21a4 0430A0E1 		mov	r3, r4
 5618 21a8 04506CE0 		rsb	r5, ip, r4
 5619 21ac A06003E4 		str	r6, [r3], #-160
 5620 21b0 A05045E2 		sub	r5, r5, #160
 5621 21b4 A552A0E1 		mov	r5, r5, lsr #5
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5622              		.loc 1 336 0
 5623 21b8 0C0053E1 		cmp	r3, ip
 5624 21bc 035005E2 		and	r5, r5, #3
 5625 21c0 2600000A 		beq	.L273
 5626 21c4 000055E3 		cmp	r5, #0
 5627 21c8 1100000A 		beq	.L274
 5628 21cc 010055E3 		cmp	r5, #1
 5629 21d0 0900000A 		beq	.L288
 5630 21d4 020055E3 		cmp	r5, #2
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5631              		.loc 1 338 0
 5632 21d8 A0301415 		ldrne	r3, [r4, #-160]
 5633 21dc 03300010 		andne	r3, r0, r3
 5634 21e0 03308111 		orrne	r3, r1, r3
 5635 21e4 A0300415 		strne	r3, [r4, #-160]
 5636 21e8 053D4412 		subne	r3, r4, #320
 5637 21ec 004093E5 		ldr	r4, [r3, #0]
 5638 21f0 044000E0 		and	r4, r0, r4
 5639 21f4 044081E1 		orr	r4, r1, r4
 5640 21f8 A04003E4 		str	r4, [r3], #-160
 5641              	.L288:
 5642 21fc 004093E5 		ldr	r4, [r3, #0]
 5643 2200 044000E0 		and	r4, r0, r4
 5644 2204 044081E1 		orr	r4, r1, r4
 5645 2208 A04003E4 		str	r4, [r3], #-160
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5646              		.loc 1 336 0
 5647 220c 0C0053E1 		cmp	r3, ip
 5648 2210 1200000A 		beq	.L273
 5649              	.L274:
 338:../lcd.c      ****         	(LCD_PutPixel(usX0, usY0 + usLen, ucColor));
 5650              		.loc 1 338 0
 5651 2214 007093E5 		ldr	r7, [r3, #0]
 5652 2218 A06013E5 		ldr	r6, [r3, #-160]
 5653 221c 405113E5 		ldr	r5, [r3, #-320]
 5654 2220 E04113E5 		ldr	r4, [r3, #-480]
 5655 2224 077000E0 		and	r7, r0, r7
 5656 2228 066000E0 		and	r6, r0, r6
 5657 222c 055000E0 		and	r5, r0, r5
 5658 2230 044000E0 		and	r4, r0, r4
 5659 2234 077081E1 		orr	r7, r1, r7
 5660 2238 066081E1 		orr	r6, r1, r6
 5661 223c 055081E1 		orr	r5, r1, r5
 5662 2240 044081E1 		orr	r4, r1, r4
 5663 2244 007083E5 		str	r7, [r3, #0]
 5664 2248 A06003E5 		str	r6, [r3, #-160]
 5665 224c 405103E5 		str	r5, [r3, #-320]
 5666 2250 E04103E5 		str	r4, [r3, #-480]
 5667 2254 0A3D43E2 		sub	r3, r3, #640
 336:../lcd.c      ****         while( (usLen--) > 0 )
 5668              		.loc 1 336 0
 5669 2258 0C0053E1 		cmp	r3, ip
 5670 225c ECFFFF1A 		bne	.L274
 5671              	.L273:
 5672              	.LVL197:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5673              		.loc 1 333 0
 5674 2260 000058E3 		cmp	r8, #0
 5675 2264 0600000A 		beq	.L270
 340:../lcd.c      ****         usX0++;
 5676              		.loc 1 340 0
 5677 2268 013082E2 		add	r3, r2, #1
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5678              		.loc 1 333 0
 5679 226c 010048E2 		sub	r0, r8, #1
 340:../lcd.c      ****         usX0++;
 5680              		.loc 1 340 0
 5681 2270 0328A0E1 		mov	r2, r3, asl #16
 5682              	.LVL198:
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5683              		.loc 1 333 0
 5684 2274 0088A0E1 		mov	r8, r0, asl #16
 5685              	.LVL199:
 340:../lcd.c      ****         usX0++;
 5686              		.loc 1 340 0
 5687 2278 4228A0E1 		mov	r2, r2, asr #16
 333:../lcd.c      ****     while( (usWidth--) > 0 )
 5688              		.loc 1 333 0
 5689 227c 2888A0E1 		mov	r8, r8, lsr #16
 5690 2280 A4FFFFEA 		b	.L275
 5691              	.LVL200:
 5692              	.L270:
 342:../lcd.c      **** }
 5693              		.loc 1 342 0
 5694 2284 14D08DE2 		add	sp, sp, #20
 5695 2288 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 5696 228c 1EFF2FE1 		bx	lr
 5697              	.L293:
 5698              		.align	2
 5699              	.L292:
 5700 2290 58250C03 		.word	51127640
 5701              		.cfi_endproc
 5702              	.LFE8:
 5704              		.align	2
 5705              		.global	Lcd_DisplayString
 5707              	Lcd_DisplayString:
 5708              	.LFB9:
 344:../lcd.c      **** void Lcd_DisplayString(INT16U usX0, INT16U usY0, INT8U *pucStr){
 5709              		.loc 1 344 0
 5710              		.cfi_startproc
 5711              		@ Function supports interworking.
 5712              		@ args = 0, pretend = 0, frame = 0
 5713              		@ frame_needed = 0, uses_anonymous_args = 0
 5714              		@ link register save eliminated.
 5715              	.LVL201:
 346:../lcd.c      **** }
 5716              		.loc 1 346 0
 5717 2294 1EFF2FE1 		bx	lr
 5718              		.cfi_endproc
 5719              	.LFE9:
 5721              		.align	2
 5722              		.global	Lcd_DspAscII8x16
 5724              	Lcd_DspAscII8x16:
 5725              	.LFB10:
 359:../lcd.c      **** {
 5726              		.loc 1 359 0
 5727              		.cfi_startproc
 5728              		@ Function supports interworking.
 5729              		@ args = 0, pretend = 0, frame = 192
 5730              		@ frame_needed = 1, uses_anonymous_args = 0
 5731              	.LVL202:
 5732 2298 0DC0A0E1 		mov	ip, sp
 5733              	.LCFI12:
 5734              		.cfi_def_cfa_register 12
 5735 229c F0DF2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5736              		.loc 1 358 0
 5737 22a0 011181E0 		add	r1, r1, r1, asl #2
 5738              	.LVL203:
 359:../lcd.c      **** {
 5739              		.loc 1 359 0
 5740 22a4 04B04CE2 		sub	fp, ip, #4
 5741              		.cfi_offset 14, -8
 5742              		.cfi_offset 13, -12
 5743              		.cfi_offset 11, -16
 5744              		.cfi_offset 10, -20
 5745              		.cfi_offset 9, -24
 5746              		.cfi_offset 8, -28
 5747              		.cfi_offset 7, -32
 5748              		.cfi_offset 6, -36
 5749              		.cfi_offset 5, -40
 5750              		.cfi_offset 4, -44
 5751              	.LCFI13:
 5752              		.cfi_def_cfa 11, 4
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5753              		.loc 1 358 0
 5754 22a8 81E1A0E1 		mov	lr, r1, asl #3
 359:../lcd.c      **** {
 5755              		.loc 1 359 0
 5756 22ac C4D04DE2 		sub	sp, sp, #196
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5757              		.loc 1 358 0
 5758 22b0 C3C78EE2 		add	ip, lr, #51118080
 359:../lcd.c      **** {
 5759              		.loc 1 359 0
 5760 22b4 7C000BE5 		str	r0, [fp, #-124]
 365:../lcd.c      **** 	for( i = 0; i < strlen((const char*)s); i++ )
 5761              		.loc 1 365 0
 5762 22b8 0000A0E3 		mov	r0, #0
 5763              	.LVL204:
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5764              		.loc 1 358 0
 5765 22bc 961D8CE2 		add	r1, ip, #9600
 365:../lcd.c      **** 	for( i = 0; i < strlen((const char*)s); i++ )
 5766              		.loc 1 365 0
 5767 22c0 AC000BE5 		str	r0, [fp, #-172]
 5768 22c4 0300A0E1 		mov	r0, r3
 5769              	.LVL205:
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5770              		.loc 1 358 0
 5771 22c8 84100BE5 		str	r1, [fp, #-132]
 359:../lcd.c      **** {
 5772              		.loc 1 359 0
 5773 22cc 80200BE5 		str	r2, [fp, #-128]
 5774 22d0 B0300BE5 		str	r3, [fp, #-176]
 365:../lcd.c      **** 	for( i = 0; i < strlen((const char*)s); i++ )
 5775              		.loc 1 365 0
 5776 22d4 FEFFFFEB 		bl	strlen
 5777              	.LVL206:
 5778 22d8 AC101BE5 		ldr	r1, [fp, #-172]
 5779 22dc 010050E1 		cmp	r0, r1
 5780 22e0 8A01009A 		bls	.L295
 5781              	.L307:
 367:../lcd.c      **** 		if( (INT8U)*(s+i) >= 161 )
 5782              		.loc 1 367 0
 5783 22e4 B0301BE5 		ldr	r3, [fp, #-176]
 5784 22e8 0120D3E7 		ldrb	r2, [r3, r1]	@ zero_extendqisi2
 5785 22ec A00052E3 		cmp	r2, #160
 5786 22f0 88200BE5 		str	r2, [fp, #-136]
 5787 22f4 8501008A 		bhi	.L295
 5788              	.LVL207:
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5789              		.loc 1 358 0
 5790 22f8 7C301BE5 		ldr	r3, [fp, #-124]
 5791 22fc 026083E2 		add	r6, r3, #2
 5792 2300 042083E2 		add	r2, r3, #4
 5793              	.LVL208:
 5794 2304 017083E2 		add	r7, r3, #1
 5795 2308 031083E2 		add	r1, r3, #3
 5796 230c 055083E2 		add	r5, r3, #5
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 5797              		.loc 1 390 0
 5798 2310 0688A0E1 		mov	r8, r6, asl #16
 5799 2314 0268A0E1 		mov	r6, r2, asl #16
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5800              		.loc 1 358 0
 5801 2318 06E083E2 		add	lr, r3, #6
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 5802              		.loc 1 390 0
 5803 231c 07A8A0E1 		mov	sl, r7, asl #16
 5804 2320 C60FA0E1 		mov	r0, r6, asr #31
 5805 2324 0178A0E1 		mov	r7, r1, asl #16
 5806 2328 0518A0E1 		mov	r1, r5, asl #16
 5807 232c 4C000BE5 		str	r0, [fp, #-76]
 5808 2330 0E28A0E1 		mov	r2, lr, asl #16
 5809 2334 C10FA0E1 		mov	r0, r1, asr #31
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 5810              		.loc 1 358 0
 5811 2338 07C083E2 		add	ip, r3, #7
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 5812              		.loc 1 390 0
 5813 233c 40000BE5 		str	r0, [fp, #-64]
 5814 2340 0C38A0E1 		mov	r3, ip, asl #16
 5815 2344 C20FA0E1 		mov	r0, r2, asr #31
 5816 2348 44000BE5 		str	r0, [fp, #-68]
 5817 234c 4118A0E1 		mov	r1, r1, asr #16
 5818 2350 C30FA0E1 		mov	r0, r3, asr #31
 5819 2354 48000BE5 		str	r0, [fp, #-72]
 5820 2358 A0100BE5 		str	r1, [fp, #-160]
 5821 235c 4608A0E1 		mov	r0, r6, asr #16
 5822 2360 40101BE5 		ldr	r1, [fp, #-64]
 5823 2364 4368A0E1 		mov	r6, r3, asr #16
 5824 2368 A8600BE5 		str	r6, [fp, #-168]
 5825 236c C7CFA0E1 		mov	ip, r7, asr #31
 5826 2370 A0601BE5 		ldr	r6, [fp, #-160]
 5827 2374 4778A0E1 		mov	r7, r7, asr #16
 5828 2378 98700BE5 		str	r7, [fp, #-152]
 5829 237c A11EA0E1 		mov	r1, r1, lsr #29
 5830 2380 4278A0E1 		mov	r7, r2, asr #16
 5831 2384 A4700BE5 		str	r7, [fp, #-164]
 5832 2388 44201BE5 		ldr	r2, [fp, #-68]
 5833 238c 016086E0 		add	r6, r6, r1
 5834 2390 40600BE5 		str	r6, [fp, #-64]
 5835 2394 7C401BE5 		ldr	r4, [fp, #-124]
 5836 2398 A4601BE5 		ldr	r6, [fp, #-164]
 5837 239c A22EA0E1 		mov	r2, r2, lsr #29
 5838 23a0 0498A0E1 		mov	r9, r4, asl #16
 5839 23a4 48301BE5 		ldr	r3, [fp, #-72]
 5840 23a8 026086E0 		add	r6, r6, r2
 5841 23ac CA4FA0E1 		mov	r4, sl, asr #31
 5842 23b0 44600BE5 		str	r6, [fp, #-68]
 5843 23b4 4AA8A0E1 		mov	sl, sl, asr #16
 5844 23b8 A44EA0E1 		mov	r4, r4, lsr #29
 5845 23bc A8601BE5 		ldr	r6, [fp, #-168]
 5846 23c0 90A00BE5 		str	sl, [fp, #-144]
 5847 23c4 A33EA0E1 		mov	r3, r3, lsr #29
 5848 23c8 04A08AE0 		add	sl, sl, r4
 5849 23cc 9C000BE5 		str	r0, [fp, #-156]
 5850 23d0 036086E0 		add	r6, r6, r3
 5851 23d4 4C001BE5 		ldr	r0, [fp, #-76]
 5852 23d8 4CA00BE5 		str	sl, [fp, #-76]
 5853 23dc 48600BE5 		str	r6, [fp, #-72]
 5854 23e0 4C601BE5 		ldr	r6, [fp, #-76]
 5855 23e4 076006E2 		and	r6, r6, #7
 5856 23e8 4C600BE5 		str	r6, [fp, #-76]
 5857 23ec 40601BE5 		ldr	r6, [fp, #-64]
 5858 23f0 076006E2 		and	r6, r6, #7
 5859 23f4 40600BE5 		str	r6, [fp, #-64]
 5860 23f8 44601BE5 		ldr	r6, [fp, #-68]
 5861 23fc C95FA0E1 		mov	r5, r9, asr #31
 5862 2400 C8EFA0E1 		mov	lr, r8, asr #31
 5863 2404 076006E2 		and	r6, r6, #7
 5864 2408 4888A0E1 		mov	r8, r8, asr #16
 5865 240c A55EA0E1 		mov	r5, r5, lsr #29
 5866 2410 4998A0E1 		mov	r9, r9, asr #16
 5867 2414 AEEEA0E1 		mov	lr, lr, lsr #29
 5868 2418 9C701BE5 		ldr	r7, [fp, #-156]
 5869 241c 44600BE5 		str	r6, [fp, #-68]
 5870 2420 48601BE5 		ldr	r6, [fp, #-72]
 5871 2424 0EA088E0 		add	sl, r8, lr
 5872 2428 8C900BE5 		str	r9, [fp, #-140]
 5873 242c 94800BE5 		str	r8, [fp, #-148]
 5874 2430 A00EA0E1 		mov	r0, r0, lsr #29
 5875 2434 059089E0 		add	r9, r9, r5
 5876 2438 98801BE5 		ldr	r8, [fp, #-152]
 5877 243c ACCEA0E1 		mov	ip, ip, lsr #29
 5878 2440 007087E0 		add	r7, r7, r0
 5879 2444 076006E2 		and	r6, r6, #7
 5880 2448 079009E2 		and	r9, r9, #7
 5881 244c 48600BE5 		str	r6, [fp, #-72]
 5882 2450 099065E0 		rsb	r9, r5, r9
 5883 2454 0C8088E0 		add	r8, r8, ip
 5884 2458 40501BE5 		ldr	r5, [fp, #-64]
 5885 245c 077007E2 		and	r7, r7, #7
 5886 2460 070060E0 		rsb	r0, r0, r7
 5887 2464 07A00AE2 		and	sl, sl, #7
 5888 2468 078008E2 		and	r8, r8, #7
 5889 246c 0AE06EE0 		rsb	lr, lr, sl
 5890 2470 08C06CE0 		rsb	ip, ip, r8
 5891 2474 051061E0 		rsb	r1, r1, r5
 5892 2478 44801BE5 		ldr	r8, [fp, #-68]
 5893 247c 07A060E2 		rsb	sl, r0, #7
 5894 2480 4C601BE5 		ldr	r6, [fp, #-76]
 5895 2484 4CA00BE5 		str	sl, [fp, #-76]
 5896 2488 07A061E2 		rsb	sl, r1, #7
 5897 248c 48701BE5 		ldr	r7, [fp, #-72]
 5898 2490 40A00BE5 		str	sl, [fp, #-64]
 5899 2494 082062E0 		rsb	r2, r2, r8
 5900 2498 0001A0E1 		mov	r0, r0, asl #2
 5901 249c 68000BE5 		str	r0, [fp, #-104]
 5902 24a0 07A062E2 		rsb	sl, r2, #7
 5903 24a4 40001BE5 		ldr	r0, [fp, #-64]
 5904 24a8 44A00BE5 		str	sl, [fp, #-68]
 5905 24ac 073063E0 		rsb	r3, r3, r7
 5906 24b0 0111A0E1 		mov	r1, r1, asl #2
 5907 24b4 70100BE5 		str	r1, [fp, #-112]
 5908 24b8 07A063E2 		rsb	sl, r3, #7
 5909 24bc 0011A0E1 		mov	r1, r0, asl #2
 5910 24c0 44001BE5 		ldr	r0, [fp, #-68]
 5911 24c4 48A00BE5 		str	sl, [fp, #-72]
 5912 24c8 4CA01BE5 		ldr	sl, [fp, #-76]
 5913 24cc 4C100BE5 		str	r1, [fp, #-76]
 5914 24d0 0011A0E1 		mov	r1, r0, asl #2
 5915 24d4 48001BE5 		ldr	r0, [fp, #-72]
 5916 24d8 50100BE5 		str	r1, [fp, #-80]
 5917 24dc 0011A0E1 		mov	r1, r0, asl #2
 5918 24e0 064064E0 		rsb	r4, r4, r6
 5919 24e4 54100BE5 		str	r1, [fp, #-84]
 5920 24e8 076069E2 		rsb	r6, r9, #7
 5921 24ec 80101BE5 		ldr	r1, [fp, #-128]
 5922 24f0 0661A0E1 		mov	r6, r6, asl #2
 5923 24f4 1166A0E1 		mov	r6, r1, asl r6
 5924 24f8 075064E2 		rsb	r5, r4, #7
 5925 24fc 0551A0E1 		mov	r5, r5, asl #2
 5926 2500 1155A0E1 		mov	r5, r1, asl r5
 5927 2504 0F02A0E3 		mov	r0, #-268435456
 5928 2508 0441A0E1 		mov	r4, r4, asl #2
 5929 250c 40600BE5 		str	r6, [fp, #-64]
 5930 2510 3064E0E1 		mvn	r6, r0, lsr r4
 5931 2514 07806EE2 		rsb	r8, lr, #7
 5932 2518 07706CE2 		rsb	r7, ip, #7
 5933 251c 0771A0E1 		mov	r7, r7, asl #2
 5934 2520 0881A0E1 		mov	r8, r8, asl #2
 5935 2524 1188A0E1 		mov	r8, r1, asl r8
 5936 2528 48500BE5 		str	r5, [fp, #-72]
 5937 252c 1157A0E1 		mov	r5, r1, asl r7
 5938 2530 0EE1A0E1 		mov	lr, lr, asl #2
 5939 2534 0CC1A0E1 		mov	ip, ip, asl #2
 5940 2538 304EE0E1 		mvn	r4, r0, lsr lr
 5941 253c 44600BE5 		str	r6, [fp, #-68]
 5942 2540 306CE0E1 		mvn	r6, r0, lsr ip
 5943 2544 0AA1A0E1 		mov	sl, sl, asl #2
 5944 2548 68E01BE5 		ldr	lr, [fp, #-104]
 5945 254c 11CAA0E1 		mov	ip, r1, asl sl
 5946 2550 5C800BE5 		str	r8, [fp, #-92]
 5947 2554 4CA01BE5 		ldr	sl, [fp, #-76]
 5948 2558 70801BE5 		ldr	r8, [fp, #-112]
 5949 255c 64500BE5 		str	r5, [fp, #-100]
 5950 2560 50501BE5 		ldr	r5, [fp, #-80]
 5951 2564 0221A0E1 		mov	r2, r2, asl #2
 5952 2568 3078E0E1 		mvn	r7, r0, lsr r8
 5953 256c 3022E0E1 		mvn	r2, r0, lsr r2
 5954 2570 58400BE5 		str	r4, [fp, #-88]
 5955 2574 60600BE5 		str	r6, [fp, #-96]
 5956 2578 304EE0E1 		mvn	r4, r0, lsr lr
 5957 257c 116AA0E1 		mov	r6, r1, asl sl
 5958 2580 11E5A0E1 		mov	lr, r1, asl r5
 5959 2584 0331A0E1 		mov	r3, r3, asl #2
 5960 2588 0991A0E1 		mov	r9, r9, asl #2
 5961 258c 3099E0E1 		mvn	r9, r0, lsr r9
 5962 2590 68400BE5 		str	r4, [fp, #-104]
 5963 2594 6CC00BE5 		str	ip, [fp, #-108]
 5964 2598 3043E0E1 		mvn	r4, r0, lsr r3
 5965 259c 70700BE5 		str	r7, [fp, #-112]
 5966 25a0 4C600BE5 		str	r6, [fp, #-76]
 5967 25a4 74200BE5 		str	r2, [fp, #-116]
 5968 25a8 50E00BE5 		str	lr, [fp, #-80]
 5969 25ac 54001BE5 		ldr	r0, [fp, #-84]
 5970 25b0 1130A0E1 		mov	r3, r1, asl r0
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 5971              		.loc 1 379 0
 5972 25b4 88C01BE5 		ldr	ip, [fp, #-136]
 5973 25b8 5C839FE5 		ldr	r8, .L309
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 5974              		.loc 1 390 0
 5975 25bc 54300BE5 		str	r3, [fp, #-84]
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 5976              		.loc 1 379 0
 5977 25c0 0C3288E0 		add	r3, r8, ip, asl #4
 5978 25c4 0170D3E5 		ldrb	r7, [r3, #1]	@ zero_extendqisi2
 5979 25c8 02A0D3E5 		ldrb	sl, [r3, #2]	@ zero_extendqisi2
 5980 25cc 0360D3E5 		ldrb	r6, [r3, #3]	@ zero_extendqisi2
 5981 25d0 0420D3E5 		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 5982 25d4 0550D3E5 		ldrb	r5, [r3, #5]	@ zero_extendqisi2
 5983 25d8 0C82D8E7 		ldrb	r8, [r8, ip, asl #4]	@ zero_extendqisi2
 5984 25dc 06E0D3E5 		ldrb	lr, [r3, #6]	@ zero_extendqisi2
 5985 25e0 0810D3E5 		ldrb	r1, [r3, #8]	@ zero_extendqisi2
 5986 25e4 0900D3E5 		ldrb	r0, [r3, #9]	@ zero_extendqisi2
 5987 25e8 0AC0D3E5 		ldrb	ip, [r3, #10]	@ zero_extendqisi2
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 5988              		.loc 1 390 0
 5989 25ec 78400BE5 		str	r4, [fp, #-120]
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 5990              		.loc 1 379 0
 5991 25f0 88700BE5 		str	r7, [fp, #-136]
 5992 25f4 0740D3E5 		ldrb	r4, [r3, #7]	@ zero_extendqisi2
 5993 25f8 0B70D3E5 		ldrb	r7, [r3, #11]	@ zero_extendqisi2
 5994 25fc B4A00BE5 		str	sl, [fp, #-180]
 5995 2600 B8600BE5 		str	r6, [fp, #-184]
 5996 2604 0CA0D3E5 		ldrb	sl, [r3, #12]	@ zero_extendqisi2
 5997 2608 0D60D3E5 		ldrb	r6, [r3, #13]	@ zero_extendqisi2
 5998 260c BC200BE5 		str	r2, [fp, #-188]
 5999 2610 C0500BE5 		str	r5, [fp, #-192]
 6000 2614 0E20D3E5 		ldrb	r2, [r3, #14]	@ zero_extendqisi2
 6001 2618 0F50D3E5 		ldrb	r5, [r3, #15]	@ zero_extendqisi2
 6002 261c C4E00BE5 		str	lr, [fp, #-196]
 6003 2620 C8400BE5 		str	r4, [fp, #-200]
 6004 2624 CC100BE5 		str	r1, [fp, #-204]
 6005 2628 D0000BE5 		str	r0, [fp, #-208]
 6006 262c D4C00BE5 		str	ip, [fp, #-212]
 6007 2630 D8700BE5 		str	r7, [fp, #-216]
 6008 2634 DCA00BE5 		str	sl, [fp, #-220]
 6009 2638 E0600BE5 		str	r6, [fp, #-224]
 6010 263c E4200BE5 		str	r2, [fp, #-228]
 6011 2640 E8500BE5 		str	r5, [fp, #-232]
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6012              		.loc 1 390 0
 6013 2644 A8E01BE5 		ldr	lr, [fp, #-168]
 6014 2648 94701BE5 		ldr	r7, [fp, #-148]
 6015 264c A4401BE5 		ldr	r4, [fp, #-164]
 6016 2650 8C601BE5 		ldr	r6, [fp, #-140]
 6017 2654 07308EE2 		add	r3, lr, #7
 6018 2658 07E087E2 		add	lr, r7, #7
 6019 265c A8701BE5 		ldr	r7, [fp, #-168]
 6020 2660 072084E2 		add	r2, r4, #7
 6021 2664 074086E2 		add	r4, r6, #7
 6022 2668 A4601BE5 		ldr	r6, [fp, #-164]
 6023 266c A0501BE5 		ldr	r5, [fp, #-160]
 6024 2670 000057E3 		cmp	r7, #0
 6025 2674 0370A0B1 		movlt	r7, r3
 6026 2678 A0104BE2 		sub	r1, fp, #160
 6027 267c 0A0091E8 		ldmia	r1, {r1, r3}	@ phole ldm
 6028 2680 000056E3 		cmp	r6, #0
 6029 2684 0260A0B1 		movlt	r6, r2
 6030 2688 9C001BE5 		ldr	r0, [fp, #-156]
 6031 268c 000055E3 		cmp	r5, #0
 6032 2690 98201BE5 		ldr	r2, [fp, #-152]
 6033 2694 071081E2 		add	r1, r1, #7
 6034 2698 0510A0A1 		movge	r1, r5
 6035 269c 000053E3 		cmp	r3, #0
 6036 26a0 070080E2 		add	r0, r0, #7
 6037 26a4 98C01BE5 		ldr	ip, [fp, #-152]
 6038 26a8 0300A0A1 		movge	r0, r3
 6039 26ac 94304BE2 		sub	r3, fp, #148
 6040 26b0 280093E8 		ldmia	r3, {r3, r5}	@ phole ldm
 6041 26b4 000052E3 		cmp	r2, #0
 6042 26b8 07C08CE2 		add	ip, ip, #7
 6043 26bc 90A01BE5 		ldr	sl, [fp, #-144]
 6044 26c0 02C0A0A1 		movge	ip, r2
 6045 26c4 8C201BE5 		ldr	r2, [fp, #-140]
 6046 26c8 000053E3 		cmp	r3, #0
 6047 26cc 0E30A0B1 		movlt	r3, lr
 6048 26d0 000055E3 		cmp	r5, #0
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 6049              		.loc 1 358 0
 6050 26d4 84E01BE5 		ldr	lr, [fp, #-132]
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6051              		.loc 1 390 0
 6052 26d8 07A08AE2 		add	sl, sl, #7
 6053 26dc 05A0A0A1 		movge	sl, r5
 6054 26e0 000052E3 		cmp	r2, #0
 6055 26e4 0420A0B1 		movlt	r2, r4
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 6056              		.loc 1 358 0
 6057 26e8 C1518EE0 		add	r5, lr, r1, asr #3
 6058 26ec C0418EE0 		add	r4, lr, r0, asr #3
 6059 26f0 CCC18EE0 		add	ip, lr, ip, asr #3
 6060 26f4 CA018EE0 		add	r0, lr, sl, asr #3
 6061 26f8 C2218EE0 		add	r2, lr, r2, asr #3
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 6062              		.loc 1 379 0
 6063 26fc B4A01BE5 		ldr	sl, [fp, #-180]
 6064 2700 BC101BE5 		ldr	r1, [fp, #-188]
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 6065              		.loc 1 358 0
 6066 2704 C7718EE0 		add	r7, lr, r7, asr #3
 6067 2708 C6618EE0 		add	r6, lr, r6, asr #3
 6068 270c C3318EE0 		add	r3, lr, r3, asr #3
 379:../lcd.c      **** 				ywbuf[j] = g_auc_Ascii8x16[ulOffset + j];
 6069              		.loc 1 379 0
 6070 2710 3C804BE5 		strb	r8, [fp, #-60]
 6071              	.LVL209:
 6072 2714 88E01BE5 		ldr	lr, [fp, #-136]
 6073 2718 B8801BE5 		ldr	r8, [fp, #-184]
 6074 271c 3BE04BE5 		strb	lr, [fp, #-59]
 6075              	.LVL210:
 6076 2720 3AA04BE5 		strb	sl, [fp, #-58]
 6077              	.LVL211:
 6078 2724 C4A04BE2 		sub	sl, fp, #196
 6079 2728 00449AE8 		ldmia	sl, {sl, lr}	@ phole ldm
 6080 272c 39804BE5 		strb	r8, [fp, #-57]
 6081              	.LVL212:
 6082 2730 38104BE5 		strb	r1, [fp, #-56]
 6083              	.LVL213:
 6084 2734 CC104BE2 		sub	r1, fp, #204
 6085 2738 020191E8 		ldmia	r1, {r1, r8}	@ phole ldm
 6086 273c 37E04BE5 		strb	lr, [fp, #-55]
 6087              	.LVL214:
 6088 2740 36A04BE5 		strb	sl, [fp, #-54]
 6089              	.LVL215:
 6090 2744 35804BE5 		strb	r8, [fp, #-53]
 6091              	.LVL216:
 6092 2748 34104BE5 		strb	r1, [fp, #-52]
 6093              	.LVL217:
 6094 274c D8804BE2 		sub	r8, fp, #216
 6095 2750 004598E8 		ldmia	r8, {r8, sl, lr}	@ phole ldm
 6096 2754 32A04BE5 		strb	sl, [fp, #-50]
 6097 2758 E4A01BE5 		ldr	sl, [fp, #-228]
 6098 275c DC101BE5 		ldr	r1, [fp, #-220]
 6099 2760 33E04BE5 		strb	lr, [fp, #-51]
 6100              	.LVL218:
 6101 2764 31804BE5 		strb	r8, [fp, #-49]
 6102              	.LVL219:
 6103 2768 E0E01BE5 		ldr	lr, [fp, #-224]
 6104 276c E8801BE5 		ldr	r8, [fp, #-232]
 6105 2770 2EA04BE5 		strb	sl, [fp, #-46]
 6106 2774 88900BE5 		str	r9, [fp, #-136]
 6107 2778 30104BE5 		strb	r1, [fp, #-48]
 6108              	.LVL220:
 6109 277c 2FE04BE5 		strb	lr, [fp, #-47]
 6110              	.LVL221:
 6111 2780 2D804BE5 		strb	r8, [fp, #-45]
 6112              	.LVL222:
 358:../lcd.c      **** void Lcd_DspAscII8x16(INT16U x0, INT16U y0, INT8U ForeColor, INT8U * s)
 6113              		.loc 1 358 0
 6114 2784 0CE1A0E1 		mov	lr, ip, asl #2
 6115 2788 0211A0E1 		mov	r1, r2, asl #2
 6116 278c 0771A0E1 		mov	r7, r7, asl #2
 6117 2790 0661A0E1 		mov	r6, r6, asl #2
 6118 2794 0551A0E1 		mov	r5, r5, asl #2
 6119 2798 0441A0E1 		mov	r4, r4, asl #2
 6120 279c 03C1A0E1 		mov	ip, r3, asl #2
 6121 27a0 0001A0E1 		mov	r0, r0, asl #2
 6122 27a4 0020A0E3 		mov	r2, #0
 6123 27a8 3C804BE2 		sub	r8, fp, #60
 6124              	.LVL223:
 6125              	.L306:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6126              		.loc 1 387 0 discriminator 1
 6127 27ac 0230D8E7 		ldrb	r3, [r8, r2]	@ zero_extendqisi2
 6128 27b0 800013E3 		tst	r3, #128
 6129 27b4 0500000A 		beq	.L298
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6130              		.loc 1 390 0
 6131 27b8 88901BE5 		ldr	r9, [fp, #-136]
 6132 27bc 00A091E5 		ldr	sl, [r1, #0]
 6133 27c0 0AA009E0 		and	sl, r9, sl
 6134 27c4 40901BE5 		ldr	r9, [fp, #-64]
 6135 27c8 0AA089E1 		orr	sl, r9, sl
 6136 27cc 00A081E5 		str	sl, [r1, #0]
 6137              	.LVL224:
 6138              	.L298:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6139              		.loc 1 387 0
 6140 27d0 400013E3 		tst	r3, #64
 6141 27d4 0500000A 		beq	.L299
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6142              		.loc 1 390 0
 6143 27d8 44901BE5 		ldr	r9, [fp, #-68]
 6144 27dc 00A090E5 		ldr	sl, [r0, #0]
 6145 27e0 0AA009E0 		and	sl, r9, sl
 6146 27e4 48901BE5 		ldr	r9, [fp, #-72]
 6147 27e8 0AA089E1 		orr	sl, r9, sl
 6148 27ec 00A080E5 		str	sl, [r0, #0]
 6149              	.L299:
 6150              	.LVL225:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6151              		.loc 1 387 0
 6152 27f0 200013E3 		tst	r3, #32
 6153 27f4 0500000A 		beq	.L300
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6154              		.loc 1 390 0
 6155 27f8 58901BE5 		ldr	r9, [fp, #-88]
 6156 27fc 00A09CE5 		ldr	sl, [ip, #0]
 6157 2800 0AA009E0 		and	sl, r9, sl
 6158 2804 5C901BE5 		ldr	r9, [fp, #-92]
 6159 2808 0AA089E1 		orr	sl, r9, sl
 6160 280c 00A08CE5 		str	sl, [ip, #0]
 6161              	.L300:
 6162              	.LVL226:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6163              		.loc 1 387 0
 6164 2810 100013E3 		tst	r3, #16
 6165 2814 0500000A 		beq	.L301
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6166              		.loc 1 390 0
 6167 2818 60901BE5 		ldr	r9, [fp, #-96]
 6168 281c 00A09EE5 		ldr	sl, [lr, #0]
 6169 2820 0AA009E0 		and	sl, r9, sl
 6170 2824 64901BE5 		ldr	r9, [fp, #-100]
 6171 2828 0AA089E1 		orr	sl, r9, sl
 6172 282c 00A08EE5 		str	sl, [lr, #0]
 6173              	.L301:
 6174              	.LVL227:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6175              		.loc 1 387 0
 6176 2830 080013E3 		tst	r3, #8
 6177 2834 0500000A 		beq	.L302
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6178              		.loc 1 390 0
 6179 2838 68901BE5 		ldr	r9, [fp, #-104]
 6180 283c 00A094E5 		ldr	sl, [r4, #0]
 6181 2840 0AA009E0 		and	sl, r9, sl
 6182 2844 6C901BE5 		ldr	r9, [fp, #-108]
 6183 2848 0AA089E1 		orr	sl, r9, sl
 6184 284c 00A084E5 		str	sl, [r4, #0]
 6185              	.L302:
 6186              	.LVL228:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6187              		.loc 1 387 0
 6188 2850 040013E3 		tst	r3, #4
 6189 2854 0500000A 		beq	.L303
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6190              		.loc 1 390 0
 6191 2858 70901BE5 		ldr	r9, [fp, #-112]
 6192 285c 00A095E5 		ldr	sl, [r5, #0]
 6193 2860 0AA009E0 		and	sl, r9, sl
 6194 2864 4C901BE5 		ldr	r9, [fp, #-76]
 6195 2868 0AA089E1 		orr	sl, r9, sl
 6196 286c 00A085E5 		str	sl, [r5, #0]
 6197              	.L303:
 6198              	.LVL229:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6199              		.loc 1 387 0
 6200 2870 020013E3 		tst	r3, #2
 6201 2874 0500000A 		beq	.L304
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6202              		.loc 1 390 0
 6203 2878 74901BE5 		ldr	r9, [fp, #-116]
 6204 287c 00A096E5 		ldr	sl, [r6, #0]
 6205 2880 0AA009E0 		and	sl, r9, sl
 6206 2884 50901BE5 		ldr	r9, [fp, #-80]
 6207 2888 0AA089E1 		orr	sl, r9, sl
 6208 288c 00A086E5 		str	sl, [r6, #0]
 6209              	.L304:
 6210              	.LVL230:
 387:../lcd.c      **** 			    	if( ywbuf[y]  & (0x80 >> k) )
 6211              		.loc 1 387 0
 6212 2890 010013E3 		tst	r3, #1
 6213 2894 0500000A 		beq	.L305
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6214              		.loc 1 390 0
 6215 2898 009097E5 		ldr	r9, [r7, #0]
 6216 289c 78301BE5 		ldr	r3, [fp, #-120]
 6217 28a0 09A003E0 		and	sl, r3, r9
 6218 28a4 54901BE5 		ldr	r9, [fp, #-84]
 6219 28a8 0A3089E1 		orr	r3, r9, sl
 6220 28ac 003087E5 		str	r3, [r7, #0]
 6221              	.L305:
 6222              	.LVL231:
 6223 28b0 012082E2 		add	r2, r2, #1
 382:../lcd.c      ****             for( y = 0; y < 16; y++ )
 6224              		.loc 1 382 0
 6225 28b4 100052E3 		cmp	r2, #16
 390:../lcd.c      **** 			       		(LCD_PutPixel(xx, y + y0, (INT8U)ForeColor));
 6226              		.loc 1 390 0
 6227 28b8 A07087E2 		add	r7, r7, #160
 6228 28bc A06086E2 		add	r6, r6, #160
 6229 28c0 A05085E2 		add	r5, r5, #160
 6230 28c4 A04084E2 		add	r4, r4, #160
 6231 28c8 A0E08EE2 		add	lr, lr, #160
 6232 28cc A0C08CE2 		add	ip, ip, #160
 6233 28d0 A00080E2 		add	r0, r0, #160
 6234 28d4 A01081E2 		add	r1, r1, #160
 382:../lcd.c      ****             for( y = 0; y < 16; y++ )
 6235              		.loc 1 382 0
 6236 28d8 B3FFFF1A 		bne	.L306
 6237 28dc 7CA01BE5 		ldr	sl, [fp, #-124]
 6238 28e0 08108AE2 		add	r1, sl, #8
 6239 28e4 01E8A0E1 		mov	lr, r1, asl #16
 6240 28e8 AC201BE5 		ldr	r2, [fp, #-172]
 6241 28ec 2E08A0E1 		mov	r0, lr, lsr #16
 6242 28f0 01C082E2 		add	ip, r2, #1
 6243 28f4 7C000BE5 		str	r0, [fp, #-124]
 6244 28f8 B0001BE5 		ldr	r0, [fp, #-176]
 6245 28fc ACC00BE5 		str	ip, [fp, #-172]
 365:../lcd.c      **** 	for( i = 0; i < strlen((const char*)s); i++ )
 6246              		.loc 1 365 0
 6247 2900 FEFFFFEB 		bl	strlen
 6248 2904 AC101BE5 		ldr	r1, [fp, #-172]
 6249 2908 010050E1 		cmp	r0, r1
 6250 290c 74FEFF8A 		bhi	.L307
 6251              	.LVL232:
 6252              	.L295:
 396:../lcd.c      **** }
 6253              		.loc 1 396 0
 6254 2910 28D04BE2 		sub	sp, fp, #40
 6255 2914 F06F9DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 6256 2918 1EFF2FE1 		bx	lr
 6257              	.L310:
 6258              		.align	2
 6259              	.L309:
 6260 291c 00000000 		.word	g_auc_Ascii8x16
 6261              		.cfi_endproc
 6262              	.LFE10:
 6264              		.align	2
 6265              		.global	Lcd_DspAscII6x8
 6267              	Lcd_DspAscII6x8:
 6268              	.LFB11:
 409:../lcd.c      **** {
 6269              		.loc 1 409 0
 6270              		.cfi_startproc
 6271              		@ Function supports interworking.
 6272              		@ args = 0, pretend = 0, frame = 32
 6273              		@ frame_needed = 0, uses_anonymous_args = 0
 6274              		@ link register save eliminated.
 6275              	.LVL233:
 6276 2920 F0072DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 6277              	.LCFI14:
 6278              		.cfi_def_cfa_offset 28
 6279 2924 0380A0E1 		mov	r8, r3
 6280              		.cfi_offset 10, -4
 6281              		.cfi_offset 9, -8
 6282              		.cfi_offset 8, -12
 6283              		.cfi_offset 7, -16
 6284              		.cfi_offset 6, -20
 6285              		.cfi_offset 5, -24
 6286              		.cfi_offset 4, -28
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6287              		.loc 1 413 0
 6288 2928 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6289              	.LVL234:
 409:../lcd.c      **** {
 6290              		.loc 1 409 0
 6291 292c 24D04DE2 		sub	sp, sp, #36
 6292              	.LCFI15:
 6293              		.cfi_def_cfa_offset 64
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6294              		.loc 1 413 0
 6295 2930 000053E3 		cmp	r3, #0
 409:../lcd.c      **** {
 6296              		.loc 1 409 0
 6297 2934 18008DE5 		str	r0, [sp, #24]
 6298              	.LVL235:
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6299              		.loc 1 413 0
 6300 2938 BC00000A 		beq	.L311
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6301              		.loc 1 422 0
 6302 293c 01A041E2 		sub	sl, r1, #1
 6303 2940 02C041E2 		sub	ip, r1, #2
 6304 2944 034041E2 		sub	r4, r1, #3
 6305 2948 040041E2 		sub	r0, r1, #4
 6306 294c 055041E2 		sub	r5, r1, #5
 6307 2950 063041E2 		sub	r3, r1, #6
 6308 2954 077041E2 		sub	r7, r1, #7
 6309 2958 0A618AE0 		add	r6, sl, sl, asl #2
 6310 295c 011181E0 		add	r1, r1, r1, asl #2
 6311              	.LVL236:
 6312 2960 0C918CE0 		add	r9, ip, ip, asl #2
 6313 2964 04A184E0 		add	sl, r4, r4, asl #2
 6314 2968 00C180E0 		add	ip, r0, r0, asl #2
 6315 296c 050185E0 		add	r0, r5, r5, asl #2
 6316 2970 035183E0 		add	r5, r3, r3, asl #2
 6317 2974 0A43A0E1 		mov	r4, sl, asl #6
 6318 2978 073187E0 		add	r3, r7, r7, asl #2
 6319 297c 0CA3A0E1 		mov	sl, ip, asl #6
 6320 2980 0173A0E1 		mov	r7, r1, asl #6
 6321 2984 0003A0E1 		mov	r0, r0, asl #6
 6322 2988 0513A0E1 		mov	r1, r5, asl #6
 6323 298c 0ACC8AE2 		add	ip, sl, #2560
 6324 2990 0A5C80E2 		add	r5, r0, #2560
 6325 2994 0AAC81E2 		add	sl, r1, #2560
 6326 2998 0333A0E1 		mov	r3, r3, asl #6
 6327 299c 0A3C83E2 		add	r3, r3, #2560
 6328 29a0 A500A0E1 		mov	r0, r5, lsr #1
 6329 29a4 AA10A0E1 		mov	r1, sl, lsr #1
 6330 29a8 0663A0E1 		mov	r6, r6, asl #6
 6331 29ac 0993A0E1 		mov	r9, r9, asl #6
 6332 29b0 0A4C84E2 		add	r4, r4, #2560
 6333 29b4 ACC0A0E1 		mov	ip, ip, lsr #1
 6334 29b8 A350A0E1 		mov	r5, r3, lsr #1
 6335 29bc C3C68CE2 		add	ip, ip, #204472320
 6336 29c0 C30680E2 		add	r0, r0, #204472320
 6337 29c4 0A7C87E2 		add	r7, r7, #2560
 6338 29c8 0A6C86E2 		add	r6, r6, #2560
 6339 29cc 0A9C89E2 		add	r9, r9, #2560
 6340 29d0 A440A0E1 		mov	r4, r4, lsr #1
 6341 29d4 C31681E2 		add	r1, r1, #204472320
 6342 29d8 963C8CE2 		add	r3, ip, #38400
 6343 29dc A770A0E1 		mov	r7, r7, lsr #1
 6344 29e0 C34684E2 		add	r4, r4, #204472320
 6345 29e4 96CC80E2 		add	ip, r0, #38400
 6346 29e8 A660A0E1 		mov	r6, r6, lsr #1
 6347 29ec A990A0E1 		mov	r9, r9, lsr #1
 6348 29f0 C35685E2 		add	r5, r5, #204472320
 6349 29f4 960C81E2 		add	r0, r1, #38400
 6350 29f8 C3A687E2 		add	sl, r7, #204472320
 6351 29fc C36686E2 		add	r6, r6, #204472320
 6352 2a00 967C84E2 		add	r7, r4, #38400
 6353 2a04 C39689E2 		add	r9, r9, #204472320
 6354 2a08 964C85E2 		add	r4, r5, #38400
 6355 2a0c 08308DE5 		str	r3, [sp, #8]
 6356 2a10 0CC08DE5 		str	ip, [sp, #12]
 6357 2a14 10008DE5 		str	r0, [sp, #16]
 6358 2a18 00808DE5 		str	r8, [sp, #0]
 6359 2a1c 18309DE5 		ldr	r3, [sp, #24]
 6360 2a20 04708DE5 		str	r7, [sp, #4]
 6361 2a24 14408DE5 		str	r4, [sp, #20]
 6362 2a28 96AC8AE2 		add	sl, sl, #38400
 6363 2a2c 966C86E2 		add	r6, r6, #38400
 6364 2a30 969C89E2 		add	r9, r9, #38400
 6365 2a34 0F42A0E3 		mov	r4, #-268435456
 6366 2a38 0870A0E1 		mov	r7, r8
 6367              	.LVL237:
 6368              	.L323:
 408:../lcd.c      **** void Lcd_DspAscII6x8(INT16U usX0, INT16U usY0,INT8U ForeColor, INT8U* pucChar)
 6369              		.loc 1 408 0
 6370 2a3c 1C708DE5 		str	r7, [sp, #28]
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6371              		.loc 1 422 0
 6372 2a40 0300E0E1 		mvn	r0, r3
 409:../lcd.c      **** {
 6373              		.loc 1 409 0
 6374 2a44 00C0A0E3 		mov	ip, #0
 6375              	.LVL238:
 6376              	.L322:
 417:../lcd.c      ****   			ucTemp = g_auc_Ascii6x8[(*pucChar) * 8 + i];
 6377              		.loc 1 417 0
 6378 2a48 00509DE5 		ldr	r5, [sp, #0]
 6379 2a4c 0070D5E5 		ldrb	r7, [r5, #0]	@ zero_extendqisi2
 6380 2a50 87118CE0 		add	r1, ip, r7, asl #3
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6381              		.loc 1 420 0
 6382 2a54 E0719FE5 		ldr	r7, .L325
 6383 2a58 0110D7E7 		ldrb	r1, [r7, r1]	@ zero_extendqisi2
 6384 2a5c 800011E3 		tst	r1, #128
 6385 2a60 0800000A 		beq	.L314
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6386              		.loc 1 422 0
 6387 2a64 A351A0E1 		mov	r5, r3, lsr #3
 6388 2a68 05819AE7 		ldr	r8, [sl, r5, asl #2]
 6389 2a6c 077003E2 		and	r7, r3, #7
 6390 2a70 0771A0E1 		mov	r7, r7, asl #2
 6391 2a74 3477C8E1 		bic	r7, r8, r4, lsr r7
 6392 2a78 078000E2 		and	r8, r0, #7
 6393 2a7c 0881A0E1 		mov	r8, r8, asl #2
 6394 2a80 127887E1 		orr	r7, r7, r2, asl r8
 6395 2a84 05718AE7 		str	r7, [sl, r5, asl #2]
 6396              	.L314:
 6397              	.LVL239:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6398              		.loc 1 420 0
 6399 2a88 400011E3 		tst	r1, #64
 6400 2a8c 0800000A 		beq	.L315
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6401              		.loc 1 422 0
 6402 2a90 A351A0E1 		mov	r5, r3, lsr #3
 6403 2a94 058196E7 		ldr	r8, [r6, r5, asl #2]
 6404 2a98 077003E2 		and	r7, r3, #7
 6405 2a9c 0771A0E1 		mov	r7, r7, asl #2
 6406 2aa0 3477C8E1 		bic	r7, r8, r4, lsr r7
 6407 2aa4 078000E2 		and	r8, r0, #7
 6408 2aa8 0881A0E1 		mov	r8, r8, asl #2
 6409 2aac 127887E1 		orr	r7, r7, r2, asl r8
 6410 2ab0 057186E7 		str	r7, [r6, r5, asl #2]
 6411              	.L315:
 6412              	.LVL240:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6413              		.loc 1 420 0
 6414 2ab4 200011E3 		tst	r1, #32
 6415 2ab8 0800000A 		beq	.L316
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6416              		.loc 1 422 0
 6417 2abc A351A0E1 		mov	r5, r3, lsr #3
 6418 2ac0 058199E7 		ldr	r8, [r9, r5, asl #2]
 6419 2ac4 077003E2 		and	r7, r3, #7
 6420 2ac8 0771A0E1 		mov	r7, r7, asl #2
 6421 2acc 3477C8E1 		bic	r7, r8, r4, lsr r7
 6422 2ad0 078000E2 		and	r8, r0, #7
 6423 2ad4 0881A0E1 		mov	r8, r8, asl #2
 6424 2ad8 127887E1 		orr	r7, r7, r2, asl r8
 6425 2adc 057189E7 		str	r7, [r9, r5, asl #2]
 6426              	.L316:
 6427              	.LVL241:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6428              		.loc 1 420 0
 6429 2ae0 100011E3 		tst	r1, #16
 6430 2ae4 0A00000A 		beq	.L317
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6431              		.loc 1 422 0
 6432 2ae8 04809DE5 		ldr	r8, [sp, #4]
 6433 2aec A351A0E1 		mov	r5, r3, lsr #3
 6434 2af0 058198E7 		ldr	r8, [r8, r5, asl #2]
 6435 2af4 077003E2 		and	r7, r3, #7
 6436 2af8 0771A0E1 		mov	r7, r7, asl #2
 6437 2afc 3477C8E1 		bic	r7, r8, r4, lsr r7
 6438 2b00 078000E2 		and	r8, r0, #7
 6439 2b04 0881A0E1 		mov	r8, r8, asl #2
 6440 2b08 127887E1 		orr	r7, r7, r2, asl r8
 6441 2b0c 04809DE5 		ldr	r8, [sp, #4]
 6442 2b10 057188E7 		str	r7, [r8, r5, asl #2]
 6443              	.L317:
 6444              	.LVL242:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6445              		.loc 1 420 0
 6446 2b14 080011E3 		tst	r1, #8
 6447 2b18 0A00000A 		beq	.L318
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6448              		.loc 1 422 0
 6449 2b1c 08809DE5 		ldr	r8, [sp, #8]
 6450 2b20 A351A0E1 		mov	r5, r3, lsr #3
 6451 2b24 058198E7 		ldr	r8, [r8, r5, asl #2]
 6452 2b28 077003E2 		and	r7, r3, #7
 6453 2b2c 0771A0E1 		mov	r7, r7, asl #2
 6454 2b30 3477C8E1 		bic	r7, r8, r4, lsr r7
 6455 2b34 078000E2 		and	r8, r0, #7
 6456 2b38 0881A0E1 		mov	r8, r8, asl #2
 6457 2b3c 127887E1 		orr	r7, r7, r2, asl r8
 6458 2b40 08809DE5 		ldr	r8, [sp, #8]
 6459 2b44 057188E7 		str	r7, [r8, r5, asl #2]
 6460              	.L318:
 6461              	.LVL243:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6462              		.loc 1 420 0
 6463 2b48 040011E3 		tst	r1, #4
 6464 2b4c 0A00000A 		beq	.L319
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6465              		.loc 1 422 0
 6466 2b50 0C809DE5 		ldr	r8, [sp, #12]
 6467 2b54 A351A0E1 		mov	r5, r3, lsr #3
 6468 2b58 058198E7 		ldr	r8, [r8, r5, asl #2]
 6469 2b5c 077003E2 		and	r7, r3, #7
 6470 2b60 0771A0E1 		mov	r7, r7, asl #2
 6471 2b64 3477C8E1 		bic	r7, r8, r4, lsr r7
 6472 2b68 078000E2 		and	r8, r0, #7
 6473 2b6c 0881A0E1 		mov	r8, r8, asl #2
 6474 2b70 127887E1 		orr	r7, r7, r2, asl r8
 6475 2b74 0C809DE5 		ldr	r8, [sp, #12]
 6476 2b78 057188E7 		str	r7, [r8, r5, asl #2]
 6477              	.L319:
 6478              	.LVL244:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6479              		.loc 1 420 0
 6480 2b7c 020011E3 		tst	r1, #2
 6481 2b80 0A00000A 		beq	.L320
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6482              		.loc 1 422 0
 6483 2b84 10809DE5 		ldr	r8, [sp, #16]
 6484 2b88 A351A0E1 		mov	r5, r3, lsr #3
 6485 2b8c 058198E7 		ldr	r8, [r8, r5, asl #2]
 6486 2b90 077003E2 		and	r7, r3, #7
 6487 2b94 0771A0E1 		mov	r7, r7, asl #2
 6488 2b98 3477C8E1 		bic	r7, r8, r4, lsr r7
 6489 2b9c 078000E2 		and	r8, r0, #7
 6490 2ba0 0881A0E1 		mov	r8, r8, asl #2
 6491 2ba4 127887E1 		orr	r7, r7, r2, asl r8
 6492 2ba8 10809DE5 		ldr	r8, [sp, #16]
 6493 2bac 057188E7 		str	r7, [r8, r5, asl #2]
 6494              	.L320:
 6495              	.LVL245:
 420:../lcd.c      ****   				if( (ucTemp & (0x80 >> j)) != 0 )
 6496              		.loc 1 420 0
 6497 2bb0 010011E3 		tst	r1, #1
 6498 2bb4 0A00000A 		beq	.L321
 422:../lcd.c      ****   					LCD_PutPixel(usX0 + i, usY0 + 8 - j, (INT8U)ForeColor);
 6499              		.loc 1 422 0
 6500 2bb8 14509DE5 		ldr	r5, [sp, #20]
 6501 2bbc A311A0E1 		mov	r1, r3, lsr #3
 6502 2bc0 017195E7 		ldr	r7, [r5, r1, asl #2]
 6503 2bc4 078003E2 		and	r8, r3, #7
 6504 2bc8 0851A0E1 		mov	r5, r8, asl #2
 6505 2bcc 3455C7E1 		bic	r5, r7, r4, lsr r5
 6506 2bd0 078000E2 		and	r8, r0, #7
 6507 2bd4 0871A0E1 		mov	r7, r8, asl #2
 6508 2bd8 125785E1 		orr	r5, r5, r2, asl r7
 6509 2bdc 14709DE5 		ldr	r7, [sp, #20]
 6510 2be0 015187E7 		str	r5, [r7, r1, asl #2]
 6511              	.L321:
 6512              	.LVL246:
 415:../lcd.c      **** 		for( i=0; i < 8; i++ )
 6513              		.loc 1 415 0
 6514 2be4 01C08CE2 		add	ip, ip, #1
 6515              	.LVL247:
 6516 2be8 08005CE3 		cmp	ip, #8
 6517 2bec 013083E2 		add	r3, r3, #1
 6518 2bf0 010040E2 		sub	r0, r0, #1
 6519 2bf4 93FFFF1A 		bne	.L322
 6520              	.LVL248:
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6521              		.loc 1 413 0
 6522 2bf8 1C809DE5 		ldr	r8, [sp, #28]
 415:../lcd.c      **** 		for( i=0; i < 8; i++ )
 6523              		.loc 1 415 0
 6524 2bfc 00C09DE5 		ldr	ip, [sp, #0]
 6525              	.LVL249:
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6526              		.loc 1 413 0
 6527 2c00 0130D8E5 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 415:../lcd.c      **** 		for( i=0; i < 8; i++ )
 6528              		.loc 1 415 0
 6529 2c04 01008CE2 		add	r0, ip, #1
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6530              		.loc 1 413 0
 6531 2c08 000053E3 		cmp	r3, #0
 415:../lcd.c      **** 		for( i=0; i < 8; i++ )
 6532              		.loc 1 415 0
 6533 2c0c 00008DE5 		str	r0, [sp, #0]
 413:../lcd.c      **** 	while( *pucChar != 0 )
 6534              		.loc 1 413 0
 6535 2c10 0600000A 		beq	.L311
 426:../lcd.c      **** 		usX0 += XWIDTH;
 6536              		.loc 1 426 0
 6537 2c14 18809DE5 		ldr	r8, [sp, #24]
 6538 2c18 067088E2 		add	r7, r8, #6
 6539 2c1c 0718A0E1 		mov	r1, r7, asl #16
 6540 2c20 2138A0E1 		mov	r3, r1, lsr #16
 6541 2c24 18308DE5 		str	r3, [sp, #24]
 6542 2c28 00709DE5 		ldr	r7, [sp, #0]
 6543 2c2c 82FFFFEA 		b	.L323
 6544              	.LVL250:
 6545              	.L311:
 429:../lcd.c      **** }
 6546              		.loc 1 429 0
 6547 2c30 24D08DE2 		add	sp, sp, #36
 6548 2c34 F007BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl}
 6549 2c38 1EFF2FE1 		bx	lr
 6550              	.L326:
 6551              		.align	2
 6552              	.L325:
 6553 2c3c 00000000 		.word	g_auc_Ascii6x8
 6554              		.cfi_endproc
 6555              	.LFE11:
 6557              		.align	2
 6558              		.global	ReverseLine
 6560              	ReverseLine:
 6561              	.LFB12:
 442:../lcd.c      **** {
 6562              		.loc 1 442 0
 6563              		.cfi_startproc
 6564              		@ Function supports interworking.
 6565              		@ args = 0, pretend = 0, frame = 0
 6566              		@ frame_needed = 0, uses_anonymous_args = 0
 6567              		@ link register save eliminated.
 6568              	.LVL251:
 445:../lcd.c      **** 	for( i = 0; i < ulHeight; i++ )
 6569              		.loc 1 445 0
 6570 2c40 000050E3 		cmp	r0, #0
 454:../lcd.c      **** }
 6571              		.loc 1 454 0
 6572 2c44 01118110 		addne	r1, r1, r1, asl #2
 6573              	.LVL252:
 442:../lcd.c      **** {
 6574              		.loc 1 442 0
 6575 2c48 30002DE9 		stmfd	sp!, {r4, r5}
 6576              	.LCFI16:
 6577              		.cfi_def_cfa_offset 8
 454:../lcd.c      **** }
 6578              		.loc 1 454 0
 6579 2c4c 0153A011 		movne	r5, r1, asl #6
 6580              		.cfi_offset 5, -4
 6581              		.cfi_offset 4, -8
 445:../lcd.c      **** 	for( i = 0; i < ulHeight; i++ )
 6582              		.loc 1 445 0
 6583 2c50 0040A013 		movne	r4, #0
 6584 2c54 1800000A 		beq	.L327
 6585              	.LVL253:
 6586              	.L331:
 454:../lcd.c      **** }
 6587              		.loc 1 454 0
 6588 2c58 A520A0E1 		mov	r2, r5, lsr #1
 441:../lcd.c      **** void ReverseLine(INT32U ulHeight, INT32U ulY)
 6589              		.loc 1 441 0
 6590 2c5c 60C09FE5 		ldr	ip, .L337
 454:../lcd.c      **** }
 6591              		.loc 1 454 0
 6592 2c60 C33682E2 		add	r3, r2, #204472320
 6593 2c64 963C83E2 		add	r3, r3, #38400
 441:../lcd.c      **** void ReverseLine(INT32U ulHeight, INT32U ulY)
 6594              		.loc 1 441 0
 6595 2c68 0CC082E0 		add	ip, r2, ip
 6596              	.LVL254:
 6597              	.L330:
 449:../lcd.c      **** 			temp = *(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4);
 6598              		.loc 1 449 0 discriminator 2
 6599 2c6c 001093E5 		ldr	r1, [r3, #0]
 6600 2c70 0320A0E1 		mov	r2, r3
 6601              	.LVL255:
 450:../lcd.c      **** 			temp ^= 0xFFFFFFFF;
 6602              		.loc 1 450 0 discriminator 2
 6603 2c74 0110E0E1 		mvn	r1, r1
 451:../lcd.c      **** 			*(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4) = temp;
 6604              		.loc 1 451 0 discriminator 2
 6605 2c78 041082E4 		str	r1, [r2], #4
 6606              	.LVL256:
 449:../lcd.c      **** 			temp = *(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4);
 6607              		.loc 1 449 0 discriminator 2
 6608 2c7c 041093E5 		ldr	r1, [r3, #4]
 450:../lcd.c      **** 			temp ^= 0xFFFFFFFF;
 6609              		.loc 1 450 0 discriminator 2
 6610 2c80 0110E0E1 		mvn	r1, r1
 451:../lcd.c      **** 			*(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4) = temp;
 6611              		.loc 1 451 0 discriminator 2
 6612 2c84 001082E5 		str	r1, [r2, #0]
 449:../lcd.c      **** 			temp = *(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4);
 6613              		.loc 1 449 0 discriminator 2
 6614 2c88 041092E5 		ldr	r1, [r2, #4]
 6615 2c8c 0C2093E5 		ldr	r2, [r3, #12]
 450:../lcd.c      **** 			temp ^= 0xFFFFFFFF;
 6616              		.loc 1 450 0 discriminator 2
 6617 2c90 0110E0E1 		mvn	r1, r1
 451:../lcd.c      **** 			*(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4) = temp;
 6618              		.loc 1 451 0 discriminator 2
 6619 2c94 081083E5 		str	r1, [r3, #8]
 449:../lcd.c      **** 			temp = *(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4);
 6620              		.loc 1 449 0 discriminator 2
 6621 2c98 103083E2 		add	r3, r3, #16
 450:../lcd.c      **** 			temp ^= 0xFFFFFFFF;
 6622              		.loc 1 450 0 discriminator 2
 6623 2c9c 0220E0E1 		mvn	r2, r2
 447:../lcd.c      **** 		for( j = 0; j < (SCR_XSIZE/4/2) ; j++ )
 6624              		.loc 1 447 0 discriminator 2
 6625 2ca0 0C0053E1 		cmp	r3, ip
 451:../lcd.c      **** 			*(INT32U*)(LCD_VIRTUAL_BUFFER + (ulY+i)*SCR_XSIZE/2 + j*4) = temp;
 6626              		.loc 1 451 0 discriminator 2
 6627 2ca4 042003E5 		str	r2, [r3, #-4]
 447:../lcd.c      **** 		for( j = 0; j < (SCR_XSIZE/4/2) ; j++ )
 6628              		.loc 1 447 0 discriminator 2
 6629 2ca8 EFFFFF1A 		bne	.L330
 445:../lcd.c      **** 	for( i = 0; i < ulHeight; i++ )
 6630              		.loc 1 445 0
 6631 2cac 014084E2 		add	r4, r4, #1
 6632              	.LVL257:
 6633 2cb0 000054E1 		cmp	r4, r0
 6634 2cb4 055D85E2 		add	r5, r5, #320
 6635 2cb8 E6FFFF1A 		bne	.L331
 6636              	.LVL258:
 6637              	.L327:
 454:../lcd.c      **** }
 6638              		.loc 1 454 0
 6639 2cbc 3000BDE8 		ldmfd	sp!, {r4, r5}
 6640 2cc0 1EFF2FE1 		bx	lr
 6641              	.L338:
 6642              		.align	2
 6643              	.L337:
 6644 2cc4 A096300C 		.word	204510880
 6645              		.cfi_endproc
 6646              	.LFE12:
 6648              		.align	2
 6649              		.global	Lcd_Dma_Trans
 6651              	Lcd_Dma_Trans:
 6652              	.LFB14:
 471:../lcd.c      **** 
 472:../lcd.c      **** /*********************************************************************************************
 473:../lcd.c      **** * name:		Lcd_Dma_Trans()
 474:../lcd.c      **** * func:		dma transport virtual LCD screen to LCD actual screen
 475:../lcd.c      **** * para:		none
 476:../lcd.c      **** * ret:		none
 477:../lcd.c      **** * modify:
 478:../lcd.c      **** * comment:		
 479:../lcd.c      **** *********************************************************************************************/
 480:../lcd.c      **** void Lcd_Dma_Trans(void)
 481:../lcd.c      **** {
 6653              		.loc 1 481 0
 6654              		.cfi_startproc
 6655              		@ Function supports interworking.
 6656              		@ args = 0, pretend = 0, frame = 0
 6657              		@ frame_needed = 0, uses_anonymous_args = 0
 6658              		@ link register save eliminated.
 482:../lcd.c      **** 	//INT8U err;
 483:../lcd.c      **** 	
 484:../lcd.c      **** 	//ucZdma0Done=1;
 485:../lcd.c      **** 	//#define LCD_VIRTUAL_BUFFER	(0xc400000)
 486:../lcd.c      **** 	//#define LCD_ACTIVE_BUFFER	(LCD_VIRTUAL_BUFFER+(SCR_XSIZE*SCR_YSIZE/2))	//DMA ON
 487:../lcd.c      **** 	//#define LCD_ACTIVE_BUFFER	LCD_VIRTUAL_BUFFER								//DMA OFF
 488:../lcd.c      **** 	//#define LCD_BUF_SIZE		(SCR_XSIZE*SCR_YSIZE/2)
 489:../lcd.c      **** 	//So the Lcd Buffer Low area is from LCD_VIRTUAL_BUFFER to (LCD_ACTIVE_BUFFER+(SCR_XSIZE*SCR_YSIZE
 490:../lcd.c      **** 	rNCACHBE1=(((unsigned)(LCD_ACTIVE_BUFFER)>>12) <<16 )|((unsigned)(LCD_VIRTUAL_BUFFER)>>12);
 6659              		.loc 1 490 0
 6660 2cc8 38109FE5 		ldr	r1, .L340
 6661 2ccc 07C5A0E3 		mov	ip, #29360128
 6662 2cd0 08108CE5 		str	r1, [ip, #8]
 491:../lcd.c      ****   	rZDISRC0=(DW<<30)|(1<<28)     |LCD_VIRTUAL_BUFFER; // inc
 6663              		.loc 1 491 0
 6664 2cd4 30009FE5 		ldr	r0, .L340+4
 492:../lcd.c      ****   	rZDIDES0=( 2<<30)|(1<<28)     |LCD_ACTIVE_BUFFER; // inc
 6665              		.loc 1 492 0
 6666 2cd8 30209FE5 		ldr	r2, .L340+8
 493:../lcd.c      ****     rZDICNT0=( 2<<28)|(1<<26)     |(3<<22)     |(0<<20)      |(LCD_BUF_SIZE);
 6667              		.loc 1 493 0
 6668 2cdc 30C09FE5 		ldr	ip, .L340+12
 491:../lcd.c      ****   	rZDISRC0=(DW<<30)|(1<<28)     |LCD_VIRTUAL_BUFFER; // inc
 6669              		.loc 1 491 0
 6670 2ce0 7A37A0E3 		mov	r3, #31981568
 6671 2ce4 040083E5 		str	r0, [r3, #4]
 492:../lcd.c      ****   	rZDIDES0=( 2<<30)|(1<<28)     |LCD_ACTIVE_BUFFER; // inc
 6672              		.loc 1 492 0
 6673 2ce8 082083E5 		str	r2, [r3, #8]
 6674              		.loc 1 493 0
 6675 2cec 0CC083E5 		str	ip, [r3, #12]
 494:../lcd.c      ****         //           |            |            |             |            |---->0 = Disable DMA
 495:../lcd.c      ****         //           |            |            |             |------------>Int. whenever transferre
 496:../lcd.c      ****         //           |            |            |-------------------->Write time on the fly
 497:../lcd.c      ****         //           |            |---------------------------->Block(4-word) transfer mode
 498:../lcd.c      ****         //           |------------------------------------>whole service
 499:../lcd.c      **** 	    //reEnable ZDMA transfer
 500:../lcd.c      ****   	rZDICNT0 |= (1<<20);		//after ES3
 6676              		.loc 1 500 0
 6677 2cf0 0C1093E5 		ldr	r1, [r3, #12]
 501:../lcd.c      ****     rZDCON0=0x1; // start!!!  
 6678              		.loc 1 501 0
 6679 2cf4 0120A0E3 		mov	r2, #1
 500:../lcd.c      ****   	rZDICNT0 |= (1<<20);		//after ES3
 6680              		.loc 1 500 0
 6681 2cf8 010681E3 		orr	r0, r1, #1048576
 6682 2cfc 0C0083E5 		str	r0, [r3, #12]
 6683              		.loc 1 501 0
 6684 2d00 002083E5 		str	r2, [r3, #0]
 502:../lcd.c      **** 
 503:../lcd.c      **** 	//Delay(500);
 504:../lcd.c      **** 	//while(ucZdma0Done);		//wait for DMA finish
 505:../lcd.c      **** }
 6685              		.loc 1 505 0
 6686 2d04 1EFF2FE1 		bx	lr
 6687              	.L341:
 6688              		.align	2
 6689              	.L340:
 6690 2d08 09C300C3 		.word	-1023360247
 6691 2d0c 0096301C 		.word	472946176
 6692 2d10 0000309C 		.word	-1674575872
 6693 2d14 0096C024 		.word	616601088
 6694              		.cfi_endproc
 6695              	.LFE14:
 6697              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2392   .text:00000000 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2395   .text:00000000 Zdma0Done
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2439   .text:00000038 Lcd_Init
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2533   .text:000000ec $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2554   .text:00000134 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2557   .text:00000134 Lcd_Active_Clr
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2591   .text:00000164 $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2595   .text:00000168 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2598   .text:00000168 LCD_GetPixel
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2634   .text:000001a4 Lcd_Clr
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2668   .text:000001d4 $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2673   .text:000001dc $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:2676   .text:000001dc LcdClrRect
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:3372   .text:000009cc $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:3377   .text:000009d4 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:3380   .text:000009d4 Lcd_Draw_Box
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:4046   .text:000010f8 $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:4053   .text:000010fc $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:4056   .text:000010fc Lcd_Draw_Line
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5300   .text:00001e9c $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5306   .text:00001ea0 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5309   .text:00001ea0 Lcd_Draw_HLine
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5504   .text:000020a4 Lcd_Draw_VLine
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5700   .text:00002290 $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5704   .text:00002294 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5707   .text:00002294 Lcd_DisplayString
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:5724   .text:00002298 Lcd_DspAscII8x16
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6260   .text:0000291c $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6264   .text:00002920 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6267   .text:00002920 Lcd_DspAscII6x8
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6553   .text:00002c3c $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6557   .text:00002c40 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6560   .text:00002c40 ReverseLine
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6644   .text:00002cc4 $d
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6648   .text:00002cc8 $a
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6651   .text:00002cc8 Lcd_Dma_Trans
C:\Users\sergi\AppData\Local\Temp\ccmtiUdQ.s:6690   .text:00002d08 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
push_debug
__aeabi_idiv
strlen
g_auc_Ascii8x16
g_auc_Ascii6x8
